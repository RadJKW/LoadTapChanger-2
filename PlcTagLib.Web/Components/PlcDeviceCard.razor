@inject IDialogService DialogService

<style>
 
        .tag-group-flex {
            display: flex;
            justify-items: center;
            align-items: center;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: space-evenly;
            grid-auto-flow: row;
            margin:  auto;
        }
        .tag-group-flex > * {
            margin: 0.5rem auto;
        } 
                
        .mud-card > *,p {
         font-size: calc(0.75rem + 0.2vw);
        }
</style>
<MudCard Class="col-8 mx-auto" Style="min-width: 300px">
    <MudCardHeader>
        <div class="col d-flex justify-start">
            <MudButton
                Style=""
                Class="flex-none"
                Variant="Variant.Outlined"
                Color="Color.Tertiary"
                Size="Size.Medium"
                StartIcon="@Icons.Filled.Add"
                @onclick="OpenAddTagGroupDialog">
                Group
            </MudButton>
        </div>
        <div class="col-4 d-flex justify-center">
            <MudText
                Typo="Typo.h4"
                Align="Align.Center"
                GutterBottom="false">
                @CardTitle
            </MudText>
        </div>
        <div class="col d-flex justify-end">
            <MudIconButton
                Variant="Variant.Outlined"
                Size="Size.Medium"
                Icon="@Icons.Rounded.EditNote">
            </MudIconButton>
        </div>

    </MudCardHeader>
    <MudDivider DividerType="DividerType.FullWidth" FlexItem="false"/>
    <MudCardContent>
        <div class="tag-group-flex">
            @foreach (var tagGroup in TagGroups)
            {
                <PlcTagGroup TagGroupType="@tagGroup.TagGroupType"/>

            }
        </div>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public string CardTitle { get; set; } = "Card Title";

    private List<TagGroup> TagGroups { get; set; } = new List<TagGroup>();

    async Task OpenAddTagGroupDialog()
    {
        var parameters = new DialogParameters()
        {
            ["UsedTagGroupTypes"] = TagGroups.Select(x => x.TagGroupType).ToList()
        };
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Small
        };

        var dialog = await DialogService.ShowAsync<AddTagGroupForm>("Simple Dialog", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var tagGroupType = (PlcTagGroup.TagType)result.Data;
            TagGroups.Add(new TagGroup(tagGroupType));
        }
    }

    public class TagGroup
    {
        public PlcTagGroup.TagType TagGroupType { get; set; }

        public TagGroup()
        {
            TagGroupType = PlcTagGroup.TagType.None;
        }
        public TagGroup(PlcTagGroup.TagType tagGroupType)
        {
            TagGroupType = tagGroupType;
        }
    }

}