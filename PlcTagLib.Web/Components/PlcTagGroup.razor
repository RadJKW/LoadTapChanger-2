@using libplctag
@inject IDialogService DialogService
<style>
    .tag-group {
        border: 1px solid darkgrey;
        border-radius: 4px;
        vertical-align: middle;
        
    }
    
    .tg-header{
        display: flex;
        flex-direction: row;
        align-items: center;
        margin-bottom: 5px;
        border-bottom: 1px solid darkgrey;
        text-align: center;
    }
    .add-btn{
        width:  15%;
        height: 100%;
        margin: 0;    
    }
    .title{
        /* offset the width and margin of the button to keep it centered */
        font-size: 1.5em;
        margin: 0 auto;
    }
    
    .tg-content{
        padding: 16px;
    }
</style>
<div class="tag-group">
    <div class="tg-header">
        <MudIconButton
            Class="add-btn"
            Variant="Variant.Text"
            Size="Size.Small"
            Color="Color.Success"
            Icon="@Icons.Material.Filled.Add"
            OnClick="() => OpenEditTagButtons(false)">
        </MudIconButton>
        <MudDivider Vertical="true" DividerType="DividerType.FullWidth" FlexItem="true" Style="border: 1px solid white"/>
        <MudText
            Class="title"
            Typo="Typo.body1"
            Align="Align.Center">
            @TagGroupTypeString
        </MudText>
        <MudIconButton
            Class="rm-btn"
            Variant="Variant.Text"
            Size="Size.Small"
            Color="Color.Error"
            Icon="@Icons.Material.Filled.Remove"
            OnClick="() => OpenEditTagButtons(true)">
        </MudIconButton>
    </div>
    <MudStack Class="tg-content" AlignItems="AlignItems.Center">
        @foreach (var tagButton in PlcTagButtons)
        {
            <PlcTagButton Address="@tagButton.Name" Value="@tagButton.Value"/>
        }
    </MudStack>
</div>

@code {

    [Parameter]
    public TagType TagGroupType { get; set; }

    private string TagGroupTypeString => TagGroupType.ToString();
    private List<TagButton> PlcTagButtons { get; set; } = new List<TagButton>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        PlcTagButtons.Add(new TagButton("Tag1", true));
    }

    public class TagButton
    {
        public TagButton(string? name = null, bool value = false)
        {
            Name = name;
            Value = value;
        }


        public string? Name { get; set; }
        public string? Gateway { get; set; }
        public bool Value { get; set; }
        public DebugLevel DebugLevel { get; set; } = DebugLevel.None;

    }

    public enum TagType
    {
        Input,
        Output,
        Binary,
        Counter,
        Integer,
        Timer,
    }

    async Task OpenEditTagButtons(bool delete)
    {
        var parameters = new DialogParameters
        {
            {
                "TagButtons", PlcTagButtons
            }
        };
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Large,
            CloseButton = true
        };

        var dialog = await DialogService.ShowAsync<EditTagButtons>("Edit Tag Buttons", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (delete)
            {

            }
            else
            {
                PlcTagButtons = (List<TagButton>)result.Data;

            }
        }



    }
}