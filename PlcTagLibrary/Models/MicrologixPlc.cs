// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace PlcTagLibrary.Models;

/// <summary>
/// Database Model of Micrologix PLCs
/// </summary>
/// <remarks> List of Parameters for Micrologix PLCs
///     <para>
///     <list type="bullet">
///     <item>
///         <term>PlcId</term>
///         <description>: Primary Key</description>
///         <description>, Autogenerated</description>
///     </item>
///     <item>
///         <term>Name</term>
///         <description>: Nullable</description>
///         <description>, Not Required</description>
///     </item>
///     <item>
///         <term>DefaultName</term>
///         <description>: Computed</description>
///         <description>, Not Required</description>
///     </item>
///     <item>
///         <term>Gateway</term>
///         <description>: Nullable</description>
///         <description>, Not Required</description>
///     </item>
///     <item>
///         <term>TimeoutSeconds = </term>
///         <description>> 5 </description>
///     </item><item>
///         <term>PlcType = </term>
///         <description>> "PlcType.Slc500" </description>
///     </item><item>
///         <term>Protocol = </term>
///         <description>> "Protocol.ab_eip" </description>
///     </item>
///     </list>
///     </para>
///     
/// </remarks>
/// <param name="PlcId">Primary Key: Auto-Increments on Creation</param>
/// <param name="Name">Name of the PLC (NULLABLE)</param>
/// <param name="DefaultName">Computed name of plc, replaces 
///     <paramref name="Name"/> if <paramref name="Name"/> is NULL
/// </param>
/// <param name="Gateway">Plc's IpV4 Address (NULLABLE)</param>
/// <param name="TimeoutSeconds">[ Defualt: 5 ] : Timeout in Seconds </param>
/// <param name="PlcType">[ Default: "PlcType.Slc500" ] : Type of PLC</param>
/// <param name="Protocol">[ Default: "ab_eip" ] : Protocol used to communicate with PLC</param>
/// 
public partial class MicrologixPlc
{
    private readonly short _timeoutSeconds = 5;
    private readonly PlcType _plcType = PlcType.Slc500;
    private readonly Protocol _protocol = Protocol.ab_eip;
    public MicrologixPlc()
    {
        TimeoutSeconds = _timeoutSeconds;
        PlcType = _plcType;
        Protocol = _protocol;
        PlcTags = new HashSet<PlcTag>();
    }

    public int PlcId { get; set; }
    public string Name { get; set; }
    public string DefaultName { get; set; }
    public string Gateway { get; set; }
    public short TimeoutSeconds { get; set; }
    public PlcType PlcType { get; set; }
    public Protocol Protocol { get; set; }

    public virtual ICollection<PlcTag> PlcTags { get; set; }

}

/// <summary>
/// Types of PLC's supported by the library
/// </summary>
public enum PlcType
{
    /// <summary>
    /// Control Logix-class PLC. Synonym for lgx, logix, controllogix, contrologix, compactlogix, clgx.
    /// </summary>
    ControlLogix,

    /// <summary>
    /// PLC/5 PLC. Synonym for plc5, plc.
    /// </summary>
    Plc5,

    /// <summary>
    /// SLC 500 PLC. Synonym for slc500, slc.
    /// </summary>
    Slc500,

    /// <summary>
    /// Control Logix-class PLC using the PLC/5 protocol. Synonym for lgxpccc, logixpccc, lgxplc5, lgx_pccc, logix_pccc, lgx_plc5.
    /// </summary>
    LogixPccc,

    /// <summary>
    /// Micro800-class PLC. Synonym for micrologix800, mlgx800, micro800.
    /// </summary>
    Micro800,

    /// <summary>
    /// MicroLogix PLC. Synonym for micrologix, mlgx.
    /// </summary>
    MicroLogix,

    /// <summary>
    /// Omron PLC. Synonym for omron-njnx, omron-nj, omron-nx, njnx, nx1p2
    /// </summary>
    Omron,
}

/// <summary>
/// Communication Protocols supported by the library
/// </summary>
public enum Protocol
{
    /// <summary>
    /// Allen-Bradley specific flavor of EIP
    /// </summary>
    ab_eip,

    /// <summary>
    /// A Modbus TCP implementation used by many PLCs
    /// </summary>
    modbus_tcp
}

