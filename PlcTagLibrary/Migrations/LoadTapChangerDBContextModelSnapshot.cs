// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlcTagLibrary.Datas;

#nullable disable

namespace PlcTagLibrary.Migrations
{
    [DbContext(typeof(LoadTapChangerDBContext))]
    partial class LoadTapChangerDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PlcTagLibrary.Modelss.ListTagsByPlc", b =>
                {
                    b.Property<string>("ConfiguredName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gateway")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TagType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.ToView("ListTagsByPLC");
                });

            modelBuilder.Entity("PlcTagLibrary.Modelss.MicrologixPlc", b =>
                {
                    b.Property<int>("PlcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlcId"), 1L, 1);

                    b.Property<int?>("DefaultName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("('PLC-'+[PlcId])", false);

                    b.Property<string>("Gateway")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlcType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("TimeoutSeconds")
                        .HasColumnType("smallint");

                    b.HasKey("PlcId");

                    b.HasIndex(new[] { "PlcId", "Name" }, "IX_MicrologixPlcs_PlcId_Name")
                        .IsUnique()
                        .HasFilter("([Name] IS NOT NULL)");

                    b.ToTable("MicrologixPlcs");
                });

            modelBuilder.Entity("PlcTagLibrary.Modelss.MicrologixTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<string>("ConfiguredName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PlcDeviceId")
                        .HasColumnType("int");

                    b.Property<string>("TagType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("TagId");

                    b.HasIndex(new[] { "PlcDeviceId" }, "IX_MicrologixTags_PlcDeviceId");

                    b.HasIndex(new[] { "TagId", "CustomName", "ConfiguredName" }, "IX_MicrologixTags_TagId_CustomName_ConfiguredName")
                        .IsUnique()
                        .HasFilter("([CustomName] IS NOT NULL AND [ConfiguredName] IS NOT NULL)");

                    b.ToTable("MicrologixTags");
                });

            modelBuilder.Entity("PlcTagLibrary.Modelss.MicrologixTag", b =>
                {
                    b.HasOne("PlcTagLibrary.Modelss.MicrologixPlc", "PlcDevice")
                        .WithMany("MicrologixTags")
                        .HasForeignKey("PlcDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_PlcTag_Plc");

                    b.Navigation("PlcDevice");
                });

            modelBuilder.Entity("PlcTagLibrary.Modelss.MicrologixPlc", b =>
                {
                    b.Navigation("MicrologixTags");
                });
#pragma warning restore 612, 618
        }
    }
}
