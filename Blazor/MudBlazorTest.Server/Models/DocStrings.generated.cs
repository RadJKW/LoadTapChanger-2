//-----------------------------------------------------------------------
// This file is autogenerated by MudBlazor.Docs.Compiler
// Any changes to this file will be overwritten on build
// <auto-generated />
//-----------------------------------------------------------------------

namespace MudBlazor.Docs.Models
{
    public static partial class DocStrings
    {
        public const string ActivatableCallback_method_Void_Activate_System_Object__Microsoft_AspNetCore_Components_Web_MouseEventArgs_ = @"";

        public const string AggregateDefinition_method_System_String_GetValue_System_String__System_Collections_Generic_IEnumerable_1_T__ = @"";

        public const string AggregateDefinition_method_MudBlazor_AggregateDefinition_1_T__SimpleAvg__ = @"";

        public const string AggregateDefinition_method_MudBlazor_AggregateDefinition_1_T__SimpleCount__ = @"";

        public const string AggregateDefinition_method_MudBlazor_AggregateDefinition_1_T__SimpleMax__ = @"";

        public const string AggregateDefinition_method_MudBlazor_AggregateDefinition_1_T__SimpleMin__ = @"";

        public const string AggregateDefinition_method_MudBlazor_AggregateDefinition_1_T__SimpleSum__ = @"";

        public const string Bar_InputData = @"";

        public const string Bar_InputLabels = @"";

        public const string Bar_XAxisLabels = @"";

        public const string Bar_ChartSeries = @"";

        public const string Bar_ChartOptions = @"";

        public const string Bar_CustomGraphics = @"RenderFragment for costumization inside the chart's svg.";

        public const string Bar_ChartType = @"The Type of the chart.";

        public const string Bar_Width = @"The Width of the chart, end with % or px.";

        public const string Bar_Height = @"The Height of the chart, end with % or px.";

        public const string Bar_LegendPosition = @"The placement direction of the legend if used.";

        public const string Bar_SelectedIndex = @"Selected index of a portion of the chart.";

        public const string Bar_SelectedIndexChanged = @"Selected index of a portion of the chart.";

        public const string Bar_Class = @"User class names, separated by space.";

        public const string Bar_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string Bar_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string Bar_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string BaseMask_method_System_String_GetCleanText__ = @"
            <summary>
            Get the Text without delimiters or placeholders. Depends on the implementation entirely.
            Clean text will usually be used for the Value property of a mask field. 
            </summary>
        ";

        public const string BaseMask_method_Void_Insert_System_String_ = @"
            <summary>
            Implements user input at the current caret position (single key strokes or pasting longer text)
            </summary>
            <param name=""input""></param>
        ";

        public const string BaseMask_method_Void_Delete__ = @"
            <summary>
            Implements the effect of the Del key at the current cursor position
            </summary>
        ";

        public const string BaseMask_method_Void_Backspace__ = @"
            <summary>
            Implements the effect of the Backspace key at the current cursor position
            </summary>
        ";

        public const string BaseMask_method_Void_Clear__ = @"
            <summary>
            Reset the mask as if the whole textfield was cleared
            </summary>
        ";

        public const string BaseMask_method_Void_SetText_System_String_ = @"
            <summary>
            Overwrite the mask text from the outside without losing caret position
            </summary>
            <param name=""text""></param>
        ";

        public const string BaseMask_method_Void_UpdateFrom_MudBlazor_IMask_ = @"";

        public const string BaseMudThemeProvider_Theme = @"The theme used by the application.";

        public const string BaseMudThemeProvider_DefaultScrollbar = @"If true, will not apply MudBlazor styled scrollbar and use browser default.";

        public const string BaseMudThemeProvider_IsDarkMode = @"The active palette of the theme.";

        public const string BaseMudThemeProvider_IsDarkModeChanged = @"Invoked when the dark mode changes.";

        public const string BaseMudThemeProvider_method_System_Threading_Tasks_Task_1_System_Boolean__GetSystemPreference__ = @"
            <summary>
            Returns the dark mode preference of the user. True if dark mode is preferred.
            </summary>
            <returns></returns>
        ";

        public const string Block_method_Boolean_op_Inequality_MudBlazor_Block__MudBlazor_Block_ = @"";

        public const string Block_method_Boolean_op_Equality_MudBlazor_Block__MudBlazor_Block_ = @"";

        public const string Block_method_Void_Deconstruct_Char_ByRef__Int32_ByRef__Int32_ByRef_ = @"";

        public const string BlockMask_method_Void_UpdateFrom_MudBlazor_IMask_ = @"";

        public const string BlockMask_method_Void_Insert_System_String_ = @"
            <summary>
            Inserts given text at caret position
            </summary>
            <param name=""input"">One or multiple characters of input</param>
        ";

        public const string BlockMask_method_Void_Delete__ = @"
            <summary>
            Implements the effect of the Del key at the current cursor position
            </summary>
        ";

        public const string BlockMask_method_Void_Backspace__ = @"
            <summary>
            Implements the effect of the Backspace key at the current cursor position
            </summary>
        ";

        public const string BlockMask_method_MudBlazor_RegexMask_IPv4_Boolean__Char_ = @"
            <summary>
            Creates a predefined RegexMask for an IPv4 Address with or without port masking.
            </summary>
            <param name=""includePort"">
            Set to true to include port to the mask.
            </param>
            <param name=""maskChar"">
            Set the IPv4 maskChar. Default is '0'
            </param>
        ";

        public const string BlockMask_method_MudBlazor_RegexMask_IPv6_Boolean__Char__Char_ = @"
            <summary>
            Creates a predefined RegexMask for an IPv6 Address with or without port masking.
            </summary>
            <param name=""includePort"">
            Set to true to include port to the mask.
            </param>
            <param name=""maskChar"">
            Set the IPv6 maskChar. Default is 'X'
            </param>
            <param name=""portMaskChar"">
            Set the IPv6 portMask. Default is '0'
            </param>
        ";

        public const string BlockMask_method_MudBlazor_RegexMask_Email_System_String_ = @"
            <summary>
            Creates a predefined RegexMask for Email Address.
            </summary>
            <param name=""mask"">
            Set the email mask. Default is ""Ex. user@domain.com""
            </param>
        ";

        public const string BlockMask_method_System_String_GetCleanText__ = @"
            <summary>
            Get the Text without delimiters or placeholders. Depends on the implementation entirely.
            Clean text will usually be used for the Value property of a mask field. 
            </summary>
        ";

        public const string BlockMask_method_Void_Clear__ = @"
            <summary>
            Reset the mask as if the whole textfield was cleared
            </summary>
        ";

        public const string BlockMask_method_Void_SetText_System_String_ = @"
            <summary>
            Overwrite the mask text from the outside without losing caret position
            </summary>
            <param name=""text""></param>
        ";

        public const string BoundingClientRect_method_MudBlazor_Interop_BoundingClientRect_Clone__ = @"";

        public const string BoundingClientRectExtensions_method_Boolean_IsEqualTo_MudBlazor_Interop_BoundingClientRect__MudBlazor_Interop_BoundingClientRect_ = @"";

        public const string BreadcrumbLink_Item = @"";

        public const string BreakpointService_method_Void_RaiseOnResized_MudBlazor_Services_BrowserWindowSize__MudBlazor_Breakpoint__System_Guid_ = @"
            <summary>
            Invoked by jsInterop, use the OnResized event handler to subscribe.
            </summary>
            <param name=""browserWindowSize""></param>
            <param name=""breakpoint""></param>
            <param name=""optionId""></param>
        ";

        public const string BreakpointService_method_System_Threading_Tasks_ValueTask_1_System_Boolean__MatchMedia_System_String_ = @"
            <summary>
            Determine if the Document matches the provided media query.
            </summary>
            <param name=""mediaQuery""></param>
            <returns>Returns true if matched.</returns>
        ";

        public const string BreakpointService_method_System_Threading_Tasks_Task_1_MudBlazor_Breakpoint__GetBreakpoint__ = @"";

        public const string BreakpointService_method_System_Threading_Tasks_Task_1_System_Boolean__IsMediaSize_MudBlazor_Breakpoint_ = @"";

        public const string BreakpointService_method_Boolean_IsMediaSize_MudBlazor_Breakpoint__MudBlazor_Breakpoint_ = @"";

        public const string BreakpointService_method_System_Threading_Tasks_Task_1_MudBlazor_Services_BreakpointServiceSubscribeResult__Subscribe_System_Action_1_MudBlazor_Breakpoint__ = @"";

        public const string BreakpointService_method_System_Threading_Tasks_Task_1_MudBlazor_Services_BreakpointServiceSubscribeResult__Subscribe_System_Action_1_MudBlazor_Breakpoint___MudBlazor_Services_ResizeOptions_ = @"";

        public const string BreakpointService_method_System_Threading_Tasks_Task_1_System_Boolean__Unsubscribe_System_Guid_ = @"";

        public const string BreakpointService_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string BreakpointServiceSubscribeResult_method_Boolean_op_Inequality_MudBlazor_Services_BreakpointServiceSubscribeResult__MudBlazor_Services_BreakpointServiceSubscribeResult_ = @"";

        public const string BreakpointServiceSubscribeResult_method_Boolean_op_Equality_MudBlazor_Services_BreakpointServiceSubscribeResult__MudBlazor_Services_BreakpointServiceSubscribeResult_ = @"";

        public const string BreakpointServiceSubscribeResult_method_MudBlazor_Services_BreakpointServiceSubscribeResult__Clone____ = @"";

        public const string BreakpointServiceSubscribeResult_method_Void_Deconstruct_System_Guid_ByRef__MudBlazor_Breakpoint_ByRef_ = @"";

        public const string BreakpointServiceSubscriptionInfo_method_System_Guid_AddSubscription_System_Action_1_MudBlazor_Breakpoint__ = @"";

        public const string BreakpointServiceSubscriptionInfo_method_Boolean_ContainsSubscription_System_Guid_ = @"";

        public const string BreakpointServiceSubscriptionInfo_method_Boolean_RemoveSubscription_System_Guid_ = @"";

        public const string BreakpointServiceSubscriptionInfo_method_Void_InvokeCallbacks_MudBlazor_Breakpoint_ = @"";

        public const string BrowserWindowSizeProvider_method_System_Threading_Tasks_ValueTask_1_MudBlazor_Services_BrowserWindowSize__GetBrowserWindowSize__ = @"
            <summary>
            Get the current BrowserWindowSize, this includes the Height and Width of the document.
            </summary>
            <returns></returns>
        ";

        public const string Cell_method_System_Threading_Tasks_Task_StringValueChangedAsync_System_String_ = @"";

        public const string Cell_method_System_Threading_Tasks_Task_NumberValueChangedAsync_System_Nullable_1_System_Double__ = @"";

        public const string ColorManager_method_System_Drawing_Color_FromHex_System_String_ = @"";

        public const string ColorManager_method_System_Drawing_Color_ColorLighten_System_Drawing_Color__Double_ = @"";

        public const string ColorManager_method_System_Drawing_Color_ColorDarken_System_Drawing_Color__Double_ = @"";

        public const string ColorManager_method_Void_FromHex_System_String__Byte_ByRef__Byte_ByRef__Byte_ByRef__Byte_ByRef_ = @"";

        public const string ColorManager_method_System_String_ToRgbaFromHex_System_String__Double_ = @"";

        public const string ColorManager_method_System_String_ColorRgbDarken_System_String_ = @"";

        public const string ColorManager_method_System_String_ColorRgbLighten_System_String_ = @"";

        public const string ColorManager_method_System_String_ColorRgb_System_String_ = @"";

        public const string ColorManager_method_System_String_ColorRgbElements_System_String_ = @"";

        public const string ColorManager_method_System_String_ColorRgba_System_String__Double_ = @"";

        public const string ColorTransformation_method_HSLColor_RgBtoHsl_System_Drawing_Color_ = @"
            <summary>
            Converts RGB to HSL. Alpha is ignored.
            Output is: { H: [0, 360], S: [0, 1], L: [0, 1] }.
            </summary>
            <param name=""color"">The color to convert.</param>
        ";

        public const string ColorTransformation_method_System_Drawing_Color_HsLtoRgb_HSLColor__Int32_ = @"
            <summary>
            Converts HSL to RGB, with a specified output Alpha.
            Arguments are limited to the defined range:
            does not raise exceptions.
            </summary>
            <param name=""hsl"">HSL comprising of - </param>
            hsl.H (Hue), must be in [0, 360] - 
            hsl.S (Saturation), must be in [0, 1] - 
            hsl.L (Luminance), must be in [0, 1].
            <param name=""a"">Output Alpha, must be in [0, 255].</param>
        ";

        public const string Column_Value = @"";

        public const string Column_ValueChanged = @"";

        public const string Column_Field = @"Specifies the name of the object's property bound to the column";

        public const string Column_FieldType = @"";

        public const string Column_Title = @"";

        public const string Column_HideSmall = @"";

        public const string Column_FooterColSpan = @"";

        public const string Column_HeaderColSpan = @"";

        public const string Column_ChildContent = @"";

        public const string Column_HeaderTemplate = @"";

        public const string Column_CellTemplate = @"";

        public const string Column_FooterTemplate = @"";

        public const string Column_GroupTemplate = @"";

        public const string Column_GroupBy = @"";

        public const string Column_HeaderClass = @"";

        public const string Column_HeaderClassFunc = @"";

        public const string Column_HeaderStyle = @"";

        public const string Column_HeaderStyleFunc = @"";

        public const string Column_Sortable = @"Determines whether this columns data can be sorted. This overrides the Sortable parameter on the DataGrid.";

        public const string Column_Resizable = @"";

        public const string Column_Filterable = @"Determines whether this columns data can be filtered. This overrides the Filterable parameter on the DataGrid.";

        public const string Column_ShowFilterIcon = @"";

        public const string Column_Hideable = @"Determines whether this column can be hidden. This overrides the Hideable parameter on the DataGrid.";

        public const string Column_Hidden = @"";

        public const string Column_HiddenChanged = @"";

        public const string Column_ShowColumnOptions = @"Determines whether to show or hide column options. This overrides the ShowColumnOptions parameter on the DataGrid.";

        public const string Column_SortBy = @"";

        public const string Column_InitialDirection = @"";

        public const string Column_SortIcon = @"";

        public const string Column_Groupable = @"Specifies whether the column can be grouped.";

        public const string Column_Grouping = @"Specifies whether the column is grouped.";

        public const string Column_StickyLeft = @"Specifies whether the column is sticky.";

        public const string Column_StickyRight = @"";

        public const string Column_FilterTemplate = @"";

        public const string Column_Culture = @"The culture used to represent this column and by the filtering input field.";

        public const string Column_CellClass = @"";

        public const string Column_CellClassFunc = @"";

        public const string Column_CellStyle = @"";

        public const string Column_CellStyleFunc = @"";

        public const string Column_IsEditable = @"";

        public const string Column_EditTemplate = @"";

        public const string Column_FooterClass = @"";

        public const string Column_FooterClassFunc = @"";

        public const string Column_FooterStyle = @"";

        public const string Column_FooterStyleFunc = @"";

        public const string Column_EnableFooterSelection = @"";

        public const string Column_AggregateDefinition = @"";

        public const string Column_Class = @"User class names, separated by space.";

        public const string Column_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string Column_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string Column_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string Column_method_System_Threading_Tasks_Task_HideAsync__ = @"";

        public const string Column_method_System_Threading_Tasks_Task_ShowAsync__ = @"";

        public const string Column_method_System_Threading_Tasks_Task_ToggleAsync__ = @"";

        public const string Converters_method_MudBlazor_DateConverter_DateFormat_System_String_ = @"";

        public const string Converters_method_MudBlazor_DateConverter_DateFormat_System_String__System_Globalization_CultureInfo_ = @"";

        public const string DataGridExtensions_method_System_Collections_Generic_IEnumerable_1_T__OrderBySortDefinitions_T__System_Collections_Generic_IEnumerable_1_T___MudBlazor_GridState_1_T__ = @"";

        public const string DataGridExtensions_method_System_Collections_Generic_IEnumerable_1_T__OrderBySortDefinitions_T__System_Collections_Generic_IEnumerable_1_T___System_Collections_Generic_ICollection_1_MudBlazor_SortDefinition_1_T___ = @"";

        public const string DataGridRowValidator_method_Void_Validate__ = @"";

        public const string DateMask_method_Void_UpdateFrom_MudBlazor_IMask_ = @"";

        public const string DateMask_method_Void_Insert_System_String_ = @"
            <summary>
            Inserts given text at caret position
            </summary>
            <param name=""input"">One or multiple characters of input</param>
        ";

        public const string DateMask_method_Void_Delete__ = @"
            <summary>
            Implements the effect of the Del key at the current cursor position
            </summary>
        ";

        public const string DateMask_method_Void_Backspace__ = @"
            <summary>
            Implements the effect of the Backspace key at the current cursor position
            </summary>
        ";

        public const string DateMask_method_System_String_GetCleanText__ = @"
            <summary>
            Return the Text without Placeholders. If CleanDelimiters is enabled, then also strip all
            undefined characters. For instance, for a mask ""0000 0000 0000 0000"" the space would be
            an undefined character (a delimiter) unless it were defined as a mask character in MaskChars.
            </summary>
        ";

        public const string DateMask_method_Void_Clear__ = @"
            <summary>
            Reset the mask as if the whole textfield was cleared
            </summary>
        ";

        public const string DateMask_method_Void_SetText_System_String_ = @"
            <summary>
            Overwrite the mask text from the outside without losing caret position
            </summary>
            <param name=""text""></param>
        ";

        public const string DateRange_method_System_String_ToIsoDateString__ = @"";

        public const string DateRange_method_Boolean_TryParse_System_String__MudBlazor_Converter_2_System_Nullable_1_System_DateTime__System_String___MudBlazor_DateRange_ByRef_ = @"";

        public const string DateRange_method_Boolean_TryParse_System_String__System_String__MudBlazor_Converter_2_System_Nullable_1_System_DateTime__System_String___MudBlazor_DateRange_ByRef_ = @"";

        public const string DateRange_method_Boolean_op_Equality_MudBlazor_DateRange__MudBlazor_DateRange_ = @"";

        public const string DateRange_method_Boolean_op_Inequality_MudBlazor_DateRange__MudBlazor_DateRange_ = @"";

        public const string DateTimeExtensions_method_System_String_ToIsoDateString_System_DateTime_ = @"";

        public const string DateTimeExtensions_method_System_String_ToIsoDateString_System_Nullable_1_System_DateTime__ = @"";

        public const string DateTimeExtensions_method_System_DateTime_StartOfMonth_System_DateTime__System_Globalization_CultureInfo_ = @"";

        public const string DateTimeExtensions_method_System_DateTime_EndOfMonth_System_DateTime__System_Globalization_CultureInfo_ = @"";

        public const string DateTimeExtensions_method_System_DateTime_StartOfWeek_System_DateTime__System_DayOfWeek_ = @"";

        public const string DefaultConverter_method_Boolean_IsNullableEnum_System_Type_ = @"";

        public const string DialogParameters_method_Void_Add_System_String__System_Object_ = @"";

        public const string DialogParameters_method_T_TryGet_T__System_String_ = @"";

        public const string DialogParameters_method_System_Collections_Generic_IEnumerator_1_System_Collections_Generic_KeyValuePair_2_System_String_System_Object___GetEnumerator__ = @"";

        public const string DialogReference_method_Void_Close__ = @"";

        public const string DialogReference_method_Void_Close_MudBlazor_DialogResult_ = @"";

        public const string DialogReference_method_Boolean_Dismiss_MudBlazor_DialogResult_ = @"";

        public const string DialogReference_method_Void_InjectDialog_System_Object_ = @"";

        public const string DialogReference_method_Void_InjectRenderFragment_Microsoft_AspNetCore_Components_RenderFragment_ = @"";

        public const string DialogReference_method_System_Threading_Tasks_Task_1_T__GetReturnValueAsync_T___ = @"";

        public const string DialogResult_method_MudBlazor_DialogResult_Ok_T__T_ = @"";

        public const string DialogResult_method_MudBlazor_DialogResult_Ok_T__T__System_Type_ = @"";

        public const string DialogResult_method_MudBlazor_DialogResult_Cancel__ = @"";

        public const string DialogService_method_Void_add_OnDialogInstanceAdded_System_Action_1_MudBlazor_IDialogReference__ = @"";

        public const string DialogService_method_Void_remove_OnDialogInstanceAdded_System_Action_1_MudBlazor_IDialogReference__ = @"";

        public const string DialogService_method_Void_add_OnDialogCloseRequested_System_Action_2_MudBlazor_IDialogReference_MudBlazor_DialogResult__ = @"";

        public const string DialogService_method_Void_remove_OnDialogCloseRequested_System_Action_2_MudBlazor_IDialogReference_MudBlazor_DialogResult__ = @"";

        public const string DialogService_method_MudBlazor_IDialogReference_Show_T___ = @"";

        public const string DialogService_method_MudBlazor_IDialogReference_Show_T__System_String_ = @"";

        public const string DialogService_method_MudBlazor_IDialogReference_Show_T__System_String__MudBlazor_DialogOptions_ = @"";

        public const string DialogService_method_MudBlazor_IDialogReference_Show_T__System_String__MudBlazor_DialogParameters_ = @"";

        public const string DialogService_method_MudBlazor_IDialogReference_Show_T__System_String__MudBlazor_DialogParameters__MudBlazor_DialogOptions_ = @"";

        public const string DialogService_method_MudBlazor_IDialogReference_Show_System_Type_ = @"";

        public const string DialogService_method_MudBlazor_IDialogReference_Show_System_Type__System_String_ = @"";

        public const string DialogService_method_MudBlazor_IDialogReference_Show_System_Type__System_String__MudBlazor_DialogOptions_ = @"";

        public const string DialogService_method_MudBlazor_IDialogReference_Show_System_Type__System_String__MudBlazor_DialogParameters_ = @"";

        public const string DialogService_method_MudBlazor_IDialogReference_Show_System_Type__System_String__MudBlazor_DialogParameters__MudBlazor_DialogOptions_ = @"";

        public const string DialogService_method_System_Threading_Tasks_Task_1_System_Nullable_1_System_Boolean___ShowMessageBox_System_String__System_String__System_String__System_String__System_String__MudBlazor_DialogOptions_ = @"";

        public const string DialogService_method_System_Threading_Tasks_Task_1_System_Nullable_1_System_Boolean___ShowMessageBox_System_String__Microsoft_AspNetCore_Components_MarkupString__System_String__System_String__System_String__MudBlazor_DialogOptions_ = @"";

        public const string DialogService_method_System_Threading_Tasks_Task_1_System_Nullable_1_System_Boolean___ShowMessageBox_MudBlazor_MessageBoxOptions__MudBlazor_DialogOptions_ = @"";

        public const string DialogService_method_Void_Close_MudBlazor_DialogReference_ = @"";

        public const string DialogService_method_Void_Close_MudBlazor_DialogReference__MudBlazor_DialogResult_ = @"";

        public const string DialogService_method_MudBlazor_IDialogReference_CreateReference__ = @"";

        public const string DialogService_DialogHelperComponent_method_Microsoft_AspNetCore_Components_RenderFragment_Wrap_Microsoft_AspNetCore_Components_RenderFragment_ = @"";

        public const string Donut_InputData = @"";

        public const string Donut_InputLabels = @"";

        public const string Donut_XAxisLabels = @"";

        public const string Donut_ChartSeries = @"";

        public const string Donut_ChartOptions = @"";

        public const string Donut_CustomGraphics = @"RenderFragment for costumization inside the chart's svg.";

        public const string Donut_ChartType = @"The Type of the chart.";

        public const string Donut_Width = @"The Width of the chart, end with % or px.";

        public const string Donut_Height = @"The Height of the chart, end with % or px.";

        public const string Donut_LegendPosition = @"The placement direction of the legend if used.";

        public const string Donut_SelectedIndex = @"Selected index of a portion of the chart.";

        public const string Donut_SelectedIndexChanged = @"Selected index of a portion of the chart.";

        public const string Donut_Class = @"User class names, separated by space.";

        public const string Donut_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string Donut_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string Donut_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string DoubleExtentions_method_System_String_ToInvariantString_Double_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_MudFocusFirstAsync_Microsoft_AspNetCore_Components_ElementReference__Int32__Int32_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_MudFocusLastAsync_Microsoft_AspNetCore_Components_ElementReference__Int32__Int32_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_MudSaveFocusAsync_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_MudRestoreFocusAsync_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_MudBlurAsync_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_MudSelectAsync_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_MudSelectRangeAsync_Microsoft_AspNetCore_Components_ElementReference__Int32__Int32_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_MudChangeCssAsync_Microsoft_AspNetCore_Components_ElementReference__System_String_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_1_MudBlazor_Interop_BoundingClientRect__MudGetBoundingClientRectAsync_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_1_MudBlazor_Interop_BoundingClientRect__MudGetClientRectFromParentAsync_Microsoft_AspNetCore_Components_ElementReference_ = @"
            <summary>
            Gets the client rect of the element 
            </summary>
        ";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_1_MudBlazor_Interop_BoundingClientRect__MudGetClientRectFromFirstChildAsync_Microsoft_AspNetCore_Components_ElementReference_ = @"
            <summary>
            Gets the client rect of the first child of the element.
            Useful when you want to know the dimensions of a render fragment and for that you wrap it into a div
            </summary>
        ";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_1_System_Boolean__MudHasFixedAncestorsAsync_Microsoft_AspNetCore_Components_ElementReference_ = @"
            <summary>
            Returns true if the element has an ancestor with style position == ""fixed""
            </summary>
            <param name=""elementReference""></param>
        ";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_MudChangeCssVariableAsync_Microsoft_AspNetCore_Components_ElementReference__System_String__Int32_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_1_System_Int32__MudAddEventListenerAsync_T__Microsoft_AspNetCore_Components_ElementReference__Microsoft_JSInterop_DotNetObjectReference_1_T___System_String__System_String__Boolean_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_MudRemoveEventListenerAsync_Microsoft_AspNetCore_Components_ElementReference__System_String__Int32_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_1_System_Int32__AddDefaultPreventingHandler_Microsoft_AspNetCore_Components_ElementReference__System_String_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_RemoveDefaultPreventingHandler_Microsoft_AspNetCore_Components_ElementReference__System_String__Int32_ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_1_System_Int32____AddDefaultPreventingHandlers_Microsoft_AspNetCore_Components_ElementReference__System_String___ = @"";

        public const string ElementReferenceExtensions_method_System_Threading_Tasks_ValueTask_RemoveDefaultPreventingHandlers_Microsoft_AspNetCore_Components_ElementReference__System_String____Int32___ = @"";

        public const string EndSlopeSpline_method_Void_CalcParameters_Double__Double_ = @"";

        public const string EndSlopeSpline_method_Void_Interpolate__ = @"";

        public const string EndSlopeSpline_method_Double_Integrate__ = @"";

        public const string EnumExtensions_method_System_String_ToDescriptionString_System_Enum_ = @"";

        public const string EventListener_method_System_Threading_Tasks_Task_OnEventOccur_System_Guid__System_String_ = @"";

        public const string EventListener_method_System_Threading_Tasks_Task_1_System_Guid__Subscribe_T__System_String__System_String__System_String__Int32__System_Func_2_System_Object_System_Threading_Tasks_Task__ = @"";

        public const string EventListener_method_System_Threading_Tasks_Task_1_System_Guid__SubscribeGlobal_T__System_String__Int32__System_Func_2_System_Object_System_Threading_Tasks_Task__ = @"";

        public const string EventListener_method_System_Threading_Tasks_Task_1_System_Boolean__Unsubscribe_System_Guid_ = @"";

        public const string EventListener_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string EventListener_method_Void_Dispose__ = @"";

        public const string EventListenerFactory_method_MudBlazor_IEventListener_Create__ = @"";

        public const string ExpressionExtensions_method_System_String_GetFullPathOfMember_T__System_Linq_Expressions_Expression_1_System_Func_1_T___ = @"";

        public const string ExpressionExtensions_method_System_String_GetLabelString_T__System_Linq_Expressions_Expression_1_System_Func_1_T___ = @"
            <summary>
            Returns the display name attribute of the provided field property as a string. If this attribute is missing, the member name will be returned.
            </summary>
        ";

        public const string FilterDefinition_method_System_Func_2_T_System_Boolean__GenerateFilterFunction__ = @"";

        public const string FilterDefinition_method_System_Linq_Expressions_Expression_1_System_Func_2_T_System_Boolean___GenerateFilterExpression__ = @"";

        public const string FilterHeaderCell_Column = @"";

        public const string FilterHeaderCell_ChildContent = @"";

        public const string FilterHeaderCell_Class = @"User class names, separated by space.";

        public const string FilterHeaderCell_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string FilterHeaderCell_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string FilterHeaderCell_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string FooterCell_Column = @"";

        public const string FooterCell_ChildContent = @"";

        public const string FooterCell_CurrentItems = @"";

        public const string FooterCell_Class = @"User class names, separated by space.";

        public const string FooterCell_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string FooterCell_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string FooterCell_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string GenericTypeMismatchException_method_System_Exception_GetBaseException__ = @"";

        public const string GenericTypeMismatchException_method_Void_GetObjectData_System_Runtime_Serialization_SerializationInfo__System_Runtime_Serialization_StreamingContext_ = @"";

        public const string HashSetExtensions_method_Boolean_IsEqualTo_T__System_Collections_Generic_HashSet_1_T___System_Collections_Generic_ICollection_1_T__ = @"";

        public const string HeaderCell_Column = @"";

        public const string HeaderCell_ChildContent = @"";

        public const string HeaderCell_SortDirection = @"";

        public const string HeaderCell_Class = @"User class names, separated by space.";

        public const string HeaderCell_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string HeaderCell_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string HeaderCell_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string HeaderCell_method_Void_Dispose__ = @"";

        public const string HierarchyColumn_ClosedIcon = @"";

        public const string HierarchyColumn_OpenIcon = @"";

        public const string HierarchyColumn_IconSize = @"";

        public const string HierarchyColumn_Class = @"User class names, separated by space.";

        public const string HierarchyColumn_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string HierarchyColumn_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string HierarchyColumn_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string IActivatable_method_Void_Activate_System_Object__Microsoft_AspNetCore_Components_Web_MouseEventArgs_ = @"";

        public const string IBreakpointService_method_System_Threading_Tasks_Task_1_System_Boolean__IsMediaSize_MudBlazor_Breakpoint_ = @"
            <summary>
            Check if the current breakpoint fits within the current window size
            </summary>
            <param name=""breakpoint""></param>
            <returns>True if the media size is meet, false otherwise. For instance if the current window size is sm and the breakpoint is SmAndSmaller, this method returns true</returns>
        ";

        public const string IBreakpointService_method_Boolean_IsMediaSize_MudBlazor_Breakpoint__MudBlazor_Breakpoint_ = @"
            <summary>
            Check if the current breakpoint fits within the reference size
            </summary>
            <param name=""breakpoint"">The breakpoint to check</param>
            <param name=""reference"">The reference breakpoint (xs,sm,md,lg,xl)</param>
            <returns>True if the media size is meet, false otherwise. For instance if the reference size is sm and the breakpoint is SmAndSmaller, this method returns true</returns>
        ";

        public const string IBreakpointService_method_System_Threading_Tasks_Task_1_MudBlazor_Breakpoint__GetBreakpoint__ = @"
            <summary>
            Get the current breakpoint
            </summary>
            <returns></returns>
        ";

        public const string IBreakpointService_method_System_Threading_Tasks_Task_1_MudBlazor_Services_BreakpointServiceSubscribeResult__Subscribe_System_Action_1_MudBlazor_Breakpoint__ = @"
            <summary>
            Subscribe to size changes of the browser window with default options
            </summary>
            <param name=""callback"">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <returns>Returning an object containing the current breakpoint and a subscription id, that should be used for unsubscribe</returns>
        ";

        public const string IBreakpointService_method_System_Threading_Tasks_Task_1_MudBlazor_Services_BreakpointServiceSubscribeResult__Subscribe_System_Action_1_MudBlazor_Breakpoint___MudBlazor_Services_ResizeOptions_ = @"
            <summary>
            Subscribe to size changes of the browser window using the provided options
            </summary>
            <param name=""callback"">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <param name=""options"">The options used to subscribe to changes</param>
            <returns>Returning an object containing the current breakpoint and a subscription id, that should be used for unsubscribe</returns>
        ";

        public const string IBreakpointService_method_System_Threading_Tasks_Task_1_System_Boolean__Unsubscribe_System_Guid_ = @"
            <summary>
            Used for cancel the subscription to the resize event.
            </summary>
            <param name=""subscriptionId"">The subscription id (return of subscribe) to cancel</param>
            <returns>True if the subscription could be cancel, false otherwise</returns>
        ";

        public const string IBrowserWindowSizeProvider_method_System_Threading_Tasks_ValueTask_1_MudBlazor_Services_BrowserWindowSize__GetBrowserWindowSize__ = @"";

        public const string IDialogReference_method_Void_Close__ = @"";

        public const string IDialogReference_method_Void_Close_MudBlazor_DialogResult_ = @"";

        public const string IDialogReference_method_Boolean_Dismiss_MudBlazor_DialogResult_ = @"";

        public const string IDialogReference_method_Void_InjectRenderFragment_Microsoft_AspNetCore_Components_RenderFragment_ = @"";

        public const string IDialogReference_method_Void_InjectDialog_System_Object_ = @"";

        public const string IDialogReference_method_System_Threading_Tasks_Task_1_T__GetReturnValueAsync_T___ = @"";

        public const string IDialogService_method_Void_add_OnDialogInstanceAdded_System_Action_1_MudBlazor_IDialogReference__ = @"";

        public const string IDialogService_method_Void_remove_OnDialogInstanceAdded_System_Action_1_MudBlazor_IDialogReference__ = @"";

        public const string IDialogService_method_Void_add_OnDialogCloseRequested_System_Action_2_MudBlazor_IDialogReference_MudBlazor_DialogResult__ = @"";

        public const string IDialogService_method_Void_remove_OnDialogCloseRequested_System_Action_2_MudBlazor_IDialogReference_MudBlazor_DialogResult__ = @"";

        public const string IDialogService_method_MudBlazor_IDialogReference_Show_TComponent___ = @"";

        public const string IDialogService_method_MudBlazor_IDialogReference_Show_TComponent__System_String_ = @"";

        public const string IDialogService_method_MudBlazor_IDialogReference_Show_TComponent__System_String__MudBlazor_DialogOptions_ = @"";

        public const string IDialogService_method_MudBlazor_IDialogReference_Show_TComponent__System_String__MudBlazor_DialogParameters_ = @"";

        public const string IDialogService_method_MudBlazor_IDialogReference_Show_TComponent__System_String__MudBlazor_DialogParameters__MudBlazor_DialogOptions_ = @"";

        public const string IDialogService_method_MudBlazor_IDialogReference_Show_System_Type_ = @"";

        public const string IDialogService_method_MudBlazor_IDialogReference_Show_System_Type__System_String_ = @"";

        public const string IDialogService_method_MudBlazor_IDialogReference_Show_System_Type__System_String__MudBlazor_DialogOptions_ = @"";

        public const string IDialogService_method_MudBlazor_IDialogReference_Show_System_Type__System_String__MudBlazor_DialogParameters_ = @"";

        public const string IDialogService_method_MudBlazor_IDialogReference_Show_System_Type__System_String__MudBlazor_DialogParameters__MudBlazor_DialogOptions_ = @"";

        public const string IDialogService_method_MudBlazor_IDialogReference_CreateReference__ = @"";

        public const string IDialogService_method_System_Threading_Tasks_Task_1_System_Nullable_1_System_Boolean___ShowMessageBox_System_String__System_String__System_String__System_String__System_String__MudBlazor_DialogOptions_ = @"";

        public const string IDialogService_method_System_Threading_Tasks_Task_1_System_Nullable_1_System_Boolean___ShowMessageBox_System_String__Microsoft_AspNetCore_Components_MarkupString__System_String__System_String__System_String__MudBlazor_DialogOptions_ = @"";

        public const string IDialogService_method_System_Threading_Tasks_Task_1_System_Nullable_1_System_Boolean___ShowMessageBox_MudBlazor_MessageBoxOptions__MudBlazor_DialogOptions_ = @"";

        public const string IDialogService_method_Void_Close_MudBlazor_DialogReference_ = @"";

        public const string IDialogService_method_Void_Close_MudBlazor_DialogReference__MudBlazor_DialogResult_ = @"";

        public const string IEventListener_method_System_Threading_Tasks_Task_1_System_Guid__Subscribe_T__System_String__System_String__System_String__Int32__System_Func_2_System_Object_System_Threading_Tasks_Task__ = @"
            <summary>
            Listing to a javascript event
            </summary>
            <typeparam name=""T"">The type of the event args for instance MouseEventArgs for mousemove</typeparam>
            <param name=""eventName"">Name of the DOM event without ""on""</param>
            <param name=""elementId"">The value of the id field of the DOM element</param>
            <param name=""projectionName"">The name of a JS function (relative to window) that used to project the event before it is send back to .NET. Can be null, if no projection is needed </param>
            <param name=""throotleInterval"">The delay between the last time the event occurred and the callback is fired. Set to zero, if no delay is requested</param>
            <param name=""callback"">The method that is invoked, if the DOM element is fired. Object will be of type T</param>
            <returns>A unique identifier for the event subscription. Should be used to cancel the subscription</returns>
        ";

        public const string IEventListener_method_System_Threading_Tasks_Task_1_System_Guid__SubscribeGlobal_T__System_String__Int32__System_Func_2_System_Object_System_Threading_Tasks_Task__ = @"
            <summary>
            Listing to a javascript event on the document itself
            </summary>
            <typeparam name=""T"">The type of the event args for instance MouseEventArgs for mousemove</typeparam>
            <param name=""eventName"">Name of the DOM event without ""on""</param>
            <param name=""throotleInterval"">The delay between the last time the event occurred and the callback is fired. Set to zero, if no delay is requested</param>
            <param name=""callback"">The method that is invoked, if the DOM element is fired. Object will be of type T</param>
            <returns>A unique identifier for the event subscription. Should be used to cancel the subscription</returns>
        ";

        public const string IEventListener_method_System_Threading_Tasks_Task_1_System_Boolean__Unsubscribe_System_Guid_ = @"
            <summary>
            Cancel (unsubscribe) the listening to a DOM event, previous connected by Subscribe
            </summary>
            <param name=""key"">The unique event identifier</param>
            <returns>true for if the event listener was detached, false if not</returns>
        ";

        public const string IEventListenerFactory_method_MudBlazor_IEventListener_Create__ = @"";

        public const string IForm_method_Void_FieldChanged_MudBlazor_Interfaces_IFormComponent__System_Object_ = @"";

        public const string IFormComponent_method_System_Threading_Tasks_Task_Validate__ = @"";

        public const string IFormComponent_method_Void_Reset__ = @"";

        public const string IFormComponent_method_Void_ResetValidation__ = @"";

        public const string IIJSRuntimeExtentions_method_System_Threading_Tasks_ValueTask_1_System_Boolean__InvokeVoidAsyncWithErrorHandling_Microsoft_JSInterop_IJSRuntime__System_String__System_Object___ = @"
            <summary>
            Invokes the specified JavaScript function asynchronously and catches JSException, JSDisconnectedException and TaskCanceledException
            </summary>
            <param name=""jsRuntime"">The <see cref=""T:Microsoft.JSInterop.IJSRuntime"" />.</param>
            <param name=""identifier"">An identifier for the function to invoke. For example, the value <c>""someScope.someFunction""</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name=""args"">JSON-serializable arguments.</param>
            <returns>A <see cref=""T:System.Threading.Tasks.ValueTask"" /> that represents the asynchronous invocation operation and resolves to true in case no exception has occured ohterwise false.</returns>
        ";

        public const string IIJSRuntimeExtentions_method_System_Threading_Tasks_ValueTask_1_System_ValueTuple_2_System_Boolean_TValue___InvokeAsyncWithErrorHandling_TValue__Microsoft_JSInterop_IJSRuntime__System_String__System_Object___ = @"
            <summary>
            Invokes the specified JavaScript function asynchronously and catches JSException, JSDisconnectedException and TaskCanceledException. In case an exception occured the default value of <typeparamref name=""TValue"" /> is returned
            </summary>
            <typeparam name=""TValue"">The JSON-serializable return type.</typeparam>
            <param name=""jsRuntime"">The <see cref=""T:Microsoft.JSInterop.IJSRuntime"" />.</param>
            <param name=""identifier"">An identifier for the function to invoke. For example, the value <c>""someScope.someFunction""</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name=""args"">JSON-serializable arguments.</param>
            <returns>An instance of <typeparamref name=""TValue"" /> obtained by JSON-deserializing the return value into a tuple. The first item (sucess) is true in case where there was no exception, otherwise fall.</returns>
        ";

        public const string IIJSRuntimeExtentions_method_System_Threading_Tasks_ValueTask_1_System_ValueTuple_2_System_Boolean_TValue___InvokeAsyncWithErrorHandling_TValue__Microsoft_JSInterop_IJSRuntime__TValue__System_String__System_Object___ = @"
            <summary>
            Invokes the specified JavaScript function asynchronously and catches JSException, JSDisconnectedException and TaskCanceledException
            </summary>
            <typeparam name=""TValue"">The JSON-serializable return type.</typeparam>
            <param name=""jsRuntime"">The <see cref=""T:Microsoft.JSInterop.IJSRuntime"" />.</param>
            <param name=""fallbackValue"">The value that should be returned in case an exception occured</param>
            <param name=""identifier"">An identifier for the function to invoke. For example, the value <c>""someScope.someFunction""</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name=""args"">JSON-serializable arguments.</param>
            <returns>An instance of <typeparamref name=""TValue"" /> obtained by JSON-deserializing the return value into a tuple. The first item (sucess) is true in case where there was no exception, otherwise fall.</returns>
        ";

        public const string IJsApiService_method_System_Threading_Tasks_ValueTask_CopyToClipboardAsync_System_String_ = @"";

        public const string IJsApiService_method_System_Threading_Tasks_ValueTask_OpenInNewTabAsync_System_String_ = @"";

        public const string IJsApiService_method_System_Threading_Tasks_ValueTask_Open_System_String__System_String_ = @"";

        public const string IJsEvent_method_System_Threading_Tasks_Task_Connect_System_String__MudBlazor_Services_JsEventOptions_ = @"";

        public const string IJsEvent_method_System_Threading_Tasks_Task_Disconnect__ = @"";

        public const string IJsEvent_method_Void_add_CaretPositionChanged_System_Action_1_System_Int32__ = @"";

        public const string IJsEvent_method_Void_remove_CaretPositionChanged_System_Action_1_System_Int32__ = @"";

        public const string IJsEvent_method_Void_add_Paste_System_Action_1_System_String__ = @"";

        public const string IJsEvent_method_Void_remove_Paste_System_Action_1_System_String__ = @"";

        public const string IJsEvent_method_Void_add_Select_System_Action_2_System_Int32_System_Int32__ = @"";

        public const string IJsEvent_method_Void_remove_Select_System_Action_2_System_Int32_System_Int32__ = @"";

        public const string IJsEventFactory_method_MudBlazor_Services_IJsEvent_Create__ = @"";

        public const string IKeyInterceptor_method_System_Threading_Tasks_Task_Connect_System_String__MudBlazor_Services_KeyInterceptorOptions_ = @"";

        public const string IKeyInterceptor_method_System_Threading_Tasks_Task_Disconnect__ = @"";

        public const string IKeyInterceptor_method_System_Threading_Tasks_Task_UpdateKey_MudBlazor_Services_KeyOptions_ = @"";

        public const string IKeyInterceptor_method_Void_add_KeyDown_MudBlazor_Services_KeyboardEvent_ = @"";

        public const string IKeyInterceptor_method_Void_remove_KeyDown_MudBlazor_Services_KeyboardEvent_ = @"";

        public const string IKeyInterceptor_method_Void_add_KeyUp_MudBlazor_Services_KeyboardEvent_ = @"";

        public const string IKeyInterceptor_method_Void_remove_KeyUp_MudBlazor_Services_KeyboardEvent_ = @"";

        public const string IKeyInterceptorFactory_method_MudBlazor_Services_IKeyInterceptor_Create__ = @"";

        public const string IMask_method_System_String_GetCleanText__ = @"
            <summary>
            Get the Text without delimiters or placeholders. Depends on the implementation entirely.
            Clean text will usually be used for the Value property of a mask field. 
            </summary>
        ";

        public const string IMask_method_Void_Insert_System_String_ = @"
            <summary>
            Implements user input at the current caret position (single key strokes or pasting longer text)
            </summary>
            <param name=""input""></param>
        ";

        public const string IMask_method_Void_Delete__ = @"
            <summary>
            Implements the effect of the Del key at the current cursor position
            </summary>
        ";

        public const string IMask_method_Void_Backspace__ = @"
            <summary>
            Implements the effect of the Backspace key at the current cursor position
            </summary>
        ";

        public const string IMask_method_Void_Clear__ = @"
            <summary>
            Reset the mask as if the whole textfield was cleared
            </summary>
        ";

        public const string IMask_method_Void_SetText_System_String_ = @"
            <summary>
            Overwrite the mask text without losing caret position
            </summary>
            <param name=""text""></param>
        ";

        public const string IMask_method_Void_UpdateFrom_MudBlazor_IMask_ = @"
            <summary>
            Copy config from other mask but preserve own state.
            </summary>
            <param name=""other""></param>
        ";

        public const string IMudPopoverService_method_MudBlazor_MudPopoverHandler_Register_Microsoft_AspNetCore_Components_RenderFragment_ = @"";

        public const string IMudPopoverService_method_System_Threading_Tasks_Task_1_System_Boolean__Unregister_MudBlazor_MudPopoverHandler_ = @"";

        public const string IMudPopoverService_method_System_Threading_Tasks_ValueTask_1_System_Int32__CountProviders__ = @"";

        public const string IMudPopoverService_method_System_Threading_Tasks_Task_InitializeIfNeeded__ = @"";

        public const string IMudPopoverService_method_Void_add_FragmentsChanged_System_EventHandler_ = @"";

        public const string IMudPopoverService_method_Void_remove_FragmentsChanged_System_EventHandler_ = @"";

        public const string IMudRadioGroup_method_Void_CheckGenericTypeMatch_System_Object_ = @"";

        public const string IMudSelect_method_Void_CheckGenericTypeMatch_System_Object_ = @"";

        public const string INavigationEventReceiver_method_System_Threading_Tasks_Task_OnNavigation__ = @"";

        public const string IResizeListenerService_method_Void_add_OnResized_System_EventHandler_1_MudBlazor_Services_BrowserWindowSize__ = @"";

        public const string IResizeListenerService_method_Void_remove_OnResized_System_EventHandler_1_MudBlazor_Services_BrowserWindowSize__ = @"";

        public const string IResizeListenerService_method_Void_add_OnBreakpointChanged_System_EventHandler_1_MudBlazor_Breakpoint__ = @"";

        public const string IResizeListenerService_method_Void_remove_OnBreakpointChanged_System_EventHandler_1_MudBlazor_Breakpoint__ = @"";

        public const string IResizeListenerService_method_System_Threading_Tasks_ValueTask_1_MudBlazor_Services_BrowserWindowSize__GetBrowserWindowSize__ = @"";

        public const string IResizeListenerService_method_System_Threading_Tasks_Task_1_System_Boolean__IsMediaSize_MudBlazor_Breakpoint_ = @"";

        public const string IResizeListenerService_method_Boolean_IsMediaSize_MudBlazor_Breakpoint__MudBlazor_Breakpoint_ = @"";

        public const string IResizeListenerService_method_System_Threading_Tasks_Task_1_MudBlazor_Breakpoint__GetBreakpoint__ = @"";

        public const string IResizeObserver_method_System_Threading_Tasks_Task_1_MudBlazor_Interop_BoundingClientRect__Observe_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string IResizeObserver_method_System_Threading_Tasks_Task_1_System_Collections_Generic_IEnumerable_1_MudBlazor_Interop_BoundingClientRect___Observe_System_Collections_Generic_IEnumerable_1_Microsoft_AspNetCore_Components_ElementReference__ = @"";

        public const string IResizeObserver_method_System_Threading_Tasks_Task_Unobserve_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string IResizeObserver_method_Double_GetWidth_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string IResizeObserver_method_Double_GetHeight_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string IResizeObserver_method_MudBlazor_Interop_BoundingClientRect_GetSizeInfo_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string IResizeObserver_method_Void_add_OnResized_MudBlazor_Services_SizeChanged_ = @"";

        public const string IResizeObserver_method_Void_remove_OnResized_MudBlazor_Services_SizeChanged_ = @"";

        public const string IResizeObserver_method_Boolean_IsElementObserved_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string IResizeObserverFactory_method_MudBlazor_Services_IResizeObserver_Create_MudBlazor_Services_ResizeObserverOptions_ = @"";

        public const string IResizeObserverFactory_method_MudBlazor_Services_IResizeObserver_Create__ = @"";

        public const string IResizeService_method_System_Threading_Tasks_ValueTask_1_MudBlazor_Services_BrowserWindowSize__GetBrowserWindowSize__ = @"
            <summary>
            Get the current size of the window
            </summary>
            <returns>A task representing the current browser size</returns>
        ";

        public const string IResizeService_method_System_Threading_Tasks_Task_1_System_Guid__Subscribe_System_Action_1_MudBlazor_Services_BrowserWindowSize__ = @"
            <summary>
            Subscribe to size changes of the browser window. Default ResizeOptions will be used
            </summary>
            <param name=""callback"">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <returns>The subscription id. This id is needed for unscribe </returns>
        ";

        public const string IResizeService_method_System_Threading_Tasks_Task_1_System_Guid__Subscribe_System_Action_1_MudBlazor_Services_BrowserWindowSize___MudBlazor_Services_ResizeOptions_ = @"
            <summary>
            Subscribe to size changes of the browser window using the provided options
            </summary>
            <param name=""callback"">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <param name=""options"">The options used to subscribe to changes</param>
            <returns>The subscription id. This id is needed for unscribe</returns>
        ";

        public const string IResizeService_method_System_Threading_Tasks_Task_1_System_Boolean__Unsubscribe_System_Guid_ = @"
            <summary>
            Used for cancel the subscription to the resize event.
            </summary>
            <param name=""subscriptionId"">The subscription id (return of subscribe) to cancel</param>
            <returns>True if the subscription could be cancel, false otherwise</returns>
        ";

        public const string IScrollListener_method_Void_add_OnScroll_System_EventHandler_1_MudBlazor_ScrollEventArgs__ = @"";

        public const string IScrollListener_method_Void_remove_OnScroll_System_EventHandler_1_MudBlazor_ScrollEventArgs__ = @"";

        public const string IScrollListenerFactory_method_MudBlazor_IScrollListener_Create_System_String_ = @"";

        public const string IScrollManager_method_System_Threading_Tasks_Task_ScrollTo_Int32__Int32__MudBlazor_ScrollBehavior_ = @"";

        public const string IScrollManager_method_System_Threading_Tasks_Task_ScrollToFragment_System_String__MudBlazor_ScrollBehavior_ = @"";

        public const string IScrollManager_method_System_Threading_Tasks_Task_ScrollToTop_MudBlazor_ScrollBehavior_ = @"";

        public const string IScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToAsync_System_String__Int32__Int32__MudBlazor_ScrollBehavior_ = @"";

        public const string IScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToFragmentAsync_System_String__MudBlazor_ScrollBehavior_ = @"";

        public const string IScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToTopAsync_System_String__MudBlazor_ScrollBehavior_ = @"";

        public const string IScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToYearAsync_System_String_ = @"";

        public const string IScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToListItemAsync_System_String_ = @"";

        public const string IScrollManager_method_System_Threading_Tasks_ValueTask_LockScrollAsync_System_String__System_String_ = @"";

        public const string IScrollManager_method_System_Threading_Tasks_ValueTask_UnlockScrollAsync_System_String__System_String_ = @"";

        public const string IScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToBottomAsync_System_String__MudBlazor_ScrollBehavior_ = @"";

        public const string IScrollSpy_method_System_Threading_Tasks_Task_StartSpying_System_String_ = @"
            <summary>
            Start spying for scroll events for elements with the specified classes
            </summary>
            <param name=""elementsSelector"">the class name (without .) to identify the containers to spy on</param>
            <returns></returns>
        ";

        public const string IScrollSpy_method_System_Threading_Tasks_Task_ScrollToSection_System_String_ = @"
            <summary>
            Center the viewport to DOM element with the given Id 
            </summary>
            <param name=""id"">The Id of the DOM element, that should be centered</param>
            <returns></returns>
        ";

        public const string IScrollSpy_method_System_Threading_Tasks_Task_ScrollToSection_System_Uri_ = @"
            <summary>
            Center the viewport to the DOM element represented by the fragment inside the uri
            </summary>
            <param name=""uri"">The uri which contains the fragment. If no fragment it scrolls to the top of the page</param>
            <returns></returns>
        ";

        public const string IScrollSpy_method_Void_add_ScrollSectionSectionCentered_System_EventHandler_1_MudBlazor_ScrollSectionCenteredEventArgs__ = @"";

        public const string IScrollSpy_method_Void_remove_ScrollSectionSectionCentered_System_EventHandler_1_MudBlazor_ScrollSectionCenteredEventArgs__ = @"";

        public const string IScrollSpy_method_System_Threading_Tasks_Task_SetSectionAsActive_System_String_ = @"
            <summary>
            Does the same as ScrollToSection but without the scrolling. This can be used to initially set an value
            </summary>
            <param name=""id""></param>
            <returns></returns>
        ";

        public const string IScrollSpyFactory_method_MudBlazor_IScrollSpy_Create__ = @"";

        public const string ISnackbar_method_Void_add_OnSnackbarsUpdated_System_Action_ = @"";

        public const string ISnackbar_method_Void_remove_OnSnackbarsUpdated_System_Action_ = @"";

        public const string ISnackbar_method_MudBlazor_Snackbar_Add_System_String__MudBlazor_Severity__System_Action_1_MudBlazor_SnackbarOptions___System_String_ = @"";

        public const string ISnackbar_method_MudBlazor_Snackbar_Add_Microsoft_AspNetCore_Components_RenderFragment__MudBlazor_Severity__System_Action_1_MudBlazor_SnackbarOptions___System_String_ = @"";

        public const string ISnackbar_method_MudBlazor_Snackbar_Add_T__System_Collections_Generic_Dictionary_2_System_String_System_Object___MudBlazor_Severity__System_Action_1_MudBlazor_SnackbarOptions___System_String_ = @"";

        public const string ISnackbar_method_MudBlazor_Snackbar_AddNew_MudBlazor_Severity__System_String__System_Action_1_MudBlazor_SnackbarOptions__ = @"";

        public const string ISnackbar_method_Void_Clear__ = @"";

        public const string ISnackbar_method_Void_Remove_MudBlazor_Snackbar_ = @"";

        public const string JsApiService_method_System_Threading_Tasks_ValueTask_CopyToClipboardAsync_System_String_ = @"";

        public const string JsApiService_method_System_Threading_Tasks_ValueTask_Open_System_String__System_String_ = @"";

        public const string JsApiService_method_System_Threading_Tasks_ValueTask_OpenInNewTabAsync_System_String_ = @"";

        public const string JsEvent_method_System_Threading_Tasks_Task_Connect_System_String__MudBlazor_Services_JsEventOptions_ = @"
            <summary>
            Connect to the ancestor element of the element(s) that should be observed
            </summary>
            <param name=""elementId"">Ancestor html element id</param>
            <param name=""options"">Define here the descendant(s) by setting TargetClass and the keystrokes to be monitored</param>
        ";

        public const string JsEvent_method_System_Threading_Tasks_Task_Disconnect__ = @"
            <summary>
            Disconnect from the previously connected ancestor and its descendants
            </summary>
        ";

        public const string JsEvent_method_Void_add_CaretPositionChanged_System_Action_1_System_Int32__ = @"";

        public const string JsEvent_method_Void_remove_CaretPositionChanged_System_Action_1_System_Int32__ = @"";

        public const string JsEvent_method_Void_OnCaretPositionChanged_Int32_ = @"
            <summary>
            To be invoked only by JS
            </summary>
        ";

        public const string JsEvent_method_Void_add_Paste_System_Action_1_System_String__ = @"";

        public const string JsEvent_method_Void_remove_Paste_System_Action_1_System_String__ = @"";

        public const string JsEvent_method_Void_OnPaste_System_String_ = @"
            <summary>
            To be invoked only by JS
            </summary>
        ";

        public const string JsEvent_method_Void_add_Select_System_Action_2_System_Int32_System_Int32__ = @"";

        public const string JsEvent_method_Void_remove_Select_System_Action_2_System_Int32_System_Int32__ = @"";

        public const string JsEvent_method_Void_OnSelect_Int32__Int32_ = @"
            <summary>
            To be invoked only by JS
            </summary>
        ";

        public const string JsEvent_method_Void_Dispose__ = @"";

        public const string JsEventFactory_method_MudBlazor_Services_IJsEvent_Create__ = @"";

        public const string KeepInRangeExtensions_method_Double_EnsureRange_Double__Double_ = @"";

        public const string KeepInRangeExtensions_method_Double_EnsureRange_Double__Double__Double_ = @"";

        public const string KeepInRangeExtensions_method_Byte_EnsureRange_Byte__Byte_ = @"";

        public const string KeepInRangeExtensions_method_Byte_EnsureRange_Byte__Byte__Byte_ = @"";

        public const string KeepInRangeExtensions_method_Byte_EnsureRangeToByte_Int32_ = @"";

        public const string KeepInRangeExtensions_method_Int32_EnsureRange_Int32__Int32_ = @"";

        public const string KeepInRangeExtensions_method_Int32_EnsureRange_Int32__Int32__Int32_ = @"";

        public const string KeyboardEvent_method_Void_Invoke_Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_ = @"";

        public const string KeyboardEvent_method_System_IAsyncResult_BeginInvoke_Microsoft_AspNetCore_Components_Web_KeyboardEventArgs__System_AsyncCallback__System_Object_ = @"";

        public const string KeyboardEvent_method_Void_EndInvoke_System_IAsyncResult_ = @"";

        public const string KeyboardEvent_method_Void_GetObjectData_System_Runtime_Serialization_SerializationInfo__System_Runtime_Serialization_StreamingContext_ = @"";

        public const string KeyboardEvent_method_System_Delegate___GetInvocationList__ = @"";

        public const string KeyboardEvent_method_Boolean_op_Equality_System_MulticastDelegate__System_MulticastDelegate_ = @"";

        public const string KeyboardEvent_method_Boolean_op_Inequality_System_MulticastDelegate__System_MulticastDelegate_ = @"";

        public const string KeyboardEvent_method_System_Delegate_CreateDelegate_System_Type__System_Object__System_String__Boolean__Boolean_ = @"";

        public const string KeyboardEvent_method_System_Delegate_CreateDelegate_System_Type__System_Type__System_String__Boolean__Boolean_ = @"";

        public const string KeyboardEvent_method_System_Delegate_CreateDelegate_System_Type__System_Reflection_MethodInfo__Boolean_ = @"";

        public const string KeyboardEvent_method_System_Delegate_CreateDelegate_System_Type__System_Object__System_Reflection_MethodInfo__Boolean_ = @"";

        public const string KeyboardEvent_method_System_Object_Clone__ = @"";

        public const string KeyboardEvent_method_System_Delegate_Combine_System_Delegate__System_Delegate_ = @"";

        public const string KeyboardEvent_method_System_Delegate_Combine_System_Delegate___ = @"";

        public const string KeyboardEvent_method_System_Delegate_CreateDelegate_System_Type__System_Object__System_Reflection_MethodInfo_ = @"";

        public const string KeyboardEvent_method_System_Delegate_CreateDelegate_System_Type__System_Reflection_MethodInfo_ = @"";

        public const string KeyboardEvent_method_System_Delegate_CreateDelegate_System_Type__System_Object__System_String_ = @"";

        public const string KeyboardEvent_method_System_Delegate_CreateDelegate_System_Type__System_Object__System_String__Boolean_ = @"";

        public const string KeyboardEvent_method_System_Delegate_CreateDelegate_System_Type__System_Type__System_String_ = @"";

        public const string KeyboardEvent_method_System_Delegate_CreateDelegate_System_Type__System_Type__System_String__Boolean_ = @"";

        public const string KeyboardEvent_method_System_Object_DynamicInvoke_System_Object___ = @"";

        public const string KeyboardEvent_method_System_Delegate_Remove_System_Delegate__System_Delegate_ = @"";

        public const string KeyboardEvent_method_System_Delegate_RemoveAll_System_Delegate__System_Delegate_ = @"";

        public const string KeyboardEvent_method_Boolean_op_Equality_System_Delegate__System_Delegate_ = @"";

        public const string KeyboardEvent_method_Boolean_op_Inequality_System_Delegate__System_Delegate_ = @"";

        public const string KeyInterceptor_method_System_Threading_Tasks_Task_Connect_System_String__MudBlazor_Services_KeyInterceptorOptions_ = @"
            <summary>
            Connect to the ancestor element of the element(s) that should be observed
            </summary>
            <param name=""elementId"">Ancestor html element id</param>
            <param name=""options"">Define here the descendant(s) by setting TargetClass and the keystrokes to be monitored / suppressed</param>
        ";

        public const string KeyInterceptor_method_System_Threading_Tasks_Task_UpdateKey_MudBlazor_Services_KeyOptions_ = @"
            <summary>
            Update behavior of a registered keyoption
            The keystrike to update has to be monitored previously
            </summary>
            <param name=""option"">Define KeyOption to update</param>
        ";

        public const string KeyInterceptor_method_System_Threading_Tasks_Task_Disconnect__ = @"
            <summary>
            Disconnect from the previously connected ancestor and its descendants
            </summary>
        ";

        public const string KeyInterceptor_method_Void_OnKeyDown_Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_ = @"";

        public const string KeyInterceptor_method_Void_OnKeyUp_Microsoft_AspNetCore_Components_Web_KeyboardEventArgs_ = @"";

        public const string KeyInterceptor_method_Void_add_KeyDown_MudBlazor_Services_KeyboardEvent_ = @"";

        public const string KeyInterceptor_method_Void_remove_KeyDown_MudBlazor_Services_KeyboardEvent_ = @"";

        public const string KeyInterceptor_method_Void_add_KeyUp_MudBlazor_Services_KeyboardEvent_ = @"";

        public const string KeyInterceptor_method_Void_remove_KeyUp_MudBlazor_Services_KeyboardEvent_ = @"";

        public const string KeyInterceptor_method_Void_Dispose__ = @"";

        public const string KeyInterceptorFactory_method_MudBlazor_Services_IKeyInterceptor_Create__ = @"";

        public const string Legend_Data = @"";

        public const string Legend_InputData = @"";

        public const string Legend_InputLabels = @"";

        public const string Legend_XAxisLabels = @"";

        public const string Legend_ChartSeries = @"";

        public const string Legend_ChartOptions = @"";

        public const string Legend_CustomGraphics = @"RenderFragment for costumization inside the chart's svg.";

        public const string Legend_ChartType = @"The Type of the chart.";

        public const string Legend_Width = @"The Width of the chart, end with % or px.";

        public const string Legend_Height = @"The Height of the chart, end with % or px.";

        public const string Legend_LegendPosition = @"The placement direction of the legend if used.";

        public const string Legend_SelectedIndex = @"Selected index of a portion of the chart.";

        public const string Legend_SelectedIndexChanged = @"Selected index of a portion of the chart.";

        public const string Legend_Class = @"User class names, separated by space.";

        public const string Legend_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string Legend_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string Legend_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string Line_InputData = @"";

        public const string Line_InputLabels = @"";

        public const string Line_XAxisLabels = @"";

        public const string Line_ChartSeries = @"";

        public const string Line_ChartOptions = @"";

        public const string Line_CustomGraphics = @"RenderFragment for costumization inside the chart's svg.";

        public const string Line_ChartType = @"The Type of the chart.";

        public const string Line_Width = @"The Width of the chart, end with % or px.";

        public const string Line_Height = @"The Height of the chart, end with % or px.";

        public const string Line_LegendPosition = @"The placement direction of the legend if used.";

        public const string Line_SelectedIndex = @"Selected index of a portion of the chart.";

        public const string Line_SelectedIndexChanged = @"Selected index of a portion of the chart.";

        public const string Line_Class = @"User class names, separated by space.";

        public const string Line_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string Line_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string Line_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MaskChar_method_MudBlazor_MaskChar_Letter_Char_ = @"";

        public const string MaskChar_method_MudBlazor_MaskChar_Digit_Char_ = @"";

        public const string MaskChar_method_MudBlazor_MaskChar_LetterOrDigit_Char_ = @"";

        public const string MaskOption_method_Boolean_op_Inequality_MudBlazor_MaskOption__MudBlazor_MaskOption_ = @"";

        public const string MaskOption_method_Boolean_op_Equality_MudBlazor_MaskOption__MudBlazor_MaskOption_ = @"";

        public const string MaskOption_method_Void_Deconstruct_System_String_ByRef__System_String_ByRef__System_String_ByRef_ = @"";

        public const string MathExtensions_method_Double_Map_Double__Double__Double__Double__Double_ = @"";

        public const string MatrixSolver_method_Boolean_Eliminate__ = @"";

        public const string MatrixSolver_method_Void_Solve__ = @"";

        public const string MudAlert_ContentAlignment = @"Sets the position of the text to the start (Left in LTR and right in RTL).";

        public const string MudAlert_AlertTextPosition = @"Sets the position of the text to the start (Left in LTR and right in RTL).";

        public const string MudAlert_CloseIconClicked = @"The callback, when the close button has been clicked.";

        public const string MudAlert_CloseIcon = @"Define the icon used for the close button.";

        public const string MudAlert_ShowCloseIcon = @"Sets if the alert shows a close icon.";

        public const string MudAlert_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

        public const string MudAlert_Square = @"If true, rounded corners are disabled.";

        public const string MudAlert_Dense = @"If true, compact padding will be used.";

        public const string MudAlert_NoIcon = @"If true, no alert icon will be used.";

        public const string MudAlert_Severity = @"The severity of the alert. This defines the color and icon used.";

        public const string MudAlert_Variant = @"The variant to use.";

        public const string MudAlert_ChildContent = @"Child content of the component.";

        public const string MudAlert_Icon = @"Custom icon, leave unset to use the standard icon which depends on the Severity";

        public const string MudAlert_OnClick = @"Raised when the alert is clicked";

        public const string MudAlert_Class = @"User class names, separated by space.";

        public const string MudAlert_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudAlert_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudAlert_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudAppBar_Bottom = @"If true, Appbar will be placed at the bottom of the screen.";

        public const string MudAppBar_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

        public const string MudAppBar_Dense = @"If true, compact padding will be used.";

        public const string MudAppBar_DisableGutters = @"If true, the left and right padding is removed from from the appbar.";

        public const string MudAppBar_Color = @"The color of the component. It supports the theme colors.";

        public const string MudAppBar_Fixed = @"If true, appbar will be Fixed.";

        public const string MudAppBar_ToolBarClass = @"User class names, separated by spaces for the nested toolbar.";

        public const string MudAppBar_ChildContent = @"Child content of the component.";

        public const string MudAppBar_Class = @"User class names, separated by space.";

        public const string MudAppBar_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudAppBar_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudAppBar_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudAutocomplete_PopoverClass = @"User class names for the popover, separated by space";

        public const string MudAutocomplete_AnchorOrigin = @"Set the anchor origin point to determen where the popover will open from.";

        public const string MudAutocomplete_TransformOrigin = @"Sets the transform origin point for the popover.";

        public const string MudAutocomplete_Direction = @"Set the anchor origin point to determen where the popover will open from.";

        public const string MudAutocomplete_OffsetX = @"If true, the Autocomplete menu will open either before or after the input (left/right).";

        public const string MudAutocomplete_OffsetY = @"If true, the Autocomplete menu will open either before or after the input (top/bottom).";

        public const string MudAutocomplete_Dense = @"If true, compact vertical padding will be applied to all Autocomplete items.";

        public const string MudAutocomplete_OpenIcon = @"The Open Autocomplete Icon";

        public const string MudAutocomplete_CloseIcon = @"The Close Autocomplete Icon";

        public const string MudAutocomplete_MaxHeight = @"The maximum height of the Autocomplete when it is open.";

        public const string MudAutocomplete_ToStringFunc = @"Defines how values are displayed in the drop-down list";

        public const string MudAutocomplete_ShowProgressIndicator = @"Whether to show the progress indicator.";

        public const string MudAutocomplete_ProgressIndicatorColor = @"The color of the progress indicator.";

        public const string MudAutocomplete_SearchFuncWithCancel = @"Func that returns a list of items matching the typed text. Provides a cancellation token that
            is marked as cancelled when the user changes the search text or selects a value from the list. 
            This can be used to cancel expensive asynchronous work occuring within the SearchFunc itself.";

        public const string MudAutocomplete_SearchFunc = @"The SearchFunc returns a list of items matching the typed text";

        public const string MudAutocomplete_MaxItems = @"Maximum items to display, defaults to 10.
            A null value will display all items.";

        public const string MudAutocomplete_MinCharacters = @"Minimum characters to initiate a search";

        public const string MudAutocomplete_ResetValueOnEmptyText = @"Reset value if user deletes the text";

        public const string MudAutocomplete_SelectOnClick = @"If true, clicking the text field will select (highlight) its contents.";

        public const string MudAutocomplete_DebounceInterval = @"Debounce interval in milliseconds.";

        public const string MudAutocomplete_ItemTemplate = @"Optional presentation template for unselected items";

        public const string MudAutocomplete_ItemSelectedTemplate = @"Optional presentation template for the selected item";

        public const string MudAutocomplete_ItemDisabledTemplate = @"Optional presentation template for disabled item";

        public const string MudAutocomplete_MoreItemsTemplate = @"Optional presentation template for when more items were returned from the Search function than the MaxItems limit";

        public const string MudAutocomplete_NoItemsTemplate = @"Optional presentation template for when no items were returned from the Search function";

        public const string MudAutocomplete_ProgressIndicatorTemplate = @"Optional template for progress indicator";

        public const string MudAutocomplete_ProgressIndicatorInPopoverTemplate = @"Optional template for showing progress indicator inside the popover";

        public const string MudAutocomplete_CoerceText = @"On drop-down close override Text with selected Value. This makes it clear to the user
            which list value is currently selected and disallows incomplete values in Text.";

        public const string MudAutocomplete_CoerceValue = @"If user input is not found by the search func and CoerceValue is set to true the user input
            will be applied to the Value which allows to validate it and display an error message.";

        public const string MudAutocomplete_ItemDisabledFunc = @"Function to be invoked when checking whether an item should be disabled or not";

        public const string MudAutocomplete_IsOpenChanged = @"An event triggered when the state of IsOpen has changed";

        public const string MudAutocomplete_SelectValueOnTab = @"If true, the currently selected item from the drop-down (if it is open) is selected.";

        public const string MudAutocomplete_Clearable = @"Show clear button.";

        public const string MudAutocomplete_OnClearButtonClick = @"Button click event for clear button. Called after text and value has been cleared.";

        public const string MudAutocomplete_Disabled = @"If true, the input element will be disabled.";

        public const string MudAutocomplete_ReadOnly = @"If true, the input will be read-only.";

        public const string MudAutocomplete_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudAutocomplete_Immediate = @"If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.";

        public const string MudAutocomplete_DisableUnderLine = @"If true, the input will not have an underline.";

        public const string MudAutocomplete_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudAutocomplete_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudAutocomplete_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudAutocomplete_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudAutocomplete_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudAutocomplete_OnlyValidateIfDirty = @"The validation is only triggered if the user has changed the input value at least once. By default, it is false";

        public const string MudAutocomplete_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudAutocomplete_AdornmentAriaLabel = @"The aria-label of the adornment.";

        public const string MudAutocomplete_IconSize = @"The Icon Size.";

        public const string MudAutocomplete_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudAutocomplete_Variant = @"Variant to use.";

        public const string MudAutocomplete_Margin = @"Will adjust vertical spacing.";

        public const string MudAutocomplete_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudAutocomplete_Counter = @"If set, will display the counter, value 0 will display current count but no stop count.";

        public const string MudAutocomplete_MaxLength = @"Maximum number of characters that the input will accept";

        public const string MudAutocomplete_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudAutocomplete_AutoFocus = @"If true the input will focus automatically.";

        public const string MudAutocomplete_Lines = @"A multiline input (textarea) will be shown, if set to more than one line.";

        public const string MudAutocomplete_Text = @"The text to be displayed.";

        public const string MudAutocomplete_TextUpdateSuppression = @"When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.";

        public const string MudAutocomplete_InputMode = @"Hints at the type of data that might be entered by the user while editing the input";

        public const string MudAutocomplete_Pattern = @"The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
            Not Supported in multline input";

        public const string MudAutocomplete_TextChanged = @"Fired when the text value changes.";

        public const string MudAutocomplete_OnBlur = @"Fired when the element loses focus.";

        public const string MudAutocomplete_OnInternalInputChanged = @"Fired when the element changes internally its text value.";

        public const string MudAutocomplete_OnKeyDown = @"Fired on the KeyDown event.";

        public const string MudAutocomplete_KeyDownPreventDefault = @"Prevent the default action for the KeyDown event.";

        public const string MudAutocomplete_OnKeyPress = @"Fired on the KeyPress event.";

        public const string MudAutocomplete_KeyPressPreventDefault = @"Prevent the default action for the KeyPress event.";

        public const string MudAutocomplete_OnKeyUp = @"Fired on the KeyUp event.";

        public const string MudAutocomplete_KeyUpPreventDefault = @"Prevent the default action for the KeyUp event.";

        public const string MudAutocomplete_ValueChanged = @"Fired when the Value property changes.";

        public const string MudAutocomplete_Value = @"The value of this input element.";

        public const string MudAutocomplete_Format = @"Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans";

        public const string MudAutocomplete_Required = @"If true, this form input is required to be filled out.";

        public const string MudAutocomplete_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudAutocomplete_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudAutocomplete_Error = @"If true, the label will be displayed in an error state.";

        public const string MudAutocomplete_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudAutocomplete_Converter = @"The generic converter of the component.";

        public const string MudAutocomplete_Culture = @"The culture of the component.";

        public const string MudAutocomplete_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudAutocomplete_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudAutocomplete_Class = @"User class names, separated by space.";

        public const string MudAutocomplete_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudAutocomplete_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudAutocomplete_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudAutocomplete_method_System_Threading_Tasks_Task_SelectOption_T_ = @"";

        public const string MudAutocomplete_method_System_Threading_Tasks_Task_ToggleMenu__ = @"
            <summary>
            Toggle the menu (if not disabled or not readonly, and is opened).
            </summary>
        ";

        public const string MudAutocomplete_method_System_Threading_Tasks_Task_Clear__ = @"
            <summary>
            Clears the autocomplete's text
            </summary>
        ";

        public const string MudAutocomplete_method_System_Threading_Tasks_Task_ScrollToListItem_Int32__Int32_ = @"
            <summary>
            Scroll to a specific item index in the Autocomplete list of items.
            </summary>
            <param name=""index"">the index to scroll to</param>
            <param name=""increment"">not used</param>
            <returns>ValueTask</returns>
        ";

        public const string MudAutocomplete_method_System_Threading_Tasks_ValueTask_ScrollToListItem_Int32_ = @"
            <summary>
            Scroll to a specific item index in the Autocomplete list of items.
            </summary>
            <param name=""index"">the index to scroll to</param>
        ";

        public const string MudAutocomplete_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"
            <summary>
            Focus the input in the Autocomplete component.
            </summary>
        ";

        public const string MudAutocomplete_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"
            <summary>
            Blur from the input in the Autocomplete component.
            </summary>
        ";

        public const string MudAutocomplete_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"
            <summary>
            Select all text within the Autocomplete input.
            </summary>
        ";

        public const string MudAutocomplete_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"
            <summary>
            Select all text within the Autocomplete input and aligns its start and end points to the text content of the current input.
            </summary>
        ";

        public const string MudAutocomplete_method_Void_ForceRender_Boolean_ = @"";

        public const string MudAutocomplete_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudAutocomplete_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudAutocomplete_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudAutocomplete_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudAvatar_Elevation = @"The higher the number, the heavier the drop-shadow.";

        public const string MudAvatar_Square = @"If true, border-radius is set to 0.";

        public const string MudAvatar_Rounded = @"If true, border-radius is set to the themes default value.";

        public const string MudAvatar_Image = @"Link to image, if set a image will be displayed instead of text.";

        public const string MudAvatar_Alt = @"If set (and Image is also set), will add an alt property to the img element";

        public const string MudAvatar_Color = @"The color of the component. It supports the theme colors.";

        public const string MudAvatar_Size = @"The Size of the MudAvatar.";

        public const string MudAvatar_Variant = @"The variant to use.";

        public const string MudAvatar_ChildContent = @"Child content of the component.";

        public const string MudAvatar_Class = @"User class names, separated by space.";

        public const string MudAvatar_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudAvatar_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudAvatar_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudAvatar_method_Void_Dispose__ = @"";

        public const string MudAvatarColumn_Value = @"";

        public const string MudAvatarColumn_Visible = @"";

        public const string MudAvatarColumn_HeaderText = @"";

        public const string MudAvatarGroup_Spacing = @"Spacing between avatars where 0 is none and 16 max.";

        public const string MudAvatarGroup_Outlined = @"Outlines the grouped avatars to distinguish them, useful when avatars are the same color or uses images.";

        public const string MudAvatarGroup_OutlineColor = @"Sets the color of the outline if its used.";

        public const string MudAvatarGroup_MaxElevation = @"Elevation of the MaxAvatar the higher the number, the heavier the drop-shadow.";

        public const string MudAvatarGroup_MaxSquare = @"If true, MaxAvatar border-radius is set to 0.";

        public const string MudAvatarGroup_MaxRounded = @"If true, MaxAvatar will be rounded.";

        public const string MudAvatarGroup_MaxColor = @"Color for the MaxAvatar.";

        public const string MudAvatarGroup_MaxSize = @"Size of the MaxAvatar.";

        public const string MudAvatarGroup_MaxVariant = @"Variant of the MaxAvatar.";

        public const string MudAvatarGroup_Max = @"Max avatars to show before showing +x avatar, default value 0 has no max.";

        public const string MudAvatarGroup_MaxAvatarClass = @"Custom class/classes for MaxAvatar";

        public const string MudAvatarGroup_ChildContent = @"Child content of the component.";

        public const string MudAvatarGroup_Class = @"User class names, separated by space.";

        public const string MudAvatarGroup_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudAvatarGroup_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudAvatarGroup_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudBadge_Origin = @"The placement of the badge.";

        public const string MudBadge_Elevation = @"The higher the number, the heavier the drop-shadow.";

        public const string MudBadge_Visible = @"The visibility of the badge.";

        public const string MudBadge_Color = @"The color of the badge.";

        public const string MudBadge_Bottom = @"Aligns the badge to bottom.";

        public const string MudBadge_Left = @"Aligns the badge to left.";

        public const string MudBadge_Start = @"Aligns the badge to the start (Left in LTR and right in RTL).";

        public const string MudBadge_Dot = @"Reduces the size of the badge and hide any of its content.";

        public const string MudBadge_Overlap = @"Overlaps the childcontent on top of the content.";

        public const string MudBadge_Bordered = @"Applies a border around the badge.";

        public const string MudBadge_Icon = @"Sets the Icon to use in the badge.";

        public const string MudBadge_Max = @"Max value to show when content is integer type.";

        public const string MudBadge_Content = @"Content you want inside the badge. Supported types are string and integer.";

        public const string MudBadge_BadgeClass = @"Badge class names, separated by space.";

        public const string MudBadge_ChildContent = @"Child content of component, the content that the badge will apply to.";

        public const string MudBadge_OnClick = @"Button click event if set.";

        public const string MudBadge_Class = @"User class names, separated by space.";

        public const string MudBadge_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudBadge_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudBadge_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudBaseBindableItemsControl_ItemsSource = @"Items Collection - For databinding usage";

        public const string MudBaseBindableItemsControl_ItemTemplate = @"Template for each Item in ItemsSource collection";

        public const string MudBaseBindableItemsControl_ChildContent = @"Collection of T";

        public const string MudBaseBindableItemsControl_SelectedIndex = @"Selected Item's index";

        public const string MudBaseBindableItemsControl_SelectedIndexChanged = @"";

        public const string MudBaseBindableItemsControl_Class = @"User class names, separated by space.";

        public const string MudBaseBindableItemsControl_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudBaseBindableItemsControl_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudBaseBindableItemsControl_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudBaseBindableItemsControl_method_Void_Previous__ = @"
            <summary>
            Move to Previous Item
            </summary>
        ";

        public const string MudBaseBindableItemsControl_method_Void_Next__ = @"
            <summary>
            Move to Next Item
            </summary>
        ";

        public const string MudBaseBindableItemsControl_method_Void_MoveTo_Int32_ = @"
            <summary>
            Move to Item at desired index
            </summary>
        ";

        public const string MudBaseBindableItemsControl_method_Void_AddItem_TChildComponent_ = @"";

        public const string MudBaseButton_HtmlTag = @"The HTML element that will be rendered in the root by the component
            By default, is a button";

        public const string MudBaseButton_ButtonType = @"The button Type (Button, Submit, Refresh)";

        public const string MudBaseButton_Href = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

        public const string MudBaseButton_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)";

        public const string MudBaseButton_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

        public const string MudBaseButton_Disabled = @"If true, the button will be disabled.";

        public const string MudBaseButton_DisableElevation = @"If true, no drop-shadow will be used.";

        public const string MudBaseButton_DisableRipple = @"If true, disables ripple effect.";

        public const string MudBaseButton_Command = @"Command executed when the user clicks on an element.";

        public const string MudBaseButton_CommandParameter = @"Command parameter.";

        public const string MudBaseButton_OnClick = @"Button click event.";

        public const string MudBaseButton_Class = @"User class names, separated by space.";

        public const string MudBaseButton_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudBaseButton_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudBaseButton_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudBaseButton_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudBaseColumn_Visible = @"";

        public const string MudBaseColumn_HeaderText = @"";

        public const string MudBaseDatePicker_MaxDate = @"Max selectable date.";

        public const string MudBaseDatePicker_MinDate = @"Min selectable date.";

        public const string MudBaseDatePicker_OpenTo = @"First view to show in the MudDatePicker.";

        public const string MudBaseDatePicker_DateFormat = @"String Format for selected date view";

        public const string MudBaseDatePicker_FirstDayOfWeek = @"Defines on which day the week starts. Depends on the value of Culture.";

        public const string MudBaseDatePicker_PickerMonth = @"The current month of the date picker (two-way bindable). This changes when the user browses through the calender.
            The month is represented as a DateTime which is always the first day of that month. You can also set this to define which month is initially shown. If not set, the current month is shown.";

        public const string MudBaseDatePicker_PickerMonthChanged = @"Fired when the date changes.";

        public const string MudBaseDatePicker_ClosingDelay = @"Sets the amount of time in milliseconds to wait before closing the picker. This helps the user see that the date was selected before the popover disappears.";

        public const string MudBaseDatePicker_DisplayMonths = @"Number of months to display in the calendar";

        public const string MudBaseDatePicker_MaxMonthColumns = @"Maximum number of months in one row";

        public const string MudBaseDatePicker_StartMonth = @"Start month when opening the picker.";

        public const string MudBaseDatePicker_ShowWeekNumbers = @"Display week numbers according to the Culture parameter. If no culture is defined, CultureInfo.CurrentCulture will be used.";

        public const string MudBaseDatePicker_TitleDateFormat = @"Format of the selected date in the title. By default, this is ""ddd, dd MMM"" which abbreviates day and month names. 
            For instance, display the long names like this ""dddd, dd. MMMM"".";

        public const string MudBaseDatePicker_AutoClose = @"If AutoClose is set to true and PickerActions are defined, selecting a day will close the MudDatePicker.";

        public const string MudBaseDatePicker_IsDateDisabledFunc = @"Function to determine whether a date is disabled";

        public const string MudBaseDatePicker_AdditionalDateClassesFunc = @"Function to conditionally apply new classes to specific days";

        public const string MudBaseDatePicker_PreviousIcon = @"Custom previous icon.";

        public const string MudBaseDatePicker_NextIcon = @"Custom next icon.";

        public const string MudBaseDatePicker_FixYear = @"Set a predefined fix year - no year can be selected";

        public const string MudBaseDatePicker_FixMonth = @"Set a predefined fix month - no month can be selected";

        public const string MudBaseDatePicker_FixDay = @"Set a predefined fix day - no day can be selected";

        public const string MudBaseDatePicker_InputIcon = @"Sets the icon of the input text field";

        public const string MudBaseDatePicker_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudBaseDatePicker_AdornmentIcon = @"Sets the icon of the input text field";

        public const string MudBaseDatePicker_AdornmentAriaLabel = @"Sets the aria-label of the input text field icon";

        public const string MudBaseDatePicker_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudBaseDatePicker_PickerOpened = @"Fired when the dropdown / dialog opens";

        public const string MudBaseDatePicker_PickerClosed = @"Fired when the dropdown / dialog closes";

        public const string MudBaseDatePicker_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.";

        public const string MudBaseDatePicker_Square = @"If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.";

        public const string MudBaseDatePicker_ReadOnly = @"If true, no date or time can be defined.";

        public const string MudBaseDatePicker_Rounded = @"If true, border-radius is set to theme default when in Static Mode.";

        public const string MudBaseDatePicker_HelperText = @"If string has value, HelperText will be applied.";

        public const string MudBaseDatePicker_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudBaseDatePicker_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudBaseDatePicker_Clearable = @"Show clear button.";

        public const string MudBaseDatePicker_Disabled = @"If true, the picker will be disabled.";

        public const string MudBaseDatePicker_Editable = @"If true, the picker will be editable.";

        public const string MudBaseDatePicker_DisableToolbar = @"Hide toolbar and show only date/time views.";

        public const string MudBaseDatePicker_ToolBarClass = @"User class names for picker's ToolBar, separated by space";

        public const string MudBaseDatePicker_PickerVariant = @"Picker container option";

        public const string MudBaseDatePicker_InputVariant = @"Variant of the text input";

        public const string MudBaseDatePicker_Variant = @"Variant of the text input";

        public const string MudBaseDatePicker_Adornment = @"Sets if the icon will be att start or end, set to false to disable.";

        public const string MudBaseDatePicker_Orientation = @"What orientation to render in when in PickerVariant Static Mode.";

        public const string MudBaseDatePicker_IconSize = @"Sets the Icon Size.";

        public const string MudBaseDatePicker_Color = @"The color of the toolbar, selected and active. It supports the theme colors.";

        public const string MudBaseDatePicker_AllowKeyboardInput = @"Changes the cursor appearance.";

        public const string MudBaseDatePicker_TextChanged = @"Fired when the text changes.";

        public const string MudBaseDatePicker_Text = @"The currently selected string value (two-way bindable)";

        public const string MudBaseDatePicker_ClassActions = @"CSS class that will be applied to the action buttons container";

        public const string MudBaseDatePicker_PickerActions = @"Define the action buttons here";

        public const string MudBaseDatePicker_Margin = @"Will adjust vertical spacing.";

        public const string MudBaseDatePicker_Mask = @"A mask for structured input of the date (requires Editable to be true).";

        public const string MudBaseDatePicker_AnchorOrigin = @"Gets or sets the origin of the popover's anchor. Defaults to Origin.TopLeft";

        public const string MudBaseDatePicker_TransformOrigin = @"Gets or sets the origin of the popover's transform. Defaults to Origin.TopLeft";

        public const string MudBaseDatePicker_Required = @"If true, this form input is required to be filled out.";

        public const string MudBaseDatePicker_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudBaseDatePicker_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudBaseDatePicker_Error = @"If true, the label will be displayed in an error state.";

        public const string MudBaseDatePicker_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudBaseDatePicker_Converter = @"The generic converter of the component.";

        public const string MudBaseDatePicker_Culture = @"The culture of the component.";

        public const string MudBaseDatePicker_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudBaseDatePicker_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudBaseDatePicker_Class = @"User class names, separated by space.";

        public const string MudBaseDatePicker_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudBaseDatePicker_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudBaseDatePicker_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudBaseDatePicker_method_Void_ScrollToYear__ = @"";

        public const string MudBaseDatePicker_method_Void_ToggleOpen__ = @"";

        public const string MudBaseDatePicker_method_Void_Close_Boolean_ = @"";

        public const string MudBaseDatePicker_method_Void_Open__ = @"";

        public const string MudBaseDatePicker_method_Void_Clear_Boolean_ = @"";

        public const string MudBaseDatePicker_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudBaseDatePicker_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudBaseDatePicker_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudBaseDatePicker_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudBaseDatePicker_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudBaseDatePicker_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudBaseDatePicker_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudBaseDatePicker_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudBaseInput_Disabled = @"If true, the input element will be disabled.";

        public const string MudBaseInput_ReadOnly = @"If true, the input will be read-only.";

        public const string MudBaseInput_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudBaseInput_Immediate = @"If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.";

        public const string MudBaseInput_DisableUnderLine = @"If true, the input will not have an underline.";

        public const string MudBaseInput_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudBaseInput_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudBaseInput_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudBaseInput_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudBaseInput_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudBaseInput_OnlyValidateIfDirty = @"The validation is only triggered if the user has changed the input value at least once. By default, it is false";

        public const string MudBaseInput_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudBaseInput_AdornmentAriaLabel = @"The aria-label of the adornment.";

        public const string MudBaseInput_IconSize = @"The Icon Size.";

        public const string MudBaseInput_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudBaseInput_Variant = @"Variant to use.";

        public const string MudBaseInput_Margin = @"Will adjust vertical spacing.";

        public const string MudBaseInput_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudBaseInput_Counter = @"If set, will display the counter, value 0 will display current count but no stop count.";

        public const string MudBaseInput_MaxLength = @"Maximum number of characters that the input will accept";

        public const string MudBaseInput_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudBaseInput_AutoFocus = @"If true the input will focus automatically.";

        public const string MudBaseInput_Lines = @"A multiline input (textarea) will be shown, if set to more than one line.";

        public const string MudBaseInput_Text = @"The text to be displayed.";

        public const string MudBaseInput_TextUpdateSuppression = @"When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.";

        public const string MudBaseInput_InputMode = @"Hints at the type of data that might be entered by the user while editing the input";

        public const string MudBaseInput_Pattern = @"The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
            Not Supported in multline input";

        public const string MudBaseInput_TextChanged = @"Fired when the text value changes.";

        public const string MudBaseInput_OnBlur = @"Fired when the element loses focus.";

        public const string MudBaseInput_OnInternalInputChanged = @"Fired when the element changes internally its text value.";

        public const string MudBaseInput_OnKeyDown = @"Fired on the KeyDown event.";

        public const string MudBaseInput_KeyDownPreventDefault = @"Prevent the default action for the KeyDown event.";

        public const string MudBaseInput_OnKeyPress = @"Fired on the KeyPress event.";

        public const string MudBaseInput_KeyPressPreventDefault = @"Prevent the default action for the KeyPress event.";

        public const string MudBaseInput_OnKeyUp = @"Fired on the KeyUp event.";

        public const string MudBaseInput_KeyUpPreventDefault = @"Prevent the default action for the KeyUp event.";

        public const string MudBaseInput_ValueChanged = @"Fired when the Value property changes.";

        public const string MudBaseInput_Value = @"The value of this input element.";

        public const string MudBaseInput_Format = @"Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans";

        public const string MudBaseInput_Required = @"If true, this form input is required to be filled out.";

        public const string MudBaseInput_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudBaseInput_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudBaseInput_Error = @"If true, the label will be displayed in an error state.";

        public const string MudBaseInput_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudBaseInput_Converter = @"The generic converter of the component.";

        public const string MudBaseInput_Culture = @"The culture of the component.";

        public const string MudBaseInput_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudBaseInput_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudBaseInput_Class = @"User class names, separated by space.";

        public const string MudBaseInput_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudBaseInput_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudBaseInput_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudBaseInput_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"
            <summary>
            Focuses the element
            </summary>
            <returns>The ValueTask</returns>
        ";

        public const string MudBaseInput_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudBaseInput_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudBaseInput_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudBaseInput_method_Void_ForceRender_Boolean_ = @"";

        public const string MudBaseInput_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudBaseInput_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudBaseInput_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudBaseInput_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudBaseItemsControl_ChildContent = @"Collection of T";

        public const string MudBaseItemsControl_SelectedIndex = @"Selected Item's index";

        public const string MudBaseItemsControl_SelectedIndexChanged = @"";

        public const string MudBaseItemsControl_Class = @"User class names, separated by space.";

        public const string MudBaseItemsControl_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudBaseItemsControl_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudBaseItemsControl_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudBaseItemsControl_method_Void_Previous__ = @"
            <summary>
            Move to Previous Item
            </summary>
        ";

        public const string MudBaseItemsControl_method_Void_Next__ = @"
            <summary>
            Move to Next Item
            </summary>
        ";

        public const string MudBaseItemsControl_method_Void_MoveTo_Int32_ = @"
            <summary>
            Move to Item at desired index
            </summary>
        ";

        public const string MudBaseItemsControl_method_Void_AddItem_TChildComponent_ = @"";

        public const string MudBaseSelectItem_Disabled = @"If true, the input element will be disabled.";

        public const string MudBaseSelectItem_DisableRipple = @"If true, disables ripple effect.";

        public const string MudBaseSelectItem_Href = @"Link to a URL when clicked.";

        public const string MudBaseSelectItem_ForceLoad = @"If true, force browser to redirect outside component router-space.";

        public const string MudBaseSelectItem_ChildContent = @"Child content of component.";

        public const string MudBaseSelectItem_CommandParameter = @"Command parameter.";

        public const string MudBaseSelectItem_Command = @"Command executed when the user clicks on an element.";

        public const string MudBaseSelectItem_OnClick = @"";

        public const string MudBaseSelectItem_Class = @"User class names, separated by space.";

        public const string MudBaseSelectItem_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudBaseSelectItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudBaseSelectItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudBooleanInput_Disabled = @"If true, the input will be disabled.";

        public const string MudBooleanInput_ReadOnly = @"If true, the input will be read-only.";

        public const string MudBooleanInput_Checked = @"The state of the component";

        public const string MudBooleanInput_StopClickPropagation = @"If true will prevent the click from bubbling up the event tree.";

        public const string MudBooleanInput_CheckedChanged = @"Fired when Checked changes.";

        public const string MudBooleanInput_Required = @"If true, this form input is required to be filled out.";

        public const string MudBooleanInput_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudBooleanInput_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudBooleanInput_Error = @"If true, the label will be displayed in an error state.";

        public const string MudBooleanInput_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudBooleanInput_Converter = @"The generic converter of the component.";

        public const string MudBooleanInput_Culture = @"The culture of the component.";

        public const string MudBooleanInput_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudBooleanInput_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudBooleanInput_Class = @"User class names, separated by space.";

        public const string MudBooleanInput_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudBooleanInput_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudBooleanInput_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudBooleanInput_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudBooleanInput_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudBooleanInput_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudBooleanInput_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudBreadcrumbs_Items = @"A list of breadcrumb items/links.";

        public const string MudBreadcrumbs_Separator = @"Specifies the separator between the items.";

        public const string MudBreadcrumbs_SeparatorTemplate = @"Specifies a RenderFragment to use as the separator.";

        public const string MudBreadcrumbs_ItemTemplate = @"Specifies a RenderFragment to use as the items' contents.";

        public const string MudBreadcrumbs_MaxItems = @"Controls when (and if) the breadcrumbs will automatically collapse.";

        public const string MudBreadcrumbs_ExpanderIcon = @"Custom expander icon.";

        public const string MudBreadcrumbs_Class = @"User class names, separated by space.";

        public const string MudBreadcrumbs_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudBreadcrumbs_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudBreadcrumbs_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudBreakpointProvider_OnBreakpointChanged = @"";

        public const string MudBreakpointProvider_ChildContent = @"";

        public const string MudBreakpointProvider_Class = @"User class names, separated by space.";

        public const string MudBreakpointProvider_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudBreakpointProvider_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudBreakpointProvider_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudBreakpointProvider_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string MudButton_StartIcon = @"Icon placed before the text if set.";

        public const string MudButton_EndIcon = @"Icon placed after the text if set.";

        public const string MudButton_IconColor = @"The color of the icon. It supports the theme colors.";

        public const string MudButton_IconClass = @"Icon class names, separated by space";

        public const string MudButton_Color = @"The color of the component. It supports the theme colors.";

        public const string MudButton_Size = @"The Size of the component.";

        public const string MudButton_Variant = @"The variant to use.";

        public const string MudButton_FullWidth = @"If true, the button will take up 100% of available width.";

        public const string MudButton_ChildContent = @"Child content of component.";

        public const string MudButton_HtmlTag = @"The HTML element that will be rendered in the root by the component
            By default, is a button";

        public const string MudButton_ButtonType = @"The button Type (Button, Submit, Refresh)";

        public const string MudButton_Href = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

        public const string MudButton_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)";

        public const string MudButton_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

        public const string MudButton_Disabled = @"If true, the button will be disabled.";

        public const string MudButton_DisableElevation = @"If true, no drop-shadow will be used.";

        public const string MudButton_DisableRipple = @"If true, disables ripple effect.";

        public const string MudButton_Command = @"Command executed when the user clicks on an element.";

        public const string MudButton_CommandParameter = @"Command parameter.";

        public const string MudButton_OnClick = @"Button click event.";

        public const string MudButton_Class = @"User class names, separated by space.";

        public const string MudButton_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudButton_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudButton_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudButton_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudButtonGroup_OverrideStyles = @"If true, the button group will override the styles of the individual buttons.";

        public const string MudButtonGroup_ChildContent = @"Child content of component.";

        public const string MudButtonGroup_VerticalAlign = @"If true, the button group will be displayed vertically.";

        public const string MudButtonGroup_DisableElevation = @"If true, no drop-shadow will be used.";

        public const string MudButtonGroup_Color = @"The color of the component. It supports the theme colors.";

        public const string MudButtonGroup_Size = @"The size of the component.";

        public const string MudButtonGroup_Variant = @"The variant to use.";

        public const string MudButtonGroup_Class = @"User class names, separated by space.";

        public const string MudButtonGroup_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudButtonGroup_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudButtonGroup_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudCard_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

        public const string MudCard_Square = @"If true, border-radius is set to 0.";

        public const string MudCard_Outlined = @"If true, card will be outlined.";

        public const string MudCard_ChildContent = @"Child content of the component.";

        public const string MudCard_Class = @"User class names, separated by space.";

        public const string MudCard_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudCard_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudCard_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudCardActions_ChildContent = @"Child content of the component.";

        public const string MudCardActions_Class = @"User class names, separated by space.";

        public const string MudCardActions_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudCardActions_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudCardActions_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudCardContent_ChildContent = @"Child content of the component.";

        public const string MudCardContent_Class = @"User class names, separated by space.";

        public const string MudCardContent_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudCardContent_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudCardContent_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudCardHeader_CardHeaderAvatar = @"If used renders child content of the CardHeaderAvatar.";

        public const string MudCardHeader_CardHeaderContent = @"If used renders child content of the CardHeaderContent.";

        public const string MudCardHeader_CardHeaderActions = @"If used renders child content of the CardHeaderActions.";

        public const string MudCardHeader_ChildContent = @"Optional child content";

        public const string MudCardHeader_Class = @"User class names, separated by space.";

        public const string MudCardHeader_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudCardHeader_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudCardHeader_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudCardMedia_Title = @"Title of the image used for accessibility.";

        public const string MudCardMedia_Image = @"Specifies the path to the image.";

        public const string MudCardMedia_Height = @"Specifies the height of the image in px.";

        public const string MudCardMedia_Class = @"User class names, separated by space.";

        public const string MudCardMedia_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudCardMedia_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudCardMedia_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudCarousel_ShowArrows = @"Gets or Sets if 'Next' and 'Previous' arrows must be visible";

        public const string MudCarousel_ArrowsPosition = @"Sets the position of the arrows. By default, the position is the Center position";

        public const string MudCarousel_ShowBullets = @"Gets or Sets if bar with Bullets must be visible";

        public const string MudCarousel_BulletsPosition = @"Sets the position of the bullets. By default, the position is the Bottom position";

        public const string MudCarousel_BulletsColor = @"Gets or Sets the Bullets color.
            If not set, the color is determined based on the MudCarouselItem.Color property of the active child.";

        public const string MudCarousel_ShowDelimiters = @"Gets or Sets if bottom bar with Delimiters must be visible.
            Deprecated, use ShowBullets instead.";

        public const string MudCarousel_DelimitersColor = @"Gets or Sets the Delimiters color.
            If not set, the color is determined based on the MudCarouselItem.Color property of the active child.
            Deprecated, use BulletsColor instead.";

        public const string MudCarousel_AutoCycle = @"Gets or Sets automatic cycle on item collection.";

        public const string MudCarousel_AutoCycleTime = @"Gets or Sets the Auto Cycle time";

        public const string MudCarousel_NavigationButtonsClass = @"Gets or Sets custom class(es) for 'Next' and 'Previous' arrows";

        public const string MudCarousel_BulletsClass = @"Gets or Sets custom class(es) for Bullets buttons";

        public const string MudCarousel_DelimitersClass = @"Gets or Sets custom class(es) for Delimiters buttons.
            Deprecated, use BulletsClass instead.";

        public const string MudCarousel_PreviousIcon = @"Custom previous navigation icon.";

        public const string MudCarousel_CheckedIcon = @"Custom selected bullet icon.";

        public const string MudCarousel_UncheckedIcon = @"Custom unselected bullet icon.";

        public const string MudCarousel_NextIcon = @"Custom next navigation icon.";

        public const string MudCarousel_NextButtonTemplate = @"Gets or Sets the Template for the Left Arrow";

        public const string MudCarousel_PreviousButtonTemplate = @"Gets or Sets the Template for the Right Arrow";

        public const string MudCarousel_BulletTemplate = @"Gets or Sets the Template for Bullets";

        public const string MudCarousel_EnableSwipeGesture = @"Gets or Sets if swipe gestures are allowed for touch devices.";

        public const string MudCarousel_DelimiterTemplate = @"Gets or Sets the Template for Delimiters.
            Deprecated, use BulletsTemplate instead.";

        public const string MudCarousel_ItemsSource = @"Items Collection - For databinding usage";

        public const string MudCarousel_ItemTemplate = @"Template for each Item in ItemsSource collection";

        public const string MudCarousel_ChildContent = @"Collection of T";

        public const string MudCarousel_SelectedIndex = @"Selected Item's index";

        public const string MudCarousel_SelectedIndexChanged = @"";

        public const string MudCarousel_Class = @"User class names, separated by space.";

        public const string MudCarousel_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudCarousel_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudCarousel_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudCarousel_method_Void_AddItem_MudBlazor_MudCarouselItem_ = @"";

        public const string MudCarousel_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string MudCarousel_method_Void_Previous__ = @"
            <summary>
            Move to Previous Item
            </summary>
        ";

        public const string MudCarousel_method_Void_Next__ = @"
            <summary>
            Move to Next Item
            </summary>
        ";

        public const string MudCarousel_method_Void_MoveTo_Int32_ = @"
            <summary>
            Move to Item at desired index
            </summary>
        ";

        public const string MudCarouselItem_ChildContent = @"";

        public const string MudCarouselItem_Color = @"The color of the component. It supports the theme colors.";

        public const string MudCarouselItem_Transition = @"The transition effect of the component.";

        public const string MudCarouselItem_CustomTransitionEnter = @"The name of custom transition on entrance time";

        public const string MudCarouselItem_CustomTransitionExit = @"The name of custom transition on exiting time";

        public const string MudCarouselItem_Class = @"User class names, separated by space.";

        public const string MudCarouselItem_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudCarouselItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudCarouselItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudCarouselItem_method_Void_Dispose__ = @"";

        public const string MudChart_InputData = @"";

        public const string MudChart_InputLabels = @"";

        public const string MudChart_XAxisLabels = @"";

        public const string MudChart_ChartSeries = @"";

        public const string MudChart_ChartOptions = @"";

        public const string MudChart_CustomGraphics = @"RenderFragment for costumization inside the chart's svg.";

        public const string MudChart_ChartType = @"The Type of the chart.";

        public const string MudChart_Width = @"The Width of the chart, end with % or px.";

        public const string MudChart_Height = @"The Height of the chart, end with % or px.";

        public const string MudChart_LegendPosition = @"The placement direction of the legend if used.";

        public const string MudChart_SelectedIndex = @"Selected index of a portion of the chart.";

        public const string MudChart_SelectedIndexChanged = @"Selected index of a portion of the chart.";

        public const string MudChart_Class = @"User class names, separated by space.";

        public const string MudChart_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudChart_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudChart_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudChartBase_InputData = @"";

        public const string MudChartBase_InputLabels = @"";

        public const string MudChartBase_XAxisLabels = @"";

        public const string MudChartBase_ChartSeries = @"";

        public const string MudChartBase_ChartOptions = @"";

        public const string MudChartBase_CustomGraphics = @"RenderFragment for costumization inside the chart's svg.";

        public const string MudChartBase_ChartType = @"The Type of the chart.";

        public const string MudChartBase_Width = @"The Width of the chart, end with % or px.";

        public const string MudChartBase_Height = @"The Height of the chart, end with % or px.";

        public const string MudChartBase_LegendPosition = @"The placement direction of the legend if used.";

        public const string MudChartBase_SelectedIndex = @"Selected index of a portion of the chart.";

        public const string MudChartBase_SelectedIndexChanged = @"Selected index of a portion of the chart.";

        public const string MudChartBase_Class = @"User class names, separated by space.";

        public const string MudChartBase_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudChartBase_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudChartBase_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudCheckBox_Color = @"The color of the component. It supports the theme colors.";

        public const string MudCheckBox_UnCheckedColor = @"The base color of the component in its none active/unchecked state. It supports the theme colors.";

        public const string MudCheckBox_Label = @"The text/label will be displayed next to the checkbox if set.";

        public const string MudCheckBox_LabelPosition = @"The position of the text/label.";

        public const string MudCheckBox_KeyboardEnabled = @"If true, the checkbox can be controlled with the keyboard.";

        public const string MudCheckBox_DisableRipple = @"If true, disables ripple effect.";

        public const string MudCheckBox_Dense = @"If true, compact padding will be applied.";

        public const string MudCheckBox_Size = @"The Size of the component.";

        public const string MudCheckBox_ChildContent = @"Child content of component.";

        public const string MudCheckBox_CheckedIcon = @"Custom checked icon, leave null for default.";

        public const string MudCheckBox_UncheckedIcon = @"Custom unchecked icon, leave null for default.";

        public const string MudCheckBox_IndeterminateIcon = @"Custom indeterminate icon, leave null for default.";

        public const string MudCheckBox_TriState = @"Define if the checkbox can cycle again through indeterminate status.";

        public const string MudCheckBox_Disabled = @"If true, the input will be disabled.";

        public const string MudCheckBox_ReadOnly = @"If true, the input will be read-only.";

        public const string MudCheckBox_Checked = @"The state of the component";

        public const string MudCheckBox_StopClickPropagation = @"If true will prevent the click from bubbling up the event tree.";

        public const string MudCheckBox_CheckedChanged = @"Fired when Checked changes.";

        public const string MudCheckBox_Required = @"If true, this form input is required to be filled out.";

        public const string MudCheckBox_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudCheckBox_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudCheckBox_Error = @"If true, the label will be displayed in an error state.";

        public const string MudCheckBox_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudCheckBox_Converter = @"The generic converter of the component.";

        public const string MudCheckBox_Culture = @"The culture of the component.";

        public const string MudCheckBox_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudCheckBox_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudCheckBox_Class = @"User class names, separated by space.";

        public const string MudCheckBox_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudCheckBox_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudCheckBox_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudCheckBox_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudCheckBox_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudCheckBox_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudCheckBox_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudChip_Color = @"The color of the component.";

        public const string MudChip_Size = @"The size of the button. small is equivalent to the dense button styling.";

        public const string MudChip_Variant = @"The variant to use.";

        public const string MudChip_SelectedColor = @"The selected color to use when selected, only works together with ChipSet, Color.Inherit for default value.";

        public const string MudChip_Avatar = @"Avatar Icon, Overrides the regular Icon if set.";

        public const string MudChip_AvatarClass = @"Avatar CSS Class, appends to Chips default avatar classes.";

        public const string MudChip_Label = @"Removes circle edges and applies theme default.";

        public const string MudChip_Disabled = @"If true, the chip will be displayed in disabled state and no events possible.";

        public const string MudChip_Icon = @"Sets the Icon to use.";

        public const string MudChip_CheckedIcon = @"Custom checked icon.";

        public const string MudChip_IconColor = @"The color of the icon.";

        public const string MudChip_CloseIcon = @"Overrides the default close icon, only shown if OnClose is set.";

        public const string MudChip_DisableRipple = @"If true, disables ripple effect, ripple effect is only applied to clickable chips.";

        public const string MudChip_ChildContent = @"Child content of component.";

        public const string MudChip_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)";

        public const string MudChip_Href = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

        public const string MudChip_Target = @"The target attribute specifies where to open the link, if Href is specified. Possible values: _blank | _self | _parent | _top | framename";

        public const string MudChip_Text = @"A string you want to associate with the chip. If the ChildContent is not set this will be shown as chip text.";

        public const string MudChip_Value = @"A value that should be managed in the SelectedValues collection.
            Note: do not change the value during the chip's lifetime";

        public const string MudChip_ForceLoad = @"If true, force browser to redirect outside component router-space.";

        public const string MudChip_Default = @"If true, this chip is selected by default if used in a ChipSet.";

        public const string MudChip_Command = @"Command executed when the user clicks on an element.";

        public const string MudChip_CommandParameter = @"Command parameter.";

        public const string MudChip_OnClick = @"Chip click event, if set the chip focus, hover and click effects are applied.";

        public const string MudChip_OnClose = @"Chip delete event, if set the delete icon will be visible.";

        public const string MudChip_Class = @"User class names, separated by space.";

        public const string MudChip_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudChip_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudChip_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudChip_method_Void_Dispose__ = @"";

        public const string MudChipSet_ChildContent = @"Child content of component.";

        public const string MudChipSet_MultiSelection = @"Allows to select more than one chip.";

        public const string MudChipSet_Mandatory = @"Will not allow to deselect the selected chip in single selection mode.";

        public const string MudChipSet_AllClosable = @"Will make all chips closable.";

        public const string MudChipSet_Filter = @"Will show a check-mark for the selected components.";

        public const string MudChipSet_ReadOnly = @"Will make all chips read only.";

        public const string MudChipSet_SelectedChip = @"The currently selected chip in Choice mode";

        public const string MudChipSet_SelectedChipChanged = @"Called when the selected chip changes, in Choice mode";

        public const string MudChipSet_SelectedChips = @"The currently selected chips in Filter mode";

        public const string MudChipSet_Comparer = @"The Comparer to use for comparing selected values internally.";

        public const string MudChipSet_SelectedChipsChanged = @"Called when the selection changed, in Filter mode";

        public const string MudChipSet_SelectedValues = @"The current selected value.
            Note: make the list Clickable for item selection to work.";

        public const string MudChipSet_SelectedValuesChanged = @"Called whenever the selection changed";

        public const string MudChipSet_OnClose = @"Called when a Chip was deleted (by click on the close icon)";

        public const string MudChipSet_Class = @"User class names, separated by space.";

        public const string MudChipSet_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudChipSet_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudChipSet_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudChipSet_method_Void_OnChipDeleted_MudBlazor_MudChip_ = @"";

        public const string MudChipSet_method_Void_Dispose__ = @"";

        public const string MudCollapse_Expanded = @"If true, expands the panel, otherwise collapse it. Setting this prop enables control over the panel.";

        public const string MudCollapse_MaxHeight = @"Explicitly sets the height for the Collapse element to override the css default.";

        public const string MudCollapse_ChildContent = @"Child content of component.";

        public const string MudCollapse_OnAnimationEnd = @"";

        public const string MudCollapse_ExpandedChanged = @"";

        public const string MudCollapse_Class = @"User class names, separated by space.";

        public const string MudCollapse_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudCollapse_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudCollapse_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudCollapse_method_Void_Dispose__ = @"";

        public const string MudCollapse_method_Void_AnimationEnd__ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_SetH_Double_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_SetS_Double_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_SetL_Double_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_SetR_Int32_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_SetG_Int32_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_SetB_Int32_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_SetAlpha_Int32_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_SetAlpha_Double_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_ChangeLightness_Double_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_ColorLighten_Double_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_ColorDarken_Double_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_ColorRgbLighten__ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_ColorRgbDarken__ = @"";

        public const string MudColor_method_Boolean_HslChanged_MudBlazor_Utilities_MudColor_ = @"";

        public const string MudColor_method_MudBlazor_Utilities_MudColor_op_Implicit_System_String_ = @"";

        public const string MudColor_method_System_String_op_Explicit_MudBlazor_Utilities_MudColor_ = @"";

        public const string MudColor_method_Boolean_op_Equality_MudBlazor_Utilities_MudColor__MudBlazor_Utilities_MudColor_ = @"";

        public const string MudColor_method_Boolean_op_Inequality_MudBlazor_Utilities_MudColor__MudBlazor_Utilities_MudColor_ = @"";

        public const string MudColorPicker_DisableAlpha = @"If true, Alpha options will not be displayed and color output will be RGB, HSL or HEX and not RGBA, HSLA or HEXA.";

        public const string MudColorPicker_DisableColorField = @"If true, the color field will not be displayed.";

        public const string MudColorPicker_DisableModeSwitch = @"If true, the switch to change color mode will not be displayed.";

        public const string MudColorPicker_DisableInputs = @"If true, textfield inputs and color mode switch will not be displayed.";

        public const string MudColorPicker_DisableSliders = @"If true, hue and alpha sliders will not be displayed.";

        public const string MudColorPicker_DisablePreview = @"If true, the preview color box will not be displayed, note that the preview color functions as a button as well for collection colors.";

        public const string MudColorPicker_ColorPickerMode = @"The initial mode (RGB, HSL or HEX) the picker should open. Defaults to RGB";

        public const string MudColorPicker_ColorPickerView = @"The initial view of the picker. Views can be changed if toolbar is enabled.";

        public const string MudColorPicker_UpdateBindingIfOnlyHSLChanged = @"If true, binding changes occurred also when HSL values changed without a corresponding RGB change";

        public const string MudColorPicker_Value = @"A two-way bindable property representing the selected value. MudColor is a utility class that can be used to get the value as RGB, HSL, hex or other value";

        public const string MudColorPicker_ValueChanged = @"";

        public const string MudColorPicker_Palette = @"MudColor list of predefined colors. The first five colors will show up as the quick colors on preview dot click.";

        public const string MudColorPicker_DisableDragEffect = @"When set to true, no mouse move events in the spectrum mode will be captured, so the selector circle won't fellow the mouse. 
            Under some conditions like long latency the visual representation might not reflect the user behaviour anymore. So, it can be disabled 
            Enabled by default";

        public const string MudColorPicker_CloseIcon = @"Custom close icon.";

        public const string MudColorPicker_SpectrumIcon = @"Custom spectrum icon.";

        public const string MudColorPicker_GridIcon = @"Custom grid icon.";

        public const string MudColorPicker_PaletteIcon = @"Custom palette icon.";

        public const string MudColorPicker_ImportExportIcon = @"Custom import/export icont.";

        public const string MudColorPicker_InputIcon = @"Sets the icon of the input text field";

        public const string MudColorPicker_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudColorPicker_AdornmentIcon = @"Sets the icon of the input text field";

        public const string MudColorPicker_AdornmentAriaLabel = @"Sets the aria-label of the input text field icon";

        public const string MudColorPicker_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudColorPicker_PickerOpened = @"Fired when the dropdown / dialog opens";

        public const string MudColorPicker_PickerClosed = @"Fired when the dropdown / dialog closes";

        public const string MudColorPicker_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.";

        public const string MudColorPicker_Square = @"If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.";

        public const string MudColorPicker_ReadOnly = @"If true, no date or time can be defined.";

        public const string MudColorPicker_Rounded = @"If true, border-radius is set to theme default when in Static Mode.";

        public const string MudColorPicker_HelperText = @"If string has value, HelperText will be applied.";

        public const string MudColorPicker_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudColorPicker_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudColorPicker_Clearable = @"Show clear button.";

        public const string MudColorPicker_Disabled = @"If true, the picker will be disabled.";

        public const string MudColorPicker_Editable = @"If true, the picker will be editable.";

        public const string MudColorPicker_DisableToolbar = @"Hide toolbar and show only date/time views.";

        public const string MudColorPicker_ToolBarClass = @"User class names for picker's ToolBar, separated by space";

        public const string MudColorPicker_PickerVariant = @"Picker container option";

        public const string MudColorPicker_InputVariant = @"Variant of the text input";

        public const string MudColorPicker_Variant = @"Variant of the text input";

        public const string MudColorPicker_Adornment = @"Sets if the icon will be att start or end, set to false to disable.";

        public const string MudColorPicker_Orientation = @"What orientation to render in when in PickerVariant Static Mode.";

        public const string MudColorPicker_IconSize = @"Sets the Icon Size.";

        public const string MudColorPicker_Color = @"The color of the toolbar, selected and active. It supports the theme colors.";

        public const string MudColorPicker_AllowKeyboardInput = @"Changes the cursor appearance.";

        public const string MudColorPicker_TextChanged = @"Fired when the text changes.";

        public const string MudColorPicker_Text = @"The currently selected string value (two-way bindable)";

        public const string MudColorPicker_ClassActions = @"CSS class that will be applied to the action buttons container";

        public const string MudColorPicker_PickerActions = @"Define the action buttons here";

        public const string MudColorPicker_Margin = @"Will adjust vertical spacing.";

        public const string MudColorPicker_Mask = @"A mask for structured input of the date (requires Editable to be true).";

        public const string MudColorPicker_AnchorOrigin = @"Gets or sets the origin of the popover's anchor. Defaults to Origin.TopLeft";

        public const string MudColorPicker_TransformOrigin = @"Gets or sets the origin of the popover's transform. Defaults to Origin.TopLeft";

        public const string MudColorPicker_Required = @"If true, this form input is required to be filled out.";

        public const string MudColorPicker_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudColorPicker_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudColorPicker_Error = @"If true, the label will be displayed in an error state.";

        public const string MudColorPicker_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudColorPicker_Converter = @"The generic converter of the component.";

        public const string MudColorPicker_Culture = @"The culture of the component.";

        public const string MudColorPicker_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudColorPicker_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudColorPicker_Class = @"User class names, separated by space.";

        public const string MudColorPicker_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudColorPicker_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudColorPicker_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudColorPicker_method_Void_ChangeMode__ = @"";

        public const string MudColorPicker_method_System_Threading_Tasks_Task_ChangeView_MudBlazor_ColorPickerView_ = @"";

        public const string MudColorPicker_method_Void_SetR_Int32_ = @"
            <summary>
            Set the R (red) component of the color picker
            </summary>
            <param name=""value"">A value between 0 (no red) or 255 (max red)</param>
        ";

        public const string MudColorPicker_method_Void_SetG_Int32_ = @"
            <summary>
            Set the G (green) component of the color picker
            </summary>
            <param name=""value"">A value between 0 (no green) or 255 (max green)</param>
        ";

        public const string MudColorPicker_method_Void_SetB_Int32_ = @"
            <summary>
            Set the B (blue) component of the color picker
            </summary>
            <param name=""value"">A value between 0 (no blue) or 255 (max blue)</param>
        ";

        public const string MudColorPicker_method_Void_SetH_Double_ = @"
            <summary>
            Set the H (hue) component of the color picker
            </summary>
            <param name=""value"">A value between 0 and 360 (degrees)</param>
        ";

        public const string MudColorPicker_method_Void_SetS_Double_ = @"
            <summary>
            Set the S (saturation) component of the color picker
            </summary>
            <param name=""value"">A value between 0.0 (no saturation) and 1.0 (max saturation)</param>
        ";

        public const string MudColorPicker_method_Void_SetL_Double_ = @"
            <summary>
            Set the L (Lightness) component of the color picker
            </summary>
            <param name=""value"">A value between 0.0 (no light, black) and 1.0 (max light, white)</param>
        ";

        public const string MudColorPicker_method_Void_SetAlpha_Double_ = @"
            <summary>
            Set the Alpha (transparency) component of the color picker
            </summary>
            <param name=""value"">A value between 0.0 (full transparent) and 1.0 (solid) </param>
        ";

        public const string MudColorPicker_method_Void_SetAlpha_Int32_ = @"
            <summary>
            Set the Alpha (transparency) component of the color picker
            </summary>
            <param name=""value"">A value between 0 (full transparent) and 1 (solid) </param>
        ";

        public const string MudColorPicker_method_Void_SetInputString_System_String_ = @"
            <summary>
            Set the color of the picker based on the string input
            </summary>
            <param name=""input"">Accepting different formats for a color representation such as rbg, rgba, #</param>
        ";

        public const string MudColorPicker_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string MudColorPicker_method_Void_ToggleOpen__ = @"";

        public const string MudColorPicker_method_Void_Close_Boolean_ = @"";

        public const string MudColorPicker_method_Void_Open__ = @"";

        public const string MudColorPicker_method_Void_Clear_Boolean_ = @"";

        public const string MudColorPicker_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudColorPicker_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudColorPicker_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudColorPicker_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudColorPicker_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudColorPicker_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudColorPicker_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudColorPicker_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudColumn_Value = @"Specifies the name of the object's property bound to the column";

        public const string MudColumn_ValueChanged = @"";

        public const string MudColumn_FooterValue = @"";

        public const string MudColumn_FooterText = @"Used if no FooterValue is available";

        public const string MudColumn_DataFormatString = @"Specifies which string format should be used.";

        public const string MudColumn_ReadOnly = @"";

        public const string MudColumn_Visible = @"";

        public const string MudColumn_HeaderText = @"";

        public const string MudComponentBase_Class = @"User class names, separated by space.";

        public const string MudComponentBase_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudComponentBase_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudComponentBase_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudContainer_Fixed = @"Set the max-width to match the min-width of the current breakpoint. This is useful if you'd prefer to design for a fixed set of sizes instead of trying to accommodate a fully fluid viewport. It's fluid by default.";

        public const string MudContainer_MaxWidth = @"Determine the max-width of the container. The container width grows with the size of the screen. Set to false to disable maxWidth.";

        public const string MudContainer_ChildContent = @"Child content of component.";

        public const string MudContainer_Class = @"User class names, separated by space.";

        public const string MudContainer_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudContainer_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudContainer_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDataGrid_SelectedItemChanged = @"Callback is called when a row has been clicked and returns the selected item.";

        public const string MudDataGrid_SelectedItemsChanged = @"Callback is called whenever items are selected or deselected in multi selection mode.";

        public const string MudDataGrid_RowClick = @"Callback is called whenever a row is clicked.";

        public const string MudDataGrid_StartedEditingItem = @"Callback is called when an item has begun to be edited. Returns the item being edited.";

        public const string MudDataGrid_CancelledEditingItem = @"Callback is called when the process of editing an item has been cancelled. Returns the item which was previously in edit mode.";

        public const string MudDataGrid_CommittedItemChanges = @"Callback is called when the changes to an item are committed. Returns the item whose changes were committed.";

        public const string MudDataGrid_SortMode = @"Controls whether data in the DataGrid can be sorted. This is overridable by each column.";

        public const string MudDataGrid_Filterable = @"Controls whether data in the DataGrid can be filtered. This is overridable by each column.";

        public const string MudDataGrid_Hideable = @"Controls whether columns in the DataGrid can be hidden. This is overridable by each column.";

        public const string MudDataGrid_ShowColumnOptions = @"Controls whether to hide or show the column options. This is overridable by each column.";

        public const string MudDataGrid_Breakpoint = @"At what breakpoint the table should switch to mobile layout. Takes None, Xs, Sm, Md, Lg and Xl the default behavior is breaking on Xs.";

        public const string MudDataGrid_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

        public const string MudDataGrid_Square = @"Set true to disable rounded corners";

        public const string MudDataGrid_Outlined = @"If true, table will be outlined.";

        public const string MudDataGrid_Bordered = @"If true, table's cells will have left/right borders.";

        public const string MudDataGrid_ColGroup = @"Specifies a group of one or more columns in a table for formatting.
            Ex:
            table
                colgroup
                   col span=""2"" style=""background-color:red""
                   col style=""background-color:yellow""
                 colgroup
                 header
                 body
            table";

        public const string MudDataGrid_Dense = @"Set true for rows with a narrow height";

        public const string MudDataGrid_Hover = @"Set true to see rows hover on mouse-over.";

        public const string MudDataGrid_Striped = @"If true, striped table rows will be used.";

        public const string MudDataGrid_FixedHeader = @"When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.";

        public const string MudDataGrid_FixedFooter = @"When true, the footer will be visible is not scrolled to the bottom. Note: set Height to make the table scrollable.";

        public const string MudDataGrid_ShowFilterIcons = @"";

        public const string MudDataGrid_FilterMode = @"";

        public const string MudDataGrid_FilterCaseSensitivity = @"";

        public const string MudDataGrid_FilterTemplate = @"";

        public const string MudDataGrid_FilterDefinitions = @"The list of FilterDefinitions that have been added to the data grid. FilterDefinitions are managed by the data
            grid automatically when using the built in filter UI. You can also programmatically manage these definitions
            through this collection.";

        public const string MudDataGrid_SortDefinitions = @"The list of SortDefinitions that have been added to the data grid. SortDefinitions are managed by the data
            grid automatically when using the built in filter UI. You can also programmatically manage these definitions
            through this collection.";

        public const string MudDataGrid_Virtualize = @"If true, the results are displayed in a Virtualize component, allowing a boost in rendering speed.";

        public const string MudDataGrid_OverscanCount = @"Gets or sets a value that determines how many additional items will be rendered
            before and after the visible region. This help to reduce the frequency of rendering
            during scrolling. However, higher values mean that more elements will be present
            in the page.
            Only used for virtualization.";

        public const string MudDataGrid_RowClass = @"CSS class for the table rows. Note, many CSS settings are overridden by MudTd though";

        public const string MudDataGrid_RowStyle = @"CSS styles for the table rows. Note, many CSS settings are overridden by MudTd though";

        public const string MudDataGrid_RowClassFunc = @"Returns the class that will get joined with RowClass. Takes the current item and row index.";

        public const string MudDataGrid_RowStyleFunc = @"Returns the class that will get joined with RowClass. Takes the current item and row index.";

        public const string MudDataGrid_MultiSelection = @"Set to true to enable selection of multiple rows.";

        public const string MudDataGrid_EditMode = @"When the grid is not read only, you can specify what type of editing mode to use.";

        public const string MudDataGrid_EditTrigger = @"Allows you to specify the action that will trigger an edit when the EditMode is Form.";

        public const string MudDataGrid_EditDialogOptions = @"Fine tune the edit dialog.";

        public const string MudDataGrid_Items = @"The data to display in the table. MudTable will render one row per item";

        public const string MudDataGrid_Loading = @"Show a loading animation, if true.";

        public const string MudDataGrid_CanCancelEdit = @"Define if Cancel button is present or not for inline editing.";

        public const string MudDataGrid_LoadingProgressColor = @"The color of the loading progress if used. It supports the theme colors.";

        public const string MudDataGrid_ToolBarContent = @"Optional. Add any kind of toolbar to this render fragment.";

        public const string MudDataGrid_HorizontalScrollbar = @"Defines if the table has a horizontal scrollbar.";

        public const string MudDataGrid_ColumnResizeMode = @"Defines if columns of the grid can be resized.";

        public const string MudDataGrid_HeaderClass = @"Add a class to the thead tag";

        public const string MudDataGrid_Height = @"Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the
            attribute 'height' accepts, i.e. 500px.";

        public const string MudDataGrid_FooterClass = @"Add a class to the tfoot tag";

        public const string MudDataGrid_QuickFilter = @"A function that returns whether or not an item should be displayed in the table. You can use this to implement your own search function.";

        public const string MudDataGrid_Header = @"Allows adding a custom header beyond that specified in the Column component. Add HeaderCell
            components to add a custom header.";

        public const string MudDataGrid_Columns = @"The Columns that make up the data grid. Add Column components to this RenderFragment.";

        public const string MudDataGrid_Culture = @"The culture used to represent numeric columns and his filtering input fields.
            Each column can override this DataGrid Culture.";

        public const string MudDataGrid_ChildRowContent = @"Row Child content of the component.";

        public const string MudDataGrid_NoRecordsContent = @"Defines the table body content when there are no matching records found";

        public const string MudDataGrid_LoadingContent = @"Defines the table body content  the table has no rows and is loading";

        public const string MudDataGrid_PagerContent = @"Add MudTablePager here to enable breaking the rows in to multiple pages.";

        public const string MudDataGrid_ServerData = @"Supply an async function which (re)loads filtered, paginated and sorted data from server.
            Table will await this func and update based on the returned TableData.
            Used only with ServerData";

        public const string MudDataGrid_RowsPerPage = @"If the table has more items than this number, it will break the rows into pages of said size.
            Note: requires a MudTablePager in PagerContent.";

        public const string MudDataGrid_CurrentPage = @"The page index of the currently displayed page (Zero based). Usually called by MudTablePager.
            Note: requires a MudTablePager in PagerContent.";

        public const string MudDataGrid_ReadOnly = @"Locks Inline Edit mode, if true.";

        public const string MudDataGrid_SelectedItems = @"If MultiSelection is true, this returns the currently selected items. You can bind this property and the initial content of the HashSet you bind it to will cause these rows to be selected initially.";

        public const string MudDataGrid_SelectedItem = @"Returns the item which was last clicked on in single selection mode (that is, if MultiSelection is false)";

        public const string MudDataGrid_Groupable = @"Determines whether grouping of columns is allowed in the data grid.";

        public const string MudDataGrid_GroupExpanded = @"If set, a grouped column will be expanded by default.";

        public const string MudDataGrid_GroupClass = @"CSS class for the groups.";

        public const string MudDataGrid_GroupStyle = @"CSS styles for the groups.";

        public const string MudDataGrid_ShowMenuIcon = @"When true, displays the built-in menu icon in the header of the data grid.";

        public const string MudDataGrid_Class = @"User class names, separated by space.";

        public const string MudDataGrid_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDataGrid_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDataGrid_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDataGrid_method_Int32_GetFilteredItemsCount__ = @"
            <summary>
            Gets the total count of filtered items in the data grid.
            </summary>
            <returns></returns>
        ";

        public const string MudDataGrid_method_Void_NavigateTo_MudBlazor_Page_ = @"
            <summary>
            Navigates to a specific page when the data grid has an attached data pager.
            </summary>
            <param name=""page""></param>
        ";

        public const string MudDataGrid_method_System_Threading_Tasks_Task_SetRowsPerPageAsync_Int32_ = @"
            <summary>
            Sets the rows displayed per page when the data grid has an attached data pager.
            </summary>
            <param name=""size""></param>
        ";

        public const string MudDataGrid_method_System_Threading_Tasks_Task_SetSortAsync_System_String__MudBlazor_SortDirection__System_Func_2_T_System_Object__ = @"
            <summary>
            Sets the sort on the data grid.
            </summary>
            <param name=""field"">The field.</param>
            <param name=""direction"">The direction.</param>
            <param name=""sortFunc"">The sort function.</param>
        ";

        public const string MudDataGrid_method_System_Threading_Tasks_Task_ExtendSortAsync_System_String__MudBlazor_SortDirection__System_Func_2_T_System_Object__ = @"";

        public const string MudDataGrid_method_System_Threading_Tasks_Task_RemoveSortAsync_System_String_ = @"";

        public const string MudDataGrid_method_System_Threading_Tasks_Task_SetSelectedItemAsync_T_ = @"
            <summary>
            Set the currently selected item in the data grid.
            </summary>
            <param name=""item""></param>
            <returns></returns>
        ";

        public const string MudDataGrid_method_System_Threading_Tasks_Task_SetEditingItemAsync_T_ = @"
            <summary>
            Set an item to be edited.
            </summary>
            <param name=""item""></param>
            <returns></returns>
        ";

        public const string MudDataGrid_method_System_Threading_Tasks_Task_CancelEditingItemAsync__ = @"
            <summary>
            Cancel editing an item.
            </summary>
        ";

        public const string MudDataGrid_method_Void_ToggleFiltersMenu__ = @"
            <summary>
            Opens or closes the filter panel.
            </summary>
        ";

        public const string MudDataGrid_method_System_Threading_Tasks_Task_ReloadServerData__ = @"
            <summary>
            Call this to reload the server-filtered, -sorted and -paginated items
            </summary>
        ";

        public const string MudDataGrid_method_Void_OpenFilters__ = @"
            <summary>
            Opens the filter panel.
            </summary>
        ";

        public const string MudDataGrid_method_Void_ShowColumnsPanel__ = @"";

        public const string MudDataGrid_method_Void_HideColumnsPanel__ = @"";

        public const string MudDataGrid_method_Void_GroupItems__ = @"";

        public const string MudDataGrid_method_Void_ExpandAllGroups__ = @"";

        public const string MudDataGrid_method_Void_CollapseAllGroups__ = @"";

        public const string MudDataGridPager_DisableRowsPerPage = @"Set true to hide the part of the pager which allows to change the page size.";

        public const string MudDataGridPager_Disabled = @"Set true to disable user interaction with the backward/forward buttons
            and the part of the pager which allows to change the page size.";

        public const string MudDataGridPager_PageSizeOptions = @"Define a list of available page size options for the user to choose from";

        public const string MudDataGridPager_InfoFormat = @"Format string for the display of the current page, which you can localize to your language. Available variables are:
            {first_item}, {last_item} and {all_items} which will replaced with the indices of the page's first and last item, as well as the total number of items.
            Default: ""{first_item}-{last_item} of {all_items}"" which is transformed into ""0-25 of 77"".";

        public const string MudDataGridPager_RowsPerPageString = @"The localizable ""Rows per page:"" text.";

        public const string MudDataGridPager_Class = @"User class names, separated by space.";

        public const string MudDataGridPager_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDataGridPager_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDataGridPager_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDataGridPager_method_Void_Dispose__ = @"";

        public const string MudDatePicker_DateChanged = @"Fired when the DateFormat changes.";

        public const string MudDatePicker_Date = @"The currently selected date (two-way bindable). If null, then nothing was selected.";

        public const string MudDatePicker_MaxDate = @"Max selectable date.";

        public const string MudDatePicker_MinDate = @"Min selectable date.";

        public const string MudDatePicker_OpenTo = @"First view to show in the MudDatePicker.";

        public const string MudDatePicker_DateFormat = @"String Format for selected date view";

        public const string MudDatePicker_FirstDayOfWeek = @"Defines on which day the week starts. Depends on the value of Culture.";

        public const string MudDatePicker_PickerMonth = @"The current month of the date picker (two-way bindable). This changes when the user browses through the calender.
            The month is represented as a DateTime which is always the first day of that month. You can also set this to define which month is initially shown. If not set, the current month is shown.";

        public const string MudDatePicker_PickerMonthChanged = @"Fired when the date changes.";

        public const string MudDatePicker_ClosingDelay = @"Sets the amount of time in milliseconds to wait before closing the picker. This helps the user see that the date was selected before the popover disappears.";

        public const string MudDatePicker_DisplayMonths = @"Number of months to display in the calendar";

        public const string MudDatePicker_MaxMonthColumns = @"Maximum number of months in one row";

        public const string MudDatePicker_StartMonth = @"Start month when opening the picker.";

        public const string MudDatePicker_ShowWeekNumbers = @"Display week numbers according to the Culture parameter. If no culture is defined, CultureInfo.CurrentCulture will be used.";

        public const string MudDatePicker_TitleDateFormat = @"Format of the selected date in the title. By default, this is ""ddd, dd MMM"" which abbreviates day and month names. 
            For instance, display the long names like this ""dddd, dd. MMMM"".";

        public const string MudDatePicker_AutoClose = @"If AutoClose is set to true and PickerActions are defined, selecting a day will close the MudDatePicker.";

        public const string MudDatePicker_IsDateDisabledFunc = @"Function to determine whether a date is disabled";

        public const string MudDatePicker_AdditionalDateClassesFunc = @"Function to conditionally apply new classes to specific days";

        public const string MudDatePicker_PreviousIcon = @"Custom previous icon.";

        public const string MudDatePicker_NextIcon = @"Custom next icon.";

        public const string MudDatePicker_FixYear = @"Set a predefined fix year - no year can be selected";

        public const string MudDatePicker_FixMonth = @"Set a predefined fix month - no month can be selected";

        public const string MudDatePicker_FixDay = @"Set a predefined fix day - no day can be selected";

        public const string MudDatePicker_InputIcon = @"Sets the icon of the input text field";

        public const string MudDatePicker_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudDatePicker_AdornmentIcon = @"Sets the icon of the input text field";

        public const string MudDatePicker_AdornmentAriaLabel = @"Sets the aria-label of the input text field icon";

        public const string MudDatePicker_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudDatePicker_PickerOpened = @"Fired when the dropdown / dialog opens";

        public const string MudDatePicker_PickerClosed = @"Fired when the dropdown / dialog closes";

        public const string MudDatePicker_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.";

        public const string MudDatePicker_Square = @"If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.";

        public const string MudDatePicker_ReadOnly = @"If true, no date or time can be defined.";

        public const string MudDatePicker_Rounded = @"If true, border-radius is set to theme default when in Static Mode.";

        public const string MudDatePicker_HelperText = @"If string has value, HelperText will be applied.";

        public const string MudDatePicker_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudDatePicker_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudDatePicker_Clearable = @"Show clear button.";

        public const string MudDatePicker_Disabled = @"If true, the picker will be disabled.";

        public const string MudDatePicker_Editable = @"If true, the picker will be editable.";

        public const string MudDatePicker_DisableToolbar = @"Hide toolbar and show only date/time views.";

        public const string MudDatePicker_ToolBarClass = @"User class names for picker's ToolBar, separated by space";

        public const string MudDatePicker_PickerVariant = @"Picker container option";

        public const string MudDatePicker_InputVariant = @"Variant of the text input";

        public const string MudDatePicker_Variant = @"Variant of the text input";

        public const string MudDatePicker_Adornment = @"Sets if the icon will be att start or end, set to false to disable.";

        public const string MudDatePicker_Orientation = @"What orientation to render in when in PickerVariant Static Mode.";

        public const string MudDatePicker_IconSize = @"Sets the Icon Size.";

        public const string MudDatePicker_Color = @"The color of the toolbar, selected and active. It supports the theme colors.";

        public const string MudDatePicker_AllowKeyboardInput = @"Changes the cursor appearance.";

        public const string MudDatePicker_TextChanged = @"Fired when the text changes.";

        public const string MudDatePicker_Text = @"The currently selected string value (two-way bindable)";

        public const string MudDatePicker_ClassActions = @"CSS class that will be applied to the action buttons container";

        public const string MudDatePicker_PickerActions = @"Define the action buttons here";

        public const string MudDatePicker_Margin = @"Will adjust vertical spacing.";

        public const string MudDatePicker_Mask = @"A mask for structured input of the date (requires Editable to be true).";

        public const string MudDatePicker_AnchorOrigin = @"Gets or sets the origin of the popover's anchor. Defaults to Origin.TopLeft";

        public const string MudDatePicker_TransformOrigin = @"Gets or sets the origin of the popover's transform. Defaults to Origin.TopLeft";

        public const string MudDatePicker_Required = @"If true, this form input is required to be filled out.";

        public const string MudDatePicker_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudDatePicker_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudDatePicker_Error = @"If true, the label will be displayed in an error state.";

        public const string MudDatePicker_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudDatePicker_Converter = @"The generic converter of the component.";

        public const string MudDatePicker_Culture = @"The culture of the component.";

        public const string MudDatePicker_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudDatePicker_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudDatePicker_Class = @"User class names, separated by space.";

        public const string MudDatePicker_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDatePicker_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDatePicker_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDatePicker_method_Void_Clear_Boolean_ = @"";

        public const string MudDatePicker_method_Void_GoToDate__ = @"
            <summary>
            Scrolls to the date.
            </summary>
        ";

        public const string MudDatePicker_method_System_Threading_Tasks_Task_GoToDate_System_DateTime__Boolean_ = @"
            <summary>
            Scrolls to the defined date.
            </summary>
        ";

        public const string MudDatePicker_method_Void_ScrollToYear__ = @"";

        public const string MudDatePicker_method_Void_ToggleOpen__ = @"";

        public const string MudDatePicker_method_Void_Close_Boolean_ = @"";

        public const string MudDatePicker_method_Void_Open__ = @"";

        public const string MudDatePicker_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudDatePicker_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudDatePicker_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudDatePicker_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudDatePicker_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudDatePicker_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudDatePicker_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudDatePicker_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudDateRangePicker_DateRangeChanged = @"Fired when the DateFormat changes.";

        public const string MudDateRangePicker_DateRange = @"The currently selected range (two-way bindable). If null, then nothing was selected.";

        public const string MudDateRangePicker_MaxDate = @"Max selectable date.";

        public const string MudDateRangePicker_MinDate = @"Min selectable date.";

        public const string MudDateRangePicker_OpenTo = @"First view to show in the MudDatePicker.";

        public const string MudDateRangePicker_DateFormat = @"String Format for selected date view";

        public const string MudDateRangePicker_FirstDayOfWeek = @"Defines on which day the week starts. Depends on the value of Culture.";

        public const string MudDateRangePicker_PickerMonth = @"The current month of the date picker (two-way bindable). This changes when the user browses through the calender.
            The month is represented as a DateTime which is always the first day of that month. You can also set this to define which month is initially shown. If not set, the current month is shown.";

        public const string MudDateRangePicker_PickerMonthChanged = @"Fired when the date changes.";

        public const string MudDateRangePicker_ClosingDelay = @"Sets the amount of time in milliseconds to wait before closing the picker. This helps the user see that the date was selected before the popover disappears.";

        public const string MudDateRangePicker_DisplayMonths = @"Number of months to display in the calendar";

        public const string MudDateRangePicker_MaxMonthColumns = @"Maximum number of months in one row";

        public const string MudDateRangePicker_StartMonth = @"Start month when opening the picker.";

        public const string MudDateRangePicker_ShowWeekNumbers = @"Display week numbers according to the Culture parameter. If no culture is defined, CultureInfo.CurrentCulture will be used.";

        public const string MudDateRangePicker_TitleDateFormat = @"Format of the selected date in the title. By default, this is ""ddd, dd MMM"" which abbreviates day and month names. 
            For instance, display the long names like this ""dddd, dd. MMMM"".";

        public const string MudDateRangePicker_AutoClose = @"If AutoClose is set to true and PickerActions are defined, selecting a day will close the MudDatePicker.";

        public const string MudDateRangePicker_IsDateDisabledFunc = @"Function to determine whether a date is disabled";

        public const string MudDateRangePicker_AdditionalDateClassesFunc = @"Function to conditionally apply new classes to specific days";

        public const string MudDateRangePicker_PreviousIcon = @"Custom previous icon.";

        public const string MudDateRangePicker_NextIcon = @"Custom next icon.";

        public const string MudDateRangePicker_FixYear = @"Set a predefined fix year - no year can be selected";

        public const string MudDateRangePicker_FixMonth = @"Set a predefined fix month - no month can be selected";

        public const string MudDateRangePicker_FixDay = @"Set a predefined fix day - no day can be selected";

        public const string MudDateRangePicker_InputIcon = @"Sets the icon of the input text field";

        public const string MudDateRangePicker_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudDateRangePicker_AdornmentIcon = @"Sets the icon of the input text field";

        public const string MudDateRangePicker_AdornmentAriaLabel = @"Sets the aria-label of the input text field icon";

        public const string MudDateRangePicker_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudDateRangePicker_PickerOpened = @"Fired when the dropdown / dialog opens";

        public const string MudDateRangePicker_PickerClosed = @"Fired when the dropdown / dialog closes";

        public const string MudDateRangePicker_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.";

        public const string MudDateRangePicker_Square = @"If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.";

        public const string MudDateRangePicker_ReadOnly = @"If true, no date or time can be defined.";

        public const string MudDateRangePicker_Rounded = @"If true, border-radius is set to theme default when in Static Mode.";

        public const string MudDateRangePicker_HelperText = @"If string has value, HelperText will be applied.";

        public const string MudDateRangePicker_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudDateRangePicker_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudDateRangePicker_Clearable = @"Show clear button.";

        public const string MudDateRangePicker_Disabled = @"If true, the picker will be disabled.";

        public const string MudDateRangePicker_Editable = @"If true, the picker will be editable.";

        public const string MudDateRangePicker_DisableToolbar = @"Hide toolbar and show only date/time views.";

        public const string MudDateRangePicker_ToolBarClass = @"User class names for picker's ToolBar, separated by space";

        public const string MudDateRangePicker_PickerVariant = @"Picker container option";

        public const string MudDateRangePicker_InputVariant = @"Variant of the text input";

        public const string MudDateRangePicker_Variant = @"Variant of the text input";

        public const string MudDateRangePicker_Adornment = @"Sets if the icon will be att start or end, set to false to disable.";

        public const string MudDateRangePicker_Orientation = @"What orientation to render in when in PickerVariant Static Mode.";

        public const string MudDateRangePicker_IconSize = @"Sets the Icon Size.";

        public const string MudDateRangePicker_Color = @"The color of the toolbar, selected and active. It supports the theme colors.";

        public const string MudDateRangePicker_AllowKeyboardInput = @"Changes the cursor appearance.";

        public const string MudDateRangePicker_TextChanged = @"Fired when the text changes.";

        public const string MudDateRangePicker_Text = @"The currently selected string value (two-way bindable)";

        public const string MudDateRangePicker_ClassActions = @"CSS class that will be applied to the action buttons container";

        public const string MudDateRangePicker_PickerActions = @"Define the action buttons here";

        public const string MudDateRangePicker_Margin = @"Will adjust vertical spacing.";

        public const string MudDateRangePicker_Mask = @"A mask for structured input of the date (requires Editable to be true).";

        public const string MudDateRangePicker_AnchorOrigin = @"Gets or sets the origin of the popover's anchor. Defaults to Origin.TopLeft";

        public const string MudDateRangePicker_TransformOrigin = @"Gets or sets the origin of the popover's transform. Defaults to Origin.TopLeft";

        public const string MudDateRangePicker_Required = @"If true, this form input is required to be filled out.";

        public const string MudDateRangePicker_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudDateRangePicker_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudDateRangePicker_Error = @"If true, the label will be displayed in an error state.";

        public const string MudDateRangePicker_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudDateRangePicker_Converter = @"The generic converter of the component.";

        public const string MudDateRangePicker_Culture = @"The culture of the component.";

        public const string MudDateRangePicker_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudDateRangePicker_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudDateRangePicker_Class = @"User class names, separated by space.";

        public const string MudDateRangePicker_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDateRangePicker_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDateRangePicker_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDateRangePicker_method_System_Threading_Tasks_ValueTask_FocusStartAsync__ = @"
            <summary>
            Focuses the start date of MudDateRangePicker
            </summary>
            <returns></returns>
        ";

        public const string MudDateRangePicker_method_System_Threading_Tasks_ValueTask_SelectStartAsync__ = @"
            <summary>
            Selects the start date of MudDateRangePicker
            </summary>
            <returns></returns>
        ";

        public const string MudDateRangePicker_method_System_Threading_Tasks_ValueTask_SelectRangeStartAsync_Int32__Int32_ = @"
            <summary>
            Selects the specified range of the start date text
            </summary>
            <param name=""pos1"">Start position of the selection</param>
            <param name=""pos2"">End position of the selection</param>
            <returns></returns>
        ";

        public const string MudDateRangePicker_method_System_Threading_Tasks_ValueTask_FocusEndAsync__ = @"
            <summary>
            Focuses the end date of MudDateRangePicker
            </summary>
            <returns></returns>
        ";

        public const string MudDateRangePicker_method_System_Threading_Tasks_ValueTask_SelectEndAsync__ = @"
            <summary>
            Selects the end date of MudDateRangePicker
            </summary>
            <returns></returns>
        ";

        public const string MudDateRangePicker_method_System_Threading_Tasks_ValueTask_SelectRangeEndAsync_Int32__Int32_ = @"
            <summary>
            Selects the specified range of the end date text
            </summary>
            <param name=""pos1"">Start position of the selection</param>
            <param name=""pos2"">End position of the selection</param>
            <returns></returns>
        ";

        public const string MudDateRangePicker_method_Void_Clear_Boolean_ = @"";

        public const string MudDateRangePicker_method_Void_ScrollToYear__ = @"";

        public const string MudDateRangePicker_method_Void_ToggleOpen__ = @"";

        public const string MudDateRangePicker_method_Void_Close_Boolean_ = @"";

        public const string MudDateRangePicker_method_Void_Open__ = @"";

        public const string MudDateRangePicker_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudDateRangePicker_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudDateRangePicker_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudDateRangePicker_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudDateRangePicker_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudDateRangePicker_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudDateRangePicker_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudDateRangePicker_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudDebouncedInput_DebounceInterval = @"Interval to be awaited in milliseconds before changing the Text value";

        public const string MudDebouncedInput_OnDebounceIntervalElapsed = @"callback to be called when the debounce interval has elapsed
            receives the Text as a parameter";

        public const string MudDebouncedInput_Disabled = @"If true, the input element will be disabled.";

        public const string MudDebouncedInput_ReadOnly = @"If true, the input will be read-only.";

        public const string MudDebouncedInput_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudDebouncedInput_Immediate = @"If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.";

        public const string MudDebouncedInput_DisableUnderLine = @"If true, the input will not have an underline.";

        public const string MudDebouncedInput_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudDebouncedInput_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudDebouncedInput_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudDebouncedInput_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudDebouncedInput_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudDebouncedInput_OnlyValidateIfDirty = @"The validation is only triggered if the user has changed the input value at least once. By default, it is false";

        public const string MudDebouncedInput_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudDebouncedInput_AdornmentAriaLabel = @"The aria-label of the adornment.";

        public const string MudDebouncedInput_IconSize = @"The Icon Size.";

        public const string MudDebouncedInput_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudDebouncedInput_Variant = @"Variant to use.";

        public const string MudDebouncedInput_Margin = @"Will adjust vertical spacing.";

        public const string MudDebouncedInput_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudDebouncedInput_Counter = @"If set, will display the counter, value 0 will display current count but no stop count.";

        public const string MudDebouncedInput_MaxLength = @"Maximum number of characters that the input will accept";

        public const string MudDebouncedInput_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudDebouncedInput_AutoFocus = @"If true the input will focus automatically.";

        public const string MudDebouncedInput_Lines = @"A multiline input (textarea) will be shown, if set to more than one line.";

        public const string MudDebouncedInput_Text = @"The text to be displayed.";

        public const string MudDebouncedInput_TextUpdateSuppression = @"When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.";

        public const string MudDebouncedInput_InputMode = @"Hints at the type of data that might be entered by the user while editing the input";

        public const string MudDebouncedInput_Pattern = @"The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
            Not Supported in multline input";

        public const string MudDebouncedInput_TextChanged = @"Fired when the text value changes.";

        public const string MudDebouncedInput_OnBlur = @"Fired when the element loses focus.";

        public const string MudDebouncedInput_OnInternalInputChanged = @"Fired when the element changes internally its text value.";

        public const string MudDebouncedInput_OnKeyDown = @"Fired on the KeyDown event.";

        public const string MudDebouncedInput_KeyDownPreventDefault = @"Prevent the default action for the KeyDown event.";

        public const string MudDebouncedInput_OnKeyPress = @"Fired on the KeyPress event.";

        public const string MudDebouncedInput_KeyPressPreventDefault = @"Prevent the default action for the KeyPress event.";

        public const string MudDebouncedInput_OnKeyUp = @"Fired on the KeyUp event.";

        public const string MudDebouncedInput_KeyUpPreventDefault = @"Prevent the default action for the KeyUp event.";

        public const string MudDebouncedInput_ValueChanged = @"Fired when the Value property changes.";

        public const string MudDebouncedInput_Value = @"The value of this input element.";

        public const string MudDebouncedInput_Format = @"Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans";

        public const string MudDebouncedInput_Required = @"If true, this form input is required to be filled out.";

        public const string MudDebouncedInput_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudDebouncedInput_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudDebouncedInput_Error = @"If true, the label will be displayed in an error state.";

        public const string MudDebouncedInput_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudDebouncedInput_Converter = @"The generic converter of the component.";

        public const string MudDebouncedInput_Culture = @"The culture of the component.";

        public const string MudDebouncedInput_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudDebouncedInput_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudDebouncedInput_Class = @"User class names, separated by space.";

        public const string MudDebouncedInput_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDebouncedInput_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDebouncedInput_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDebouncedInput_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"
            <summary>
            Focuses the element
            </summary>
            <returns>The ValueTask</returns>
        ";

        public const string MudDebouncedInput_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudDebouncedInput_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudDebouncedInput_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudDebouncedInput_method_Void_ForceRender_Boolean_ = @"";

        public const string MudDebouncedInput_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudDebouncedInput_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudDebouncedInput_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudDebouncedInput_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudDialog_TitleContent = @"Define the dialog title as a renderfragment (overrides Title)";

        public const string MudDialog_DialogContent = @"Define the dialog body here";

        public const string MudDialog_DialogActions = @"Define the action buttons here";

        public const string MudDialog_Options = @"Default options to pass to Show(), if none are explicitly provided.
            Typically useful on inline dialogs.";

        public const string MudDialog_OnBackdropClick = @"";

        public const string MudDialog_DisableSidePadding = @"No padding at the sides";

        public const string MudDialog_ClassContent = @"CSS class that will be applied to the dialog content";

        public const string MudDialog_ClassActions = @"CSS class that will be applied to the action buttons container";

        public const string MudDialog_ContentStyle = @"CSS styles to be applied to the dialog content";

        public const string MudDialog_IsVisible = @"Bind this two-way to show and close an inlined dialog. Has no effect on opened dialogs";

        public const string MudDialog_IsVisibleChanged = @"Raised when the inline dialog's display status changes.";

        public const string MudDialog_DefaultFocus = @"Define the dialog title as a renderfragment (overrides Title)";

        public const string MudDialog_Class = @"User class names, separated by space.";

        public const string MudDialog_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDialog_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDialog_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDialog_method_MudBlazor_IDialogReference_Show_System_String__MudBlazor_DialogOptions_ = @"
            <summary>
            Show this inlined dialog
            </summary>
            <param name=""title""></param>
            <param name=""options""></param>
            <returns></returns>
        ";

        public const string MudDialog_method_Void_Close_MudBlazor_DialogResult_ = @"
            <summary>
            Close the currently open inlined dialog
            </summary>
            <param name=""result""></param>
        ";

        public const string MudDialogInstance_Options = @"";

        public const string MudDialogInstance_Title = @"";

        public const string MudDialogInstance_TitleContent = @"";

        public const string MudDialogInstance_Content = @"";

        public const string MudDialogInstance_Id = @"";

        public const string MudDialogInstance_CloseIcon = @"Custom close icon.";

        public const string MudDialogInstance_Class = @"User class names, separated by space.";

        public const string MudDialogInstance_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDialogInstance_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDialogInstance_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDialogInstance_method_Void_SetOptions_MudBlazor_DialogOptions_ = @"";

        public const string MudDialogInstance_method_Void_SetTitle_System_String_ = @"";

        public const string MudDialogInstance_method_Void_Close__ = @"
            <summary>
            Close and return null. 
            
            This is a shorthand of Close(DialogResult.Ok((object)null));
            </summary>
        ";

        public const string MudDialogInstance_method_Void_Close_MudBlazor_DialogResult_ = @"
            <summary>
            Close with dialog result.
            
            Usage: Close(DialogResult.Ok(returnValue))
            </summary>
        ";

        public const string MudDialogInstance_method_Void_Close_T__T_ = @"
            <summary>
            Close and directly pass a return value. 
            
            This is a shorthand for Close(DialogResult.Ok(returnValue))
            </summary>
            <typeparam name=""T""></typeparam>
            <param name=""returnValue""></param>
        ";

        public const string MudDialogInstance_method_Void_Cancel__ = @"
            <summary>
            Cancel the dialog. DialogResult.Cancelled will be set to true
            </summary>
        ";

        public const string MudDialogInstance_method_Void_Register_MudBlazor_MudDialog_ = @"";

        public const string MudDialogInstance_method_Void_ForceRender__ = @"";

        public const string MudDialogInstance_method_Void_CancelAll__ = @"
            <summary>
            Cancels all dialogs in dialog provider collection.
            </summary>
        ";

        public const string MudDialogInstance_method_Void_Dispose__ = @"";

        public const string MudDialogProvider_NoHeader = @"";

        public const string MudDialogProvider_CloseButton = @"";

        public const string MudDialogProvider_DisableBackdropClick = @"";

        public const string MudDialogProvider_CloseOnEscapeKey = @"";

        public const string MudDialogProvider_FullWidth = @"";

        public const string MudDialogProvider_Position = @"";

        public const string MudDialogProvider_MaxWidth = @"";

        public const string MudDialogProvider_method_Void_DismissAll__ = @"";

        public const string MudDialogProvider_method_Void_Dispose__ = @"";

        public const string MudDivider_Absolute = @"Sets absolute position to the component.";

        public const string MudDivider_FlexItem = @"If true, a vertical divider will have the correct height when used in flex container.";

        public const string MudDivider_Light = @"If true, the divider will have a lighter color.";

        public const string MudDivider_Vertical = @"If true, the divider is displayed vertically.";

        public const string MudDivider_DividerType = @"The Divider type to use.";

        public const string MudDivider_Class = @"User class names, separated by space.";

        public const string MudDivider_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDivider_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDivider_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDragAndDropItemTransaction_method_System_Threading_Tasks_Task_Cancel__ = @"
            <summary>
            Cancel the transaction 
            </summary>
            <returns></returns>
        ";

        public const string MudDragAndDropItemTransaction_method_System_Threading_Tasks_Task_Commit__ = @"
            <summary>
            Commit this transaction as succesful
            </summary>
            <returns></returns>
        ";

        public const string MudDrawer_Fixed = @"If true, drawer position will be fixed. (CSS position: fixed;)";

        public const string MudDrawer_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

        public const string MudDrawer_Anchor = @"Side from which the drawer will appear.";

        public const string MudDrawer_Color = @"The color of the component. It supports the theme colors.";

        public const string MudDrawer_Variant = @"Variant of the drawer. It specifies how the drawer will be displayed.";

        public const string MudDrawer_ChildContent = @"Child content of component.";

        public const string MudDrawer_DisableOverlay = @"Show overlay for responsive and temporary drawers.";

        public const string MudDrawer_PreserveOpenState = @"Preserve open state for responsive drawer when window resized above MudDrawer.Breakpoint.";

        public const string MudDrawer_OpenMiniOnHover = @"Open drawer automatically on mouse enter when MudDrawer.Variant parameter is set to DrawerVariant.Mini.";

        public const string MudDrawer_Breakpoint = @"Switching point for responsive drawers";

        public const string MudDrawer_Open = @"Sets the opened state on the drawer. Can be used with two-way binding to close itself on navigation.";

        public const string MudDrawer_OpenChanged = @"";

        public const string MudDrawer_Width = @"Width of left/right drawer. Only for non-fixed drawers.";

        public const string MudDrawer_MiniWidth = @"Width of left/right drawer. Only for non-fixed drawers.";

        public const string MudDrawer_Height = @"Height of top/bottom temporary drawer";

        public const string MudDrawer_ClipMode = @"Specify how the drawer should behave inside a MudLayout. It affects the position relative to MudAppbar";

        public const string MudDrawer_Class = @"User class names, separated by space.";

        public const string MudDrawer_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDrawer_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDrawer_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDrawer_method_Void_Dispose__ = @"";

        public const string MudDrawer_method_Void_Dispose_Boolean_ = @"";

        public const string MudDrawer_method_System_Threading_Tasks_Task_OnNavigation__ = @"";

        public const string MudDrawer_method_Void_OnMouseEnter__ = @"";

        public const string MudDrawer_method_Void_OnMouseLeave__ = @"";

        public const string MudDrawerContainer_ChildContent = @"";

        public const string MudDrawerContainer_Class = @"User class names, separated by space.";

        public const string MudDrawerContainer_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDrawerContainer_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDrawerContainer_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDrawerHeader_Dense = @"If true, compact padding will be used, same as the Appbar.";

        public const string MudDrawerHeader_ChildContent = @"Child content of component.";

        public const string MudDrawerHeader_LinkToIndex = @"If true, the component will link to index page with an a element instead of div.";

        public const string MudDrawerHeader_Class = @"User class names, separated by space.";

        public const string MudDrawerHeader_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDrawerHeader_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDrawerHeader_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDropContainer_ChildContent = @"Child content of component. This should include the drop zones";

        public const string MudDropContainer_Items = @"The items that can be drag and dropped within the container";

        public const string MudDropContainer_ItemRenderer = @"The render fragment (template) that should be used to render the items within a drop zone";

        public const string MudDropContainer_ItemsSelector = @"The method is used to determinate if an item can be dropped within a drop zone";

        public const string MudDropContainer_ItemDropped = @"Callback that indicates that an item has been dropped on a drop zone. Should be used to update the ""status"" of the data item";

        public const string MudDropContainer_CanDrop = @"The method is used to determinate if an item can be dropped within a drop zone";

        public const string MudDropContainer_CanDropClass = @"The CSS class(es), that is applied to drop zones that are a valid target for drag and drop transaction";

        public const string MudDropContainer_NoDropClass = @"The CSS class(es), that is applied to drop zones that are NOT valid target for drag and drop transaction";

        public const string MudDropContainer_ApplyDropClassesOnDragStarted = @"If true, drop classes CanDropClass MudDropContainer.CanDropClass  or NoDropClass MudDropContainer.NoDropClass or applied as soon, as a transaction has started";

        public const string MudDropContainer_ItemIsDisabled = @"The method is used to determinate if an item should be disabled for dragging. Defaults to allow all items";

        public const string MudDropContainer_DisabledClass = @"If a drop item is disabled (determinate by MudDropContainer.ItemIsDisabled). This class is applied to the element";

        public const string MudDropContainer_DraggingClass = @"An additional class that is applied to the drop zone where a drag operation started";

        public const string MudDropContainer_ItemDraggingClass = @"An additional class that is applied to an drop item, when it is dragged";

        public const string MudDropContainer_Class = @"User class names, separated by space.";

        public const string MudDropContainer_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDropContainer_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDropContainer_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDropContainer_method_Void_add_TransactionStarted_System_EventHandler_1_MudBlazor_MudDragAndDropItemTransaction_1_T___ = @"";

        public const string MudDropContainer_method_Void_remove_TransactionStarted_System_EventHandler_1_MudBlazor_MudDragAndDropItemTransaction_1_T___ = @"";

        public const string MudDropContainer_method_Void_add_TransactionIndexChanged_System_EventHandler_1_MudBlazor_MudDragAndDropIndexChangedEventArgs__ = @"";

        public const string MudDropContainer_method_Void_remove_TransactionIndexChanged_System_EventHandler_1_MudBlazor_MudDragAndDropIndexChangedEventArgs__ = @"";

        public const string MudDropContainer_method_Void_add_TransactionEnded_System_EventHandler_1_MudBlazor_MudDragAndDropTransactionFinishedEventArgs_1_T___ = @"";

        public const string MudDropContainer_method_Void_remove_TransactionEnded_System_EventHandler_1_MudBlazor_MudDragAndDropTransactionFinishedEventArgs_1_T___ = @"";

        public const string MudDropContainer_method_Void_add_RefreshRequested_System_EventHandler_ = @"";

        public const string MudDropContainer_method_Void_remove_RefreshRequested_System_EventHandler_ = @"";

        public const string MudDropContainer_method_Void_StartTransaction_T__System_String__Int32__System_Func_1_System_Threading_Tasks_Task___System_Func_1_System_Threading_Tasks_Task__ = @"";

        public const string MudDropContainer_method_T_GetTransactionItem__ = @"";

        public const string MudDropContainer_method_Boolean_TransactionInProgress__ = @"";

        public const string MudDropContainer_method_System_String_GetTransactionOrignZoneIdentiifer__ = @"";

        public const string MudDropContainer_method_System_String_GetTransactionCurrentZoneIdentiifer__ = @"";

        public const string MudDropContainer_method_Boolean_IsTransactionOriginatedFromInside_System_String_ = @"";

        public const string MudDropContainer_method_Int32_GetTransactionIndex__ = @"";

        public const string MudDropContainer_method_Boolean_IsItemMovedDownwards__ = @"";

        public const string MudDropContainer_method_Boolean_HasTransactionIndexChanged__ = @"";

        public const string MudDropContainer_method_Boolean_IsOrign_Int32__System_String_ = @"";

        public const string MudDropContainer_method_System_Threading_Tasks_Task_CommitTransaction_System_String__Boolean_ = @"";

        public const string MudDropContainer_method_System_Threading_Tasks_Task_CancelTransaction__ = @"";

        public const string MudDropContainer_method_Void_UpdateTransactionIndex_Int32_ = @"";

        public const string MudDropContainer_method_Void_Refresh__ = @"
            <summary>
            Refreshes the dropzone and all items within. This is neded in case of adding items to the collection or changed values of items
            </summary>
        ";

        public const string MudDropZone_ChildContent = @"Child content of component";

        public const string MudDropZone_Identifier = @"The unique identifier of this drop zone. It is used within transaction to";

        public const string MudDropZone_ItemRenderer = @"The render fragment (template) that should be used to render the items within a drop zone. Overrides value provided by drop container";

        public const string MudDropZone_ItemsSelector = @"The method is used to determinate if an item can be dropped within a drop zone. Overrides value provided by drop container";

        public const string MudDropZone_CanDrop = @"The method is used to determinate if an item can be dropped within a drop zone. Overrides value provided by drop container";

        public const string MudDropZone_CanDropClass = @"The CSS class(es), that is applied to drop zones that are a valid target for drag and drop transaction. Overrides value provided by drop container";

        public const string MudDropZone_NoDropClass = @"The CSS class(es), that is applied to drop zones that are NOT valid target for drag and drop transaction. Overrides value provided by drop container";

        public const string MudDropZone_ApplyDropClassesOnDragStarted = @"If true, drop classes CanDropClass MudDropZone.CanDropClass  or NoDropClass MudDropZone.NoDropClass or applied as soon, as a transaction has started. Overrides value provided by drop container";

        public const string MudDropZone_ItemIsDisabled = @"The method is used to determinate if an item should be disabled for dragging. Defaults to allow all items. Overrides value provided by drop container";

        public const string MudDropZone_DisabledClass = @"If a drop item is disabled (determinate by MudDropZone.ItemIsDisabled). This class is applied to the element. Overrides value provided by drop container";

        public const string MudDropZone_DraggingClass = @"An additional class that is applied to the drop zone where a drag operation started";

        public const string MudDropZone_ItemDraggingClass = @"An additional class that is applied to an drop item, when it is dragged";

        public const string MudDropZone_AllowReorder = @"";

        public const string MudDropZone_OnlyZone = @"If true, will only act as a dropable zone and not render any items.";

        public const string MudDropZone_Class = @"User class names, separated by space.";

        public const string MudDropZone_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDropZone_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDropZone_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDropZone_method_Void_Dispose__ = @"";

        public const string MudDynamicDropItem_ZoneIdentifier = @"The zone identifier of the corresponding drop zone";

        public const string MudDynamicDropItem_Item = @"the data item that is represneted by this item";

        public const string MudDynamicDropItem_ChildContent = @"Child content of component";

        public const string MudDynamicDropItem_DraggingClass = @"An additional class that is applied to this element when a drag operation is in progress";

        public const string MudDynamicDropItem_OnDragStarted = @"An event callback set fires, when a drag operation has been started";

        public const string MudDynamicDropItem_OnDragEnded = @"An event callback set fires, when a drag operation has been eneded. This included also a cancelled transaction";

        public const string MudDynamicDropItem_Disabled = @"When true, the item can't be dragged. defaults to false";

        public const string MudDynamicDropItem_DisabledClass = @"The class that is applied when disabled MudDynamicDropItem.Disabled is set to true";

        public const string MudDynamicDropItem_Index = @"";

        public const string MudDynamicDropItem_HideContent = @"";

        public const string MudDynamicDropItem_Class = @"User class names, separated by space.";

        public const string MudDynamicDropItem_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDynamicDropItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDynamicDropItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDynamicTabs_AddTabIcon = @"The icon used for the add button";

        public const string MudDynamicTabs_CloseTabIcon = @"the icon used of the close button";

        public const string MudDynamicTabs_AddTab = @"The callback, when the add button has been clicked";

        public const string MudDynamicTabs_CloseTab = @"The callback, when the a close button has been clicked";

        public const string MudDynamicTabs_AddIconClass = @"Classes that are applied to the icon button of the add button";

        public const string MudDynamicTabs_AddIconStyle = @"Styles that are applied to the icon button of the add button";

        public const string MudDynamicTabs_CloseIconClass = @"Classes that are applied to the icon button of the close button";

        public const string MudDynamicTabs_CloseIconStyle = @"Styles that are applied to the icon button of the close button";

        public const string MudDynamicTabs_AddIconToolTip = @"Tooltip that shown when a user hovers of the add button. Empty or null, if no tooltip should be visible";

        public const string MudDynamicTabs_CloseIconToolTip = @"Tooltip that shown when a user hovers of the close button. Empty or null, if no tooltip should be visible";

        public const string MudDynamicTabs_KeepPanelsAlive = @"If true, render all tabs and hide (display:none) every non-active.";

        public const string MudDynamicTabs_Rounded = @"If true, sets the border-radius to theme default.";

        public const string MudDynamicTabs_Border = @"If true, sets a border between the content and the toolbar depending on the position.";

        public const string MudDynamicTabs_Outlined = @"If true, toolbar will be outlined.";

        public const string MudDynamicTabs_Centered = @"If true, centers the tabitems.";

        public const string MudDynamicTabs_HideSlider = @"Hides the active tab slider.";

        public const string MudDynamicTabs_PrevIcon = @"Icon to use for left pagination.";

        public const string MudDynamicTabs_NextIcon = @"Icon to use for right pagination.";

        public const string MudDynamicTabs_AlwaysShowScrollButtons = @"If true, always display the scroll buttons even if the tabs are smaller than the required with, buttons will be disabled if there is nothing to scroll.";

        public const string MudDynamicTabs_MaxHeight = @"Sets the maxheight the component can have.";

        public const string MudDynamicTabs_Position = @"Sets the position of the tabs itself.";

        public const string MudDynamicTabs_Color = @"The color of the component. It supports the theme colors.";

        public const string MudDynamicTabs_SliderColor = @"The color of the tab slider. It supports the theme colors.";

        public const string MudDynamicTabs_IconColor = @"The color of the icon. It supports the theme colors.";

        public const string MudDynamicTabs_ScrollIconColor = @"The color of the next/prev icons. It supports the theme colors.";

        public const string MudDynamicTabs_Elevation = @"The higher the number, the heavier the drop-shadow, applies around the whole component.";

        public const string MudDynamicTabs_ApplyEffectsToContainer = @"If true, will apply elevation, rounded, outlined effects to the whole tab component instead of just toolbar.";

        public const string MudDynamicTabs_DisableRipple = @"If true, disables ripple effect.";

        public const string MudDynamicTabs_DisableSliderAnimation = @"If true, disables slider animation";

        public const string MudDynamicTabs_ChildContent = @"Child content of component.";

        public const string MudDynamicTabs_PrePanelContent = @"This fragment is placed between toolbar and panels. 
            It can be used to display additional content like an address line in a browser.
            The active tab will be the content of this RenderFragement";

        public const string MudDynamicTabs_TabPanelClass = @"Custom class/classes for TabPanel";

        public const string MudDynamicTabs_PanelClass = @"Custom class/classes for Selected Content Panel";

        public const string MudDynamicTabs_ActivePanelIndex = @"The current active panel index. Also with Bidirectional Binding";

        public const string MudDynamicTabs_ActivePanelIndexChanged = @"Fired when ActivePanelIndex changes.";

        public const string MudDynamicTabs_Header = @"A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control";

        public const string MudDynamicTabs_HeaderPosition = @"Additional content specified by Header is placed either before the tabs, after or not at all";

        public const string MudDynamicTabs_TabPanelHeader = @"A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel";

        public const string MudDynamicTabs_TabPanelHeaderPosition = @"Additional content specified by Header is placed either before the tabs, after or not at all";

        public const string MudDynamicTabs_Class = @"User class names, separated by space.";

        public const string MudDynamicTabs_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudDynamicTabs_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudDynamicTabs_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudDynamicTabs_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string MudDynamicTabs_method_Void_ActivatePanel_MudBlazor_MudTabPanel__Boolean_ = @"";

        public const string MudDynamicTabs_method_Void_ActivatePanel_Int32__Boolean_ = @"";

        public const string MudDynamicTabs_method_Void_ActivatePanel_System_Object__Boolean_ = @"";

        public const string MudElement_ChildContent = @"Child content";

        public const string MudElement_HtmlTag = @"The HTML element that will be rendered in the root by the component";

        public const string MudElement_Ref = @"The ElementReference to bind to.
            Use like @bind-Ref=""myRef""";

        public const string MudElement_RefChanged = @"";

        public const string MudElement_Class = @"User class names, separated by space.";

        public const string MudElement_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudElement_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudElement_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudElement_method_Void_Refresh__ = @"
            <summary>
            Calling StateHasChanged to refresh the component's state
            </summary>
        ";

        public const string MudExpansionPanel_MaxHeight = @"Explicitly sets the height for the Collapse element to override the css default.";

        public const string MudExpansionPanel_TitleContent = @"RenderFragment to be displayed in the expansion panel which will override header text if defined.";

        public const string MudExpansionPanel_Text = @"The text to be displayed in the expansion panel.";

        public const string MudExpansionPanel_HideIcon = @"If true, expand icon will not show";

        public const string MudExpansionPanel_Icon = @"Custom hide icon.";

        public const string MudExpansionPanel_Dense = @"If true, removes vertical padding from childcontent.";

        public const string MudExpansionPanel_DisableGutters = @"If true, the left and right padding is removed from childcontent.";

        public const string MudExpansionPanel_IsExpandedChanged = @"Raised when IsExpanded changes.";

        public const string MudExpansionPanel_IsExpanded = @"Expansion state of the panel (two-way bindable)";

        public const string MudExpansionPanel_IsInitiallyExpanded = @"Sets the initial expansion state. Do not use in combination with IsExpanded.
            Combine with MultiExpansion to have more than one panel start open.";

        public const string MudExpansionPanel_Disabled = @"If true, the component will be disabled.";

        public const string MudExpansionPanel_ChildContent = @"Child content of component.";

        public const string MudExpansionPanel_Class = @"User class names, separated by space.";

        public const string MudExpansionPanel_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudExpansionPanel_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudExpansionPanel_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudExpansionPanel_method_Void_ToggleExpansion__ = @"";

        public const string MudExpansionPanel_method_Void_Expand_Boolean_ = @"";

        public const string MudExpansionPanel_method_Void_Collapse_Boolean_ = @"";

        public const string MudExpansionPanel_method_Void_Dispose__ = @"";

        public const string MudExpansionPanels_Square = @"If true, border-radius is set to 0.";

        public const string MudExpansionPanels_MultiExpansion = @"If true, multiple panels can be expanded at the same time.";

        public const string MudExpansionPanels_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

        public const string MudExpansionPanels_Dense = @"If true, removes vertical padding from all panels' childcontent.";

        public const string MudExpansionPanels_DisableGutters = @"If true, the left and right padding is removed from all panels' childcontent.";

        public const string MudExpansionPanels_DisableBorders = @"If true, the borders around each panel will be removed.";

        public const string MudExpansionPanels_ChildContent = @"Child content of component.";

        public const string MudExpansionPanels_Class = @"User class names, separated by space.";

        public const string MudExpansionPanels_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudExpansionPanels_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudExpansionPanels_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudExpansionPanels_method_Void_RemovePanel_MudBlazor_MudExpansionPanel_ = @"";

        public const string MudExpansionPanels_method_Void_UpdateAll__ = @"";

        public const string MudExpansionPanels_method_Void_CloseAllExcept_MudBlazor_MudExpansionPanel_ = @"";

        public const string MudExpansionPanels_method_Void_CollapseAllExcept_MudBlazor_MudExpansionPanel_ = @"
            <summary>
            Collapses all panels except the given one.
            </summary>
            <param name=""panel"">The panel not to collapse.</param>
        ";

        public const string MudExpansionPanels_method_Void_CollapseAll__ = @"
            <summary>
            Collapses all panels.
            </summary>
        ";

        public const string MudExpansionPanels_method_Void_ExpandAll__ = @"
            <summary>
            Expands all panels.
            </summary>
        ";

        public const string MudFab_Color = @"The color of the component. It supports the theme colors.";

        public const string MudFab_Size = @"The Size of the component.";

        public const string MudFab_Icon = @"If applied Icon will be added at the start of the component.";

        public const string MudFab_StartIcon = @"If applied Icon will be added at the start of the component.";

        public const string MudFab_EndIcon = @"If applied Icon will be added at the end of the component.";

        public const string MudFab_IconColor = @"The color of the icon. It supports the theme colors.";

        public const string MudFab_IconSize = @"The size of the icon.";

        public const string MudFab_Label = @"If applied the text will be added to the component.";

        public const string MudFab_Title = @"Title of the icon used for accessibility.";

        public const string MudFab_HtmlTag = @"The HTML element that will be rendered in the root by the component
            By default, is a button";

        public const string MudFab_ButtonType = @"The button Type (Button, Submit, Refresh)";

        public const string MudFab_Href = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

        public const string MudFab_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)";

        public const string MudFab_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

        public const string MudFab_Disabled = @"If true, the button will be disabled.";

        public const string MudFab_DisableElevation = @"If true, no drop-shadow will be used.";

        public const string MudFab_DisableRipple = @"If true, disables ripple effect.";

        public const string MudFab_Command = @"Command executed when the user clicks on an element.";

        public const string MudFab_CommandParameter = @"Command parameter.";

        public const string MudFab_OnClick = @"Button click event.";

        public const string MudFab_Class = @"User class names, separated by space.";

        public const string MudFab_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudFab_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudFab_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudFab_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudField_ChildContent = @"Child content of component.";

        public const string MudField_Margin = @"Will adjust vertical spacing.";

        public const string MudField_Error = @"If true, the label will be displayed in an error state.";

        public const string MudField_ErrorText = @"The ErrorText that will be displayed if Error true";

        public const string MudField_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudField_FullWidth = @"If true, the field will take up the full width of its container.";

        public const string MudField_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the field has value.";

        public const string MudField_Variant = @"Variant can be Text, Filled or Outlined.";

        public const string MudField_Disabled = @"If true, the input element will be disabled.";

        public const string MudField_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudField_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudField_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudField_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudField_IconSize = @"Sets the Icon Size.";

        public const string MudField_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudField_InnerPadding = @"If true, the inner contents padding is removed.";

        public const string MudField_DisableUnderLine = @"If true, the field will not have an underline.";

        public const string MudField_Class = @"User class names, separated by space.";

        public const string MudField_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudField_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudField_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudFileUploader_HtmlTag = @"The HTML element that will be rendered in the root by the component
            By default, is a button";

        public const string MudFileUploader_ButtonType = @"The button Type (Button, Submit, Refresh)";

        public const string MudFileUploader_Href = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

        public const string MudFileUploader_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)";

        public const string MudFileUploader_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

        public const string MudFileUploader_Disabled = @"If true, the button will be disabled.";

        public const string MudFileUploader_DisableElevation = @"If true, no drop-shadow will be used.";

        public const string MudFileUploader_DisableRipple = @"If true, disables ripple effect.";

        public const string MudFileUploader_Command = @"Command executed when the user clicks on an element.";

        public const string MudFileUploader_CommandParameter = @"Command parameter.";

        public const string MudFileUploader_OnClick = @"Button click event.";

        public const string MudFileUploader_Class = @"User class names, separated by space.";

        public const string MudFileUploader_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudFileUploader_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudFileUploader_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudFileUploader_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudFocusTrap_ChildContent = @"Child content of the component.";

        public const string MudFocusTrap_Disabled = @"If true, the focus will no longer loop inside the component.";

        public const string MudFocusTrap_DefaultFocus = @"Defines on which element to set the focus when the component is created or enabled.
            When DefaultFocus.Element is used, the focus will be set to the FocusTrap itself, so the user will have to press TAB key once to focus the first tabbable element.";

        public const string MudFocusTrap_Class = @"User class names, separated by space.";

        public const string MudFocusTrap_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudFocusTrap_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudFocusTrap_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudFocusTrap_method_Void_Dispose__ = @"";

        public const string MudForm_ChildContent = @"Child content of component.";

        public const string MudForm_IsValid = @"Validation status. True if the form is valid and without errors. This parameter is two-way bindable.";

        public const string MudForm_IsTouched = @"True if any field of the field was touched. This parameter is readonly.";

        public const string MudForm_ValidationDelay = @"Validation debounce delay in milliseconds. This can help improve rendering performance of forms with real-time validation of inputs
            i.e. when textfields have Immediate=""true"".";

        public const string MudForm_SuppressRenderingOnValidation = @"When true, the form will not re-render its child contents on validation updates (i.e. when IsValid changes).
            This is an optimization which can be necessary especially for larger forms on older devices.";

        public const string MudForm_SuppressImplicitSubmission = @"When true, will not cause a page refresh on Enter if any input has focus.
            
            
            https://www.w3.org/TR/2018/SPSD-html5-20180327/forms.html#implicit-submission
            Usually this is not wanted, as it can cause a page refresh in the middle of editing a form. 
            When the form is in a dialog this will cause the dialog to close. So by default we suppress it.";

        public const string MudForm_IsValidChanged = @"Raised when IsValid changes.";

        public const string MudForm_IsTouchedChanged = @"Raised when IsTouched changes.";

        public const string MudForm_FieldChanged = @"Raised when a contained IFormComponent changes its value";

        public const string MudForm_Validation = @"A default validation func or a validation attribute to use for form controls that don't have one.
            Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudForm_OverrideFieldValidation = @"If a field already has a validation, override it with MudForm.Validation.";

        public const string MudForm_Errors = @"Validation error messages.";

        public const string MudForm_ErrorsChanged = @"";

        public const string MudForm_Model = @"Specifies the top-level model object for the form. Used with Fluent Validation";

        public const string MudForm_Class = @"User class names, separated by space.";

        public const string MudForm_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudForm_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudForm_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudForm_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Force a validation of all form controls, even if they haven't been touched by the user yet.
            </summary>
        ";

        public const string MudForm_method_Void_Reset__ = @"
            <summary>
            Reset all form controls and reset their validation state.
            </summary>
        ";

        public const string MudForm_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation state but keep the values.
            </summary>
        ";

        public const string MudForm_method_Void_Dispose__ = @"";

        public const string MudFormComponent_Required = @"If true, this form input is required to be filled out.";

        public const string MudFormComponent_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudFormComponent_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudFormComponent_Error = @"If true, the label will be displayed in an error state.";

        public const string MudFormComponent_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudFormComponent_Converter = @"The generic converter of the component.";

        public const string MudFormComponent_Culture = @"The culture of the component.";

        public const string MudFormComponent_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudFormComponent_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudFormComponent_Class = @"User class names, separated by space.";

        public const string MudFormComponent_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudFormComponent_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudFormComponent_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudFormComponent_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudFormComponent_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudFormComponent_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudFormComponent_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudGrid_Spacing = @"";

        public const string MudGrid_Justify = @"";

        public const string MudGrid_ChildContent = @"";

        public const string MudGrid_Class = @"User class names, separated by space.";

        public const string MudGrid_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudGrid_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudGrid_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudHidden_Breakpoint = @"The screen size(s) depending on which the ChildContent should not be rendered (or should be, if Invert is true)";

        public const string MudHidden_Invert = @"Inverts the Breakpoint, so that the ChildContent is only rendered when the breakpoint matches the screen size.";

        public const string MudHidden_IsHidden = @"True if the component is not visible (two-way bindable)";

        public const string MudHidden_IsHiddenChanged = @"Fires when the breakpoint changes visibility of the component";

        public const string MudHidden_ChildContent = @"Child content of component.";

        public const string MudHidden_Class = @"User class names, separated by space.";

        public const string MudHidden_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudHidden_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudHidden_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudHidden_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string MudHighlighter_Text = @"The whole text in which a fragment will be highlighted";

        public const string MudHighlighter_HighlightedText = @"The fragment of text to be highlighted";

        public const string MudHighlighter_HighlightedTexts = @"The fragments of text to be highlighted";

        public const string MudHighlighter_CaseSensitive = @"Whether or not the highlighted text is case sensitive";

        public const string MudHighlighter_UntilNextBoundary = @"If true, highlights the text until the next regex boundary";

        public const string MudHighlighter_Class = @"User class names, separated by space.";

        public const string MudHighlighter_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudHighlighter_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudHighlighter_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudIcon_Icon = @"Icon to be used can either be svg paths for font icons.";

        public const string MudIcon_Title = @"Title of the icon used for accessibility.";

        public const string MudIcon_Size = @"The Size of the icon.";

        public const string MudIcon_Color = @"The color of the component. It supports the theme colors.";

        public const string MudIcon_ViewBox = @"The viewbox size of an svg element.";

        public const string MudIcon_ChildContent = @"Child content of component.";

        public const string MudIcon_Class = @"User class names, separated by space.";

        public const string MudIcon_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudIcon_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudIcon_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudIconButton_Icon = @"The Icon that will be used in the component.";

        public const string MudIconButton_Title = @"Title of the icon used for accessibility.";

        public const string MudIconButton_Color = @"The color of the component. It supports the theme colors.";

        public const string MudIconButton_Size = @"The Size of the component.";

        public const string MudIconButton_Edge = @"If set uses a negative margin.";

        public const string MudIconButton_ChildContent = @"Child content of component, only shows if Icon is null or Empty.";

        public const string MudIconButton_Variant = @"The variant to use.";

        public const string MudIconButton_HtmlTag = @"The HTML element that will be rendered in the root by the component
            By default, is a button";

        public const string MudIconButton_ButtonType = @"The button Type (Button, Submit, Refresh)";

        public const string MudIconButton_Href = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

        public const string MudIconButton_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)";

        public const string MudIconButton_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

        public const string MudIconButton_Disabled = @"If true, the button will be disabled.";

        public const string MudIconButton_DisableElevation = @"If true, no drop-shadow will be used.";

        public const string MudIconButton_DisableRipple = @"If true, disables ripple effect.";

        public const string MudIconButton_Command = @"Command executed when the user clicks on an element.";

        public const string MudIconButton_CommandParameter = @"Command parameter.";

        public const string MudIconButton_OnClick = @"Button click event.";

        public const string MudIconButton_Class = @"User class names, separated by space.";

        public const string MudIconButton_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudIconButton_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudIconButton_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudIconButton_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudImage_Fluid = @"Applies the fluid class so the image scales with the parent width.";

        public const string MudImage_Src = @"Specifies the path to the image.";

        public const string MudImage_Alt = @"Specifies an alternate text for the image.";

        public const string MudImage_Height = @"Specifies the height of the image in px.";

        public const string MudImage_Width = @"Specifies the width of the image in px.";

        public const string MudImage_Elevation = @"The higher the number, the heavier the drop-shadow.";

        public const string MudImage_ObjectFit = @"Controls how the image should be resized.";

        public const string MudImage_ObjectPosition = @"Controls how the image should positioned within its container.";

        public const string MudImage_Class = @"User class names, separated by space.";

        public const string MudImage_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudImage_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudImage_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudInput_InputType = @"Type of the input element. It should be a valid HTML5 input type.";

        public const string MudInput_ChildContent = @"ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.";

        public const string MudInput_OnIncrement = @"Invokes the callback when the Up arrow button is clicked when the input is set to InputType.Number.
            Note: use the optimized control MudNumericField if you need to deal with numbers.";

        public const string MudInput_OnDecrement = @"Invokes the callback when the Down arrow button is clicked when the input is set to InputType.Number.
            Note: use the optimized control MudNumericField if you need to deal with numbers.";

        public const string MudInput_HideSpinButtons = @"Hides the spin buttons for MudNumericField";

        public const string MudInput_Clearable = @"Show clear button.";

        public const string MudInput_OnClearButtonClick = @"Button click event for clear button. Called after text and value has been cleared.";

        public const string MudInput_OnMouseWheel = @"Mouse wheel event for input.";

        public const string MudInput_ClearIcon = @"Custom clear icon.";

        public const string MudInput_NumericUpIcon = @"Custom numeric up icon.";

        public const string MudInput_NumericDownIcon = @"Custom numeric down icon.";

        public const string MudInput_Disabled = @"If true, the input element will be disabled.";

        public const string MudInput_ReadOnly = @"If true, the input will be read-only.";

        public const string MudInput_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudInput_Immediate = @"If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.";

        public const string MudInput_DisableUnderLine = @"If true, the input will not have an underline.";

        public const string MudInput_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudInput_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudInput_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudInput_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudInput_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudInput_OnlyValidateIfDirty = @"The validation is only triggered if the user has changed the input value at least once. By default, it is false";

        public const string MudInput_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudInput_AdornmentAriaLabel = @"The aria-label of the adornment.";

        public const string MudInput_IconSize = @"The Icon Size.";

        public const string MudInput_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudInput_Variant = @"Variant to use.";

        public const string MudInput_Margin = @"Will adjust vertical spacing.";

        public const string MudInput_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudInput_Counter = @"If set, will display the counter, value 0 will display current count but no stop count.";

        public const string MudInput_MaxLength = @"Maximum number of characters that the input will accept";

        public const string MudInput_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudInput_AutoFocus = @"If true the input will focus automatically.";

        public const string MudInput_Lines = @"A multiline input (textarea) will be shown, if set to more than one line.";

        public const string MudInput_Text = @"The text to be displayed.";

        public const string MudInput_TextUpdateSuppression = @"When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.";

        public const string MudInput_InputMode = @"Hints at the type of data that might be entered by the user while editing the input";

        public const string MudInput_Pattern = @"The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
            Not Supported in multline input";

        public const string MudInput_TextChanged = @"Fired when the text value changes.";

        public const string MudInput_OnBlur = @"Fired when the element loses focus.";

        public const string MudInput_OnInternalInputChanged = @"Fired when the element changes internally its text value.";

        public const string MudInput_OnKeyDown = @"Fired on the KeyDown event.";

        public const string MudInput_KeyDownPreventDefault = @"Prevent the default action for the KeyDown event.";

        public const string MudInput_OnKeyPress = @"Fired on the KeyPress event.";

        public const string MudInput_KeyPressPreventDefault = @"Prevent the default action for the KeyPress event.";

        public const string MudInput_OnKeyUp = @"Fired on the KeyUp event.";

        public const string MudInput_KeyUpPreventDefault = @"Prevent the default action for the KeyUp event.";

        public const string MudInput_ValueChanged = @"Fired when the Value property changes.";

        public const string MudInput_Value = @"The value of this input element.";

        public const string MudInput_Format = @"Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans";

        public const string MudInput_Required = @"If true, this form input is required to be filled out.";

        public const string MudInput_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudInput_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudInput_Error = @"If true, the label will be displayed in an error state.";

        public const string MudInput_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudInput_Converter = @"The generic converter of the component.";

        public const string MudInput_Culture = @"The culture of the component.";

        public const string MudInput_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudInput_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudInput_Class = @"User class names, separated by space.";

        public const string MudInput_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudInput_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudInput_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudInput_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudInput_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudInput_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudInput_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudInput_method_System_Threading_Tasks_Task_SetText_System_String_ = @"
            <summary>
            Sets the input text from outside programmatically
            </summary>
            <param name=""text""></param>
            <returns></returns>
        ";

        public const string MudInput_method_Void_ForceRender_Boolean_ = @"";

        public const string MudInput_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudInput_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudInput_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudInput_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudInputAdornment_Class = @"";

        public const string MudInputAdornment_Text = @"";

        public const string MudInputAdornment_Icon = @"";

        public const string MudInputAdornment_Edge = @"";

        public const string MudInputAdornment_Size = @"";

        public const string MudInputAdornment_Color = @"";

        public const string MudInputAdornment_AriaLabel = @"";

        public const string MudInputAdornment_AdornmentClick = @"";

        public const string MudInputControl_ChildContent = @"Child content of component.";

        public const string MudInputControl_InputContent = @"Should be the Input";

        public const string MudInputControl_Margin = @"Will adjust vertical spacing.";

        public const string MudInputControl_Required = @"If true, will apply mud-input-required class to the output div";

        public const string MudInputControl_Error = @"If true, the label will be displayed in an error state.";

        public const string MudInputControl_ErrorText = @"The ErrorText that will be displayed if Error true";

        public const string MudInputControl_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudInputControl_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudInputControl_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudInputControl_CounterText = @"The current character counter, displayed below the text field.";

        public const string MudInputControl_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudInputControl_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudInputControl_Variant = @"Variant can be Text, Filled or Outlined.";

        public const string MudInputControl_Disabled = @"If true, the input element will be disabled.";

        public const string MudInputControl_ForId = @"If string has value the label ""for"" attribute will be added.";

        public const string MudInputControl_Class = @"User class names, separated by space.";

        public const string MudInputControl_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudInputControl_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudInputControl_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudInputCssHelper_method_System_String_GetClassname_T__MudBlazor_MudBaseInput_1_T___System_Func_1_System_Boolean__ = @"";

        public const string MudInputCssHelper_method_System_String_GetInputClassname_T__MudBlazor_MudBaseInput_1_T__ = @"";

        public const string MudInputCssHelper_method_System_String_GetAdornmentClassname_T__MudBlazor_MudBaseInput_1_T__ = @"";

        public const string MudInputLabel_ChildContent = @"Child content of component.";

        public const string MudInputLabel_Disabled = @"If true, the input element will be disabled.";

        public const string MudInputLabel_Error = @"If true, the label will be displayed in an error state.";

        public const string MudInputLabel_Variant = @"Variant to use.";

        public const string MudInputLabel_Margin = @"Will adjust vertical spacing.";

        public const string MudInputLabel_ForId = @"Will set the for attribute for WCAG accessiblility";

        public const string MudInputLabel_Class = @"User class names, separated by space.";

        public const string MudInputLabel_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudInputLabel_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudInputLabel_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudInputString_InputType = @"Type of the input element. It should be a valid HTML5 input type.";

        public const string MudInputString_ChildContent = @"ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.";

        public const string MudInputString_OnIncrement = @"Invokes the callback when the Up arrow button is clicked when the input is set to InputType.Number.
            Note: use the optimized control MudNumericField if you need to deal with numbers.";

        public const string MudInputString_OnDecrement = @"Invokes the callback when the Down arrow button is clicked when the input is set to InputType.Number.
            Note: use the optimized control MudNumericField if you need to deal with numbers.";

        public const string MudInputString_HideSpinButtons = @"Hides the spin buttons for MudNumericField";

        public const string MudInputString_Clearable = @"Show clear button.";

        public const string MudInputString_OnClearButtonClick = @"Button click event for clear button. Called after text and value has been cleared.";

        public const string MudInputString_OnMouseWheel = @"Mouse wheel event for input.";

        public const string MudInputString_ClearIcon = @"Custom clear icon.";

        public const string MudInputString_NumericUpIcon = @"Custom numeric up icon.";

        public const string MudInputString_NumericDownIcon = @"Custom numeric down icon.";

        public const string MudInputString_Disabled = @"If true, the input element will be disabled.";

        public const string MudInputString_ReadOnly = @"If true, the input will be read-only.";

        public const string MudInputString_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudInputString_Immediate = @"If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.";

        public const string MudInputString_DisableUnderLine = @"If true, the input will not have an underline.";

        public const string MudInputString_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudInputString_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudInputString_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudInputString_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudInputString_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudInputString_OnlyValidateIfDirty = @"The validation is only triggered if the user has changed the input value at least once. By default, it is false";

        public const string MudInputString_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudInputString_AdornmentAriaLabel = @"The aria-label of the adornment.";

        public const string MudInputString_IconSize = @"The Icon Size.";

        public const string MudInputString_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudInputString_Variant = @"Variant to use.";

        public const string MudInputString_Margin = @"Will adjust vertical spacing.";

        public const string MudInputString_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudInputString_Counter = @"If set, will display the counter, value 0 will display current count but no stop count.";

        public const string MudInputString_MaxLength = @"Maximum number of characters that the input will accept";

        public const string MudInputString_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudInputString_AutoFocus = @"If true the input will focus automatically.";

        public const string MudInputString_Lines = @"A multiline input (textarea) will be shown, if set to more than one line.";

        public const string MudInputString_Text = @"The text to be displayed.";

        public const string MudInputString_TextUpdateSuppression = @"When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.";

        public const string MudInputString_InputMode = @"Hints at the type of data that might be entered by the user while editing the input";

        public const string MudInputString_Pattern = @"The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
            Not Supported in multline input";

        public const string MudInputString_TextChanged = @"Fired when the text value changes.";

        public const string MudInputString_OnBlur = @"Fired when the element loses focus.";

        public const string MudInputString_OnInternalInputChanged = @"Fired when the element changes internally its text value.";

        public const string MudInputString_OnKeyDown = @"Fired on the KeyDown event.";

        public const string MudInputString_KeyDownPreventDefault = @"Prevent the default action for the KeyDown event.";

        public const string MudInputString_OnKeyPress = @"Fired on the KeyPress event.";

        public const string MudInputString_KeyPressPreventDefault = @"Prevent the default action for the KeyPress event.";

        public const string MudInputString_OnKeyUp = @"Fired on the KeyUp event.";

        public const string MudInputString_KeyUpPreventDefault = @"Prevent the default action for the KeyUp event.";

        public const string MudInputString_ValueChanged = @"Fired when the Value property changes.";

        public const string MudInputString_Value = @"The value of this input element.";

        public const string MudInputString_Format = @"Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans";

        public const string MudInputString_Required = @"If true, this form input is required to be filled out.";

        public const string MudInputString_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudInputString_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudInputString_Error = @"If true, the label will be displayed in an error state.";

        public const string MudInputString_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudInputString_Converter = @"The generic converter of the component.";

        public const string MudInputString_Culture = @"The culture of the component.";

        public const string MudInputString_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudInputString_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudInputString_Class = @"User class names, separated by space.";

        public const string MudInputString_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudInputString_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudInputString_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudInputString_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudInputString_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudInputString_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudInputString_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudInputString_method_System_Threading_Tasks_Task_SetText_System_String_ = @"
            <summary>
            Sets the input text from outside programmatically
            </summary>
            <param name=""text""></param>
            <returns></returns>
        ";

        public const string MudInputString_method_Void_ForceRender_Boolean_ = @"";

        public const string MudInputString_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudInputString_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudInputString_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudInputString_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudItem_xs = @"";

        public const string MudItem_sm = @"";

        public const string MudItem_md = @"";

        public const string MudItem_lg = @"";

        public const string MudItem_xl = @"";

        public const string MudItem_xxl = @"";

        public const string MudItem_ChildContent = @"";

        public const string MudItem_Class = @"User class names, separated by space.";

        public const string MudItem_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudItemDropInfo_method_Boolean_op_Inequality_MudBlazor_MudItemDropInfo_1_T___MudBlazor_MudItemDropInfo_1_T__ = @"";

        public const string MudItemDropInfo_method_Boolean_op_Equality_MudBlazor_MudItemDropInfo_1_T___MudBlazor_MudItemDropInfo_1_T__ = @"";

        public const string MudItemDropInfo_method_MudBlazor_MudItemDropInfo_1_T___Clone____ = @"";

        public const string MudItemDropInfo_method_Void_Deconstruct_T_ByRef__System_String_ByRef__Int32_ByRef_ = @"";

        public const string MudLayout_ChildContent = @"";

        public const string MudLayout_Class = @"User class names, separated by space.";

        public const string MudLayout_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudLayout_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudLayout_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudLink_Color = @"The color of the component. It supports the theme colors.";

        public const string MudLink_Typo = @"Typography variant to use.";

        public const string MudLink_Underline = @"Controls when the link should have an underline.";

        public const string MudLink_Href = @"The URL, which is the actual link.";

        public const string MudLink_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

        public const string MudLink_ChildContent = @"Child content of component.";

        public const string MudLink_Disabled = @"If true, the navlink will be disabled.";

        public const string MudLink_Class = @"User class names, separated by space.";

        public const string MudLink_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudLink_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudLink_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudList_Color = @"The color of the selected List Item.";

        public const string MudList_ChildContent = @"Child content of component.";

        public const string MudList_Clickable = @"Set true to make the list items clickable. This is also the precondition for list selection to work.";

        public const string MudList_DisablePadding = @"If true, vertical padding will be removed from the list.";

        public const string MudList_Dense = @"If true, compact vertical padding will be applied to all list items.";

        public const string MudList_DisableGutters = @"If true, the left and right padding is removed on all list items.";

        public const string MudList_Disabled = @"If true, will disable the list item if it has onclick.";

        public const string MudList_SelectedItem = @"The current selected list item.
            Note: make the list Clickable for item selection to work.";

        public const string MudList_SelectedItemChanged = @"Called whenever the selection changed";

        public const string MudList_SelectedValue = @"The current selected value.
            Note: make the list Clickable for item selection to work.";

        public const string MudList_SelectedValueChanged = @"Called whenever the selection changed";

        public const string MudList_Class = @"User class names, separated by space.";

        public const string MudList_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudList_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudList_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudList_method_Void_Dispose__ = @"";

        public const string MudListItem_Text = @"The text to display";

        public const string MudListItem_Value = @"";

        public const string MudListItem_Avatar = @"Avatar to use if set.";

        public const string MudListItem_Href = @"Link to a URL when clicked.";

        public const string MudListItem_ForceLoad = @"If true, force browser to redirect outside component router-space.";

        public const string MudListItem_AvatarClass = @"Avatar CSS Class to apply if Avatar is set.";

        public const string MudListItem_Disabled = @"If true, will disable the list item if it has onclick.
            The value can be overridden by the parent list.";

        public const string MudListItem_DisableRipple = @"If true, disables ripple effect.";

        public const string MudListItem_Icon = @"Icon to use if set.";

        public const string MudListItem_IconColor = @"The color of the icon.";

        public const string MudListItem_IconSize = @"Sets the Icon Size.";

        public const string MudListItem_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudListItem_ExpandLessIcon = @"Custom expand less icon.";

        public const string MudListItem_ExpandMoreIcon = @"Custom expand more icon.";

        public const string MudListItem_Inset = @"If true, the List Subheader will be indented.";

        public const string MudListItem_Dense = @"If true, compact vertical padding will be used.";

        public const string MudListItem_DisableGutters = @"If true, the left and right padding is removed.";

        public const string MudListItem_Expanded = @"Expand or collapse nested list. Two-way bindable. Note: if you directly set this to
            true or false (instead of using two-way binding) it will force the nested list's expansion state.";

        public const string MudListItem_ExpandedChanged = @"";

        public const string MudListItem_InitiallyExpanded = @"If true, expands the nested list on first display";

        public const string MudListItem_CommandParameter = @"Command parameter.";

        public const string MudListItem_Command = @"Command executed when the user clicks on an element.";

        public const string MudListItem_ChildContent = @"Display content of this list item. If set, this overrides Text";

        public const string MudListItem_OnClickHandlerPreventDefault = @"";

        public const string MudListItem_NestedList = @"Add child list items here to create a nested list.";

        public const string MudListItem_OnClick = @"List click event.";

        public const string MudListItem_Class = @"User class names, separated by space.";

        public const string MudListItem_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudListItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudListItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudListItem_method_Void_Dispose__ = @"";

        public const string MudListSubheader_ChildContent = @"";

        public const string MudListSubheader_DisableGutters = @"";

        public const string MudListSubheader_Inset = @"";

        public const string MudListSubheader_Class = @"User class names, separated by space.";

        public const string MudListSubheader_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudListSubheader_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudListSubheader_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudMainContent_ChildContent = @"";

        public const string MudMainContent_Class = @"User class names, separated by space.";

        public const string MudMainContent_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudMainContent_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudMainContent_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudMask_ChildContent = @"ChildContent will only be displayed if InputType.Hidden and if its not null. Required for Select";

        public const string MudMask_Mask = @"Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask";

        public const string MudMask_InputType = @"Type of the input element. It should be a valid HTML5 input type.";

        public const string MudMask_Clearable = @"Show clear button.";

        public const string MudMask_OnClearButtonClick = @"Button click event for clear button. Called after text and value has been cleared.";

        public const string MudMask_ClearIcon = @"Custom clear icon.";

        public const string MudMask_Disabled = @"If true, the input element will be disabled.";

        public const string MudMask_ReadOnly = @"If true, the input will be read-only.";

        public const string MudMask_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudMask_Immediate = @"If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.";

        public const string MudMask_DisableUnderLine = @"If true, the input will not have an underline.";

        public const string MudMask_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudMask_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudMask_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudMask_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudMask_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudMask_OnlyValidateIfDirty = @"The validation is only triggered if the user has changed the input value at least once. By default, it is false";

        public const string MudMask_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudMask_AdornmentAriaLabel = @"The aria-label of the adornment.";

        public const string MudMask_IconSize = @"The Icon Size.";

        public const string MudMask_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudMask_Variant = @"Variant to use.";

        public const string MudMask_Margin = @"Will adjust vertical spacing.";

        public const string MudMask_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudMask_Counter = @"If set, will display the counter, value 0 will display current count but no stop count.";

        public const string MudMask_MaxLength = @"Maximum number of characters that the input will accept";

        public const string MudMask_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudMask_AutoFocus = @"If true the input will focus automatically.";

        public const string MudMask_Lines = @"A multiline input (textarea) will be shown, if set to more than one line.";

        public const string MudMask_Text = @"The text to be displayed.";

        public const string MudMask_TextUpdateSuppression = @"When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.";

        public const string MudMask_InputMode = @"Hints at the type of data that might be entered by the user while editing the input";

        public const string MudMask_Pattern = @"The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
            Not Supported in multline input";

        public const string MudMask_TextChanged = @"Fired when the text value changes.";

        public const string MudMask_OnBlur = @"Fired when the element loses focus.";

        public const string MudMask_OnInternalInputChanged = @"Fired when the element changes internally its text value.";

        public const string MudMask_OnKeyDown = @"Fired on the KeyDown event.";

        public const string MudMask_KeyDownPreventDefault = @"Prevent the default action for the KeyDown event.";

        public const string MudMask_OnKeyPress = @"Fired on the KeyPress event.";

        public const string MudMask_KeyPressPreventDefault = @"Prevent the default action for the KeyPress event.";

        public const string MudMask_OnKeyUp = @"Fired on the KeyUp event.";

        public const string MudMask_KeyUpPreventDefault = @"Prevent the default action for the KeyUp event.";

        public const string MudMask_ValueChanged = @"Fired when the Value property changes.";

        public const string MudMask_Value = @"The value of this input element.";

        public const string MudMask_Format = @"Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans";

        public const string MudMask_Required = @"If true, this form input is required to be filled out.";

        public const string MudMask_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudMask_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudMask_Error = @"If true, the label will be displayed in an error state.";

        public const string MudMask_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudMask_Converter = @"The generic converter of the component.";

        public const string MudMask_Culture = @"The culture of the component.";

        public const string MudMask_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudMask_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudMask_Class = @"User class names, separated by space.";

        public const string MudMask_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudMask_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudMask_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudMask_method_System_Threading_Tasks_Task_Clear__ = @"
            <summary>
            Clear the text field. 
            </summary>
            <returns></returns>
        ";

        public const string MudMask_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudMask_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudMask_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudMask_method_Void_OnSelect_Int32__Int32_ = @"";

        public const string MudMask_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudMask_method_Void_ForceRender_Boolean_ = @"";

        public const string MudMask_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudMask_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudMask_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudMask_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudMenu_Label = @"";

        public const string MudMenu_ListClass = @"User class names for the list, separated by space";

        public const string MudMenu_PopoverClass = @"User class names for the popover, separated by space";

        public const string MudMenu_Icon = @"Icon to use if set will turn the button into a MudIconButton.";

        public const string MudMenu_IconColor = @"The color of the icon. It supports the theme colors.";

        public const string MudMenu_StartIcon = @"Icon placed before the text if set.";

        public const string MudMenu_EndIcon = @"Icon placed after the text if set.";

        public const string MudMenu_Color = @"The color of the button. It supports the theme colors.";

        public const string MudMenu_Size = @"The button Size of the component.";

        public const string MudMenu_Variant = @"The button variant to use.";

        public const string MudMenu_Dense = @"If true, compact vertical padding will be applied to all menu items.";

        public const string MudMenu_FullWidth = @"If true, the list menu will be same width as the parent.";

        public const string MudMenu_MaxHeight = @"Sets the maxheight the menu can have when open.";

        public const string MudMenu_PositionAtCursor = @"If true, instead of positioning the menu at the left upper corner, position at the exact cursor location.
            This makes sense for larger activators";

        public const string MudMenu_PositionAtCurser = @"If true, instead of positioning the menu at the left upper corner, position at the exact cursor location.
            This makes sense for larger activators";

        public const string MudMenu_ActivatorContent = @"Place a MudButton, a MudIconButton or any other component capable of acting as an activator. This will
            override the standard button and all parameters which concern it.";

        public const string MudMenu_ActivationEvent = @"Specify the activation event when ActivatorContent is set";

        public const string MudMenu_AnchorOrigin = @"Set the anchor origin point to determen where the popover will open from.";

        public const string MudMenu_TransformOrigin = @"Sets the transform origin point for the popover.";

        public const string MudMenu_Direction = @"Sets the direction the select menu will start from relative to its parent.";

        public const string MudMenu_OffsetY = @"If true, the select menu will open either before or after the input depending on the direction.";

        public const string MudMenu_OffsetX = @"If true, the select menu will open either above or bellow the input depending on the direction.";

        public const string MudMenu_LockScroll = @"Set to true if you want to prevent page from scrolling when the menu is open";

        public const string MudMenu_Disabled = @"If true, menu will be disabled.";

        public const string MudMenu_DisableRipple = @"If true, disables ripple effect.";

        public const string MudMenu_DisableElevation = @"If true, no drop-shadow will be used.";

        public const string MudMenu_Link = @"";

        public const string MudMenu_Target = @"";

        public const string MudMenu_HtmlTag = @"";

        public const string MudMenu_ButtonType = @"";

        public const string MudMenu_Command = @"";

        public const string MudMenu_CommandParameter = @"";

        public const string MudMenu_ChildContent = @"Add menu items here";

        public const string MudMenu_Class = @"User class names, separated by space.";

        public const string MudMenu_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudMenu_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudMenu_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudMenu_method_Void_CloseMenu__ = @"";

        public const string MudMenu_method_Void_OpenMenu_System_EventArgs_ = @"";

        public const string MudMenu_method_Void_ToggleMenu_Microsoft_AspNetCore_Components_Web_MouseEventArgs_ = @"";

        public const string MudMenu_method_Void_ToggleMenuTouch_Microsoft_AspNetCore_Components_Web_TouchEventArgs_ = @"";

        public const string MudMenu_method_Void_Activate_System_Object__Microsoft_AspNetCore_Components_Web_MouseEventArgs_ = @"
            <summary>
            Implementation of IActivatable.Activate, toggles the menu.
            </summary>
            <param name=""activator""></param>
            <param name=""args""></param>
        ";

        public const string MudMenu_method_Void_MouseEnter_System_EventArgs_ = @"";

        public const string MudMenu_method_Void_MouseLeave__ = @"";

        public const string MudMenuItem_ChildContent = @"";

        public const string MudMenuItem_Disabled = @"";

        public const string MudMenuItem_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where (Obsolete replaced by Href)";

        public const string MudMenuItem_Href = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

        public const string MudMenuItem_Icon = @"Icon to be used for this menu entry";

        public const string MudMenuItem_IconColor = @"The color of the icon. It supports the theme colors.";

        public const string MudMenuItem_IconSize = @"The Icon Size.";

        public const string MudMenuItem_Target = @"";

        public const string MudMenuItem_ForceLoad = @"";

        public const string MudMenuItem_Command = @"";

        public const string MudMenuItem_CommandParameter = @"";

        public const string MudMenuItem_OnClick = @"";

        public const string MudMenuItem_OnTouch = @"";

        public const string MudMenuItem_Class = @"User class names, separated by space.";

        public const string MudMenuItem_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudMenuItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudMenuItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudMessageBox_Title = @"The message box title. If null or empty, title will be hidden";

        public const string MudMessageBox_TitleContent = @"Define the message box title as a renderfragment (overrides Title)";

        public const string MudMessageBox_Message = @"The message box message as string.";

        public const string MudMessageBox_MarkupMessage = @"The message box message as markup string.";

        public const string MudMessageBox_MessageContent = @"Define the message box body as a renderfragment (overrides Message)";

        public const string MudMessageBox_CancelText = @"Text of the cancel button. Leave null to hide the button.";

        public const string MudMessageBox_CancelButton = @"Define the cancel button as a render fragment (overrides CancelText).
            Must be a MudButton";

        public const string MudMessageBox_NoText = @"Text of the no button. Leave null to hide the button.";

        public const string MudMessageBox_NoButton = @"Define the no button as a render fragment (overrides CancelText).
            Must be a MudButton";

        public const string MudMessageBox_YesText = @"Text of the yes/OK button. Leave null to hide the button.";

        public const string MudMessageBox_YesButton = @"Define the cancel button as a render fragment (overrides CancelText).
            Must be a MudButton";

        public const string MudMessageBox_OnYes = @"Fired when the yes button is clicked";

        public const string MudMessageBox_OnNo = @"Fired when the no button is clicked";

        public const string MudMessageBox_OnCancel = @"Fired when the cancel button is clicked or the msg box was closed via the X";

        public const string MudMessageBox_IsVisible = @"Bind this two-way to show and close an inlined message box. Has no effect on opened msg boxes";

        public const string MudMessageBox_IsVisibleChanged = @"Raised when the inline dialog's display status changes.";

        public const string MudMessageBox_Class = @"User class names, separated by space.";

        public const string MudMessageBox_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudMessageBox_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudMessageBox_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudMessageBox_method_System_Threading_Tasks_Task_1_System_Nullable_1_System_Boolean___Show_MudBlazor_DialogOptions_ = @"";

        public const string MudMessageBox_method_Void_Close__ = @"";

        public const string MudNavGroup_Title = @"";

        public const string MudNavGroup_Icon = @"Icon to use if set.";

        public const string MudNavGroup_IconColor = @"The color of the icon. It supports the theme colors, default value uses the themes drawer icon color.";

        public const string MudNavGroup_Disabled = @"If true, the button will be disabled.";

        public const string MudNavGroup_DisableRipple = @"If true, disables ripple effect.";

        public const string MudNavGroup_Expanded = @"If true, expands the nav group, otherwise collapse it. 
            Two-way bindable";

        public const string MudNavGroup_ExpandedChanged = @"";

        public const string MudNavGroup_HideExpandIcon = @"If true, hides expand-icon at the end of the NavGroup.";

        public const string MudNavGroup_MaxHeight = @"Explicitly sets the height for the Collapse element to override the css default.";

        public const string MudNavGroup_ExpandIcon = @"If set, overrides the default expand icon.";

        public const string MudNavGroup_ChildContent = @"";

        public const string MudNavGroup_Class = @"User class names, separated by space.";

        public const string MudNavGroup_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudNavGroup_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudNavGroup_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudNavLink_Icon = @"Icon to use if set.";

        public const string MudNavLink_IconColor = @"The color of the icon. It supports the theme colors, default value uses the themes drawer icon color.";

        public const string MudNavLink_Match = @"";

        public const string MudNavLink_Target = @"";

        public const string MudNavLink_Disabled = @"If true, the input element will be disabled.";

        public const string MudNavLink_DisableRipple = @"If true, disables ripple effect.";

        public const string MudNavLink_Href = @"Link to a URL when clicked.";

        public const string MudNavLink_ForceLoad = @"If true, force browser to redirect outside component router-space.";

        public const string MudNavLink_ChildContent = @"Child content of component.";

        public const string MudNavLink_CommandParameter = @"Command parameter.";

        public const string MudNavLink_Command = @"Command executed when the user clicks on an element.";

        public const string MudNavLink_OnClick = @"";

        public const string MudNavLink_Class = @"User class names, separated by space.";

        public const string MudNavLink_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudNavLink_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudNavLink_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudNavMenu_ChildContent = @"";

        public const string MudNavMenu_Color = @"The color of the active NavLink.";

        public const string MudNavMenu_Bordered = @"If true, adds a border of the active NavLink, does nothing if variant outlined is used.";

        public const string MudNavMenu_Rounded = @"If true, default theme border-radius will be used on all navlinks.";

        public const string MudNavMenu_Margin = @"Adjust the vertical spacing between navlinks.";

        public const string MudNavMenu_Dense = @"If true, compact vertical padding will be applied to all navmenu items.";

        public const string MudNavMenu_Class = @"User class names, separated by space.";

        public const string MudNavMenu_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudNavMenu_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudNavMenu_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudNumericField_Clearable = @"Show clear button.";

        public const string MudNumericField_InvertMouseWheel = @"Reverts mouse wheel up and down events, if true.";

        public const string MudNumericField_Min = @"The minimum value for the input.";

        public const string MudNumericField_Max = @"The maximum value for the input.";

        public const string MudNumericField_Step = @"The increment added/subtracted by the spin buttons.";

        public const string MudNumericField_HideSpinButtons = @"Hides the spin buttons, the user can still change value with keyboard arrows and manual update.";

        public const string MudNumericField_InputMode = @"Hints at the type of data that might be entered by the user while editing the input.
             Defaults to numeric";

        public const string MudNumericField_Pattern = @"The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
             Defaults to [0-9,.\-]
             To get a numerical keyboard on safari, use the pattern. The default pattern should achieve numerical keyboard.
            
             Note: this pattern is also used to prevent all input except numbers and allowed characters. So for instance to allow only numbers, no signs and no commas you might change it to to [0-9.]";

        public const string MudNumericField_DebounceInterval = @"Interval to be awaited in milliseconds before changing the Text value";

        public const string MudNumericField_OnDebounceIntervalElapsed = @"callback to be called when the debounce interval has elapsed
            receives the Text as a parameter";

        public const string MudNumericField_Disabled = @"If true, the input element will be disabled.";

        public const string MudNumericField_ReadOnly = @"If true, the input will be read-only.";

        public const string MudNumericField_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudNumericField_Immediate = @"If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.";

        public const string MudNumericField_DisableUnderLine = @"If true, the input will not have an underline.";

        public const string MudNumericField_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudNumericField_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudNumericField_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudNumericField_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudNumericField_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudNumericField_OnlyValidateIfDirty = @"The validation is only triggered if the user has changed the input value at least once. By default, it is false";

        public const string MudNumericField_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudNumericField_AdornmentAriaLabel = @"The aria-label of the adornment.";

        public const string MudNumericField_IconSize = @"The Icon Size.";

        public const string MudNumericField_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudNumericField_Variant = @"Variant to use.";

        public const string MudNumericField_Margin = @"Will adjust vertical spacing.";

        public const string MudNumericField_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudNumericField_Counter = @"If set, will display the counter, value 0 will display current count but no stop count.";

        public const string MudNumericField_MaxLength = @"Maximum number of characters that the input will accept";

        public const string MudNumericField_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudNumericField_AutoFocus = @"If true the input will focus automatically.";

        public const string MudNumericField_Lines = @"A multiline input (textarea) will be shown, if set to more than one line.";

        public const string MudNumericField_Text = @"The text to be displayed.";

        public const string MudNumericField_TextUpdateSuppression = @"When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.";

        public const string MudNumericField_TextChanged = @"Fired when the text value changes.";

        public const string MudNumericField_OnBlur = @"Fired when the element loses focus.";

        public const string MudNumericField_OnInternalInputChanged = @"Fired when the element changes internally its text value.";

        public const string MudNumericField_OnKeyDown = @"Fired on the KeyDown event.";

        public const string MudNumericField_KeyDownPreventDefault = @"Prevent the default action for the KeyDown event.";

        public const string MudNumericField_OnKeyPress = @"Fired on the KeyPress event.";

        public const string MudNumericField_KeyPressPreventDefault = @"Prevent the default action for the KeyPress event.";

        public const string MudNumericField_OnKeyUp = @"Fired on the KeyUp event.";

        public const string MudNumericField_KeyUpPreventDefault = @"Prevent the default action for the KeyUp event.";

        public const string MudNumericField_ValueChanged = @"Fired when the Value property changes.";

        public const string MudNumericField_Value = @"The value of this input element.";

        public const string MudNumericField_Format = @"Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans";

        public const string MudNumericField_Required = @"If true, this form input is required to be filled out.";

        public const string MudNumericField_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudNumericField_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudNumericField_Error = @"If true, the label will be displayed in an error state.";

        public const string MudNumericField_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudNumericField_Converter = @"The generic converter of the component.";

        public const string MudNumericField_Culture = @"The culture of the component.";

        public const string MudNumericField_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudNumericField_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudNumericField_Class = @"User class names, separated by space.";

        public const string MudNumericField_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudNumericField_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudNumericField_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudNumericField_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudNumericField_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudNumericField_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudNumericField_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudNumericField_method_System_Threading_Tasks_Task_Increment__ = @"
            <summary>
            Adds a Step to the Value
            </summary>
        ";

        public const string MudNumericField_method_System_Threading_Tasks_Task_Decrement__ = @"
            <summary>
            Substracts a Step from the Value
            </summary>
        ";

        public const string MudNumericField_method_Void_ForceRender_Boolean_ = @"";

        public const string MudNumericField_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudNumericField_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudNumericField_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudNumericField_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudOverlay_ChildContent = @"Child content of the component.";

        public const string MudOverlay_VisibleChanged = @"Fires when Visible changes";

        public const string MudOverlay_Visible = @"If true overlay will be visible. Two-way bindable.";

        public const string MudOverlay_AutoClose = @"If true overlay will set Visible false on click.";

        public const string MudOverlay_LockScroll = @"If true (default), the Document.body element will not be able to scroll";

        public const string MudOverlay_LockScrollClass = @"The css class that will be added to body if lockscroll is used.";

        public const string MudOverlay_DarkBackground = @"If true applys the themes dark overlay color.";

        public const string MudOverlay_LightBackground = @"If true applys the themes light overlay color.";

        public const string MudOverlay_Absolute = @"Icon class names, separated by space";

        public const string MudOverlay_ZIndex = @"Sets the z-index of the overlay.";

        public const string MudOverlay_CommandParameter = @"Command parameter.";

        public const string MudOverlay_Command = @"Command executed when the user clicks on an element.";

        public const string MudOverlay_OnClick = @"Fired when the overlay is clicked";

        public const string MudOverlay_Class = @"User class names, separated by space.";

        public const string MudOverlay_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudOverlay_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudOverlay_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudOverlay_method_Void_Dispose__ = @"";

        public const string MudPageContentNavigation_Headline = @"The text displayed about the section links. Defaults to ""Conents""";

        public const string MudPageContentNavigation_SectionClassSelector = @"The css selector used to identifify the HTML elements that should be observed for viewport changes";

        public const string MudPageContentNavigation_HierarchyMapper = @"If there are mutliple levels, this can specified to make a mapping between a level class likw ""second-level"" and the level in the hierarchy";

        public const string MudPageContentNavigation_ExpandBehaviour = @"If there are multiple levels, this property controls they visibility of them.";

        public const string MudPageContentNavigation_ActivateFirstSectionAsDefault = @"If this option is true the first added section will become active when there is no other indication of an active session. Default value is false";

        public const string MudPageContentNavigation_Class = @"User class names, separated by space.";

        public const string MudPageContentNavigation_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudPageContentNavigation_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudPageContentNavigation_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudPageContentNavigation_method_System_Threading_Tasks_Task_ScrollToSection_System_Uri_ = @"
            <summary>
            Scrolls to a section based on the fragment of the uri. If there is no fragment, no scroll will occured
            </summary>
            <param name=""uri"">The uri containing the fragment to scroll</param>
            <returns>A task that completes when the viewport has scrolled</returns>
        ";

        public const string MudPageContentNavigation_method_Void_AddSection_System_String__System_String__Boolean_ = @"
            <summary>
            Add a section to the content navigation
            </summary>
            <param name=""sectionName"">name of the section will be displayed in the navigation</param>
            <param name=""sectionId"">id of the section. It will be appending to the current url, if the section becomes active</param>
            <param name=""forceUpdate"">If true, StateHasChanged is called, forcing a rerender of the component</param>
        ";

        public const string MudPageContentNavigation_method_Void_AddSection_MudBlazor_MudPageContentSection__Boolean_ = @"
            <summary>
            Add a section to the content navigation
            </summary>
            <param name=""section"">The section that needs to be added</param>
            <param name=""forceUpdate"">If true, StateHasChanged is called, forcing a rerender of the component</param>
        ";

        public const string MudPageContentNavigation_method_Void_Update__ = @"
            <summary>
            Rerender the component
            </summary>
        ";

        public const string MudPageContentNavigation_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string MudPagination_Count = @"The number of pages.";

        public const string MudPagination_BoundaryCount = @"The number of items at the start and end of the pagination.";

        public const string MudPagination_MiddleCount = @"The number of items in the middle of the pagination.";

        public const string MudPagination_Selected = @"The selected page number.";

        public const string MudPagination_Variant = @"The variant to use.";

        public const string MudPagination_Color = @"The color of the component. It supports the theme colors.";

        public const string MudPagination_Rectangular = @"If true, the pagination buttons are displayed rectangular.";

        public const string MudPagination_Size = @"The size of the component..";

        public const string MudPagination_DisableElevation = @"If true, no drop-shadow will be used.";

        public const string MudPagination_Disabled = @"If true, the pagination will be disabled.";

        public const string MudPagination_ShowFirstButton = @"If true, the navigate-to-first-page button is shown.";

        public const string MudPagination_ShowLastButton = @"If true, the navigate-to-last-page button is shown.";

        public const string MudPagination_ShowPreviousButton = @"If true, the navigate-to-previous-page button is shown.";

        public const string MudPagination_ShowNextButton = @"If true, the navigate-to-next-page button is shown.";

        public const string MudPagination_ControlButtonClicked = @"Invokes the callback when a control button is clicked.";

        public const string MudPagination_SelectedChanged = @"Invokes the callback when selected page changes.";

        public const string MudPagination_FirstIcon = @"Custom first icon.";

        public const string MudPagination_BeforeIcon = @"Custom before icon.";

        public const string MudPagination_NextIcon = @"Custom next icon.";

        public const string MudPagination_LastIcon = @"Custom last icon.";

        public const string MudPagination_Class = @"User class names, separated by space.";

        public const string MudPagination_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudPagination_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudPagination_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudPagination_method_Void_NavigateTo_MudBlazor_Page_ = @"
            <summary>
            Navigates to the specified page.
            </summary>
            <param name=""page"">The target page. page=Page.Next navigates to the next page.</param>
        ";

        public const string MudPagination_method_Void_NavigateTo_Int32_ = @"
            <summary>
            Navigates to the specified page.
            </summary>
            <param name=""pageIndex""></param>The target page. pageIndex=2 navigates to the 3. page.
        ";

        public const string MudPaper_Elevation = @"The higher the number, the heavier the drop-shadow.";

        public const string MudPaper_Square = @"If true, border-radius is set to 0.";

        public const string MudPaper_Outlined = @"If true, card will be outlined.";

        public const string MudPaper_Height = @"Height of the component.";

        public const string MudPaper_Width = @"Width of the component.";

        public const string MudPaper_MaxHeight = @"Max-Height of the component.";

        public const string MudPaper_MaxWidth = @"Max-Width of the component.";

        public const string MudPaper_MinHeight = @"Min-Height of the component.";

        public const string MudPaper_MinWidth = @"Min-Width of the component.";

        public const string MudPaper_ChildContent = @"Child content of the component.";

        public const string MudPaper_Class = @"User class names, separated by space.";

        public const string MudPaper_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudPaper_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudPaper_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudPicker_InputIcon = @"Sets the icon of the input text field";

        public const string MudPicker_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudPicker_AdornmentIcon = @"Sets the icon of the input text field";

        public const string MudPicker_AdornmentAriaLabel = @"Sets the aria-label of the input text field icon";

        public const string MudPicker_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudPicker_PickerOpened = @"Fired when the dropdown / dialog opens";

        public const string MudPicker_PickerClosed = @"Fired when the dropdown / dialog closes";

        public const string MudPicker_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.";

        public const string MudPicker_Square = @"If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.";

        public const string MudPicker_ReadOnly = @"If true, no date or time can be defined.";

        public const string MudPicker_Rounded = @"If true, border-radius is set to theme default when in Static Mode.";

        public const string MudPicker_HelperText = @"If string has value, HelperText will be applied.";

        public const string MudPicker_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudPicker_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudPicker_Clearable = @"Show clear button.";

        public const string MudPicker_Disabled = @"If true, the picker will be disabled.";

        public const string MudPicker_Editable = @"If true, the picker will be editable.";

        public const string MudPicker_DisableToolbar = @"Hide toolbar and show only date/time views.";

        public const string MudPicker_ToolBarClass = @"User class names for picker's ToolBar, separated by space";

        public const string MudPicker_PickerVariant = @"Picker container option";

        public const string MudPicker_InputVariant = @"Variant of the text input";

        public const string MudPicker_Variant = @"Variant of the text input";

        public const string MudPicker_Adornment = @"Sets if the icon will be att start or end, set to false to disable.";

        public const string MudPicker_Orientation = @"What orientation to render in when in PickerVariant Static Mode.";

        public const string MudPicker_IconSize = @"Sets the Icon Size.";

        public const string MudPicker_Color = @"The color of the toolbar, selected and active. It supports the theme colors.";

        public const string MudPicker_AllowKeyboardInput = @"Changes the cursor appearance.";

        public const string MudPicker_TextChanged = @"Fired when the text changes.";

        public const string MudPicker_Text = @"The currently selected string value (two-way bindable)";

        public const string MudPicker_ClassActions = @"CSS class that will be applied to the action buttons container";

        public const string MudPicker_PickerActions = @"Define the action buttons here";

        public const string MudPicker_Margin = @"Will adjust vertical spacing.";

        public const string MudPicker_Mask = @"A mask for structured input of the date (requires Editable to be true).";

        public const string MudPicker_AnchorOrigin = @"Gets or sets the origin of the popover's anchor. Defaults to Origin.TopLeft";

        public const string MudPicker_TransformOrigin = @"Gets or sets the origin of the popover's transform. Defaults to Origin.TopLeft";

        public const string MudPicker_Required = @"If true, this form input is required to be filled out.";

        public const string MudPicker_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudPicker_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudPicker_Error = @"If true, the label will be displayed in an error state.";

        public const string MudPicker_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudPicker_Converter = @"The generic converter of the component.";

        public const string MudPicker_Culture = @"The culture of the component.";

        public const string MudPicker_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudPicker_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudPicker_Class = @"User class names, separated by space.";

        public const string MudPicker_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudPicker_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudPicker_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudPicker_method_Void_ToggleOpen__ = @"";

        public const string MudPicker_method_Void_Close_Boolean_ = @"";

        public const string MudPicker_method_Void_Open__ = @"";

        public const string MudPicker_method_Void_Clear_Boolean_ = @"";

        public const string MudPicker_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudPicker_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudPicker_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudPicker_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudPicker_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudPicker_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudPicker_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudPicker_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudPickerContent_Class = @"";

        public const string MudPickerContent_ChildContent = @"";

        public const string MudPickerToolbar_Class = @"";

        public const string MudPickerToolbar_Style = @"";

        public const string MudPickerToolbar_DisableToolbar = @"";

        public const string MudPickerToolbar_Orientation = @"";

        public const string MudPickerToolbar_Color = @"";

        public const string MudPickerToolbar_ChildContent = @"";

        public const string MudPopover_MaxHeight = @"Sets the maxheight the popover can have when open.";

        public const string MudPopover_Paper = @"If true, will apply default MudPaper classes.";

        public const string MudPopover_Elevation = @"The higher the number, the heavier the drop-shadow.";

        public const string MudPopover_Square = @"If true, border-radius is set to 0.";

        public const string MudPopover_Open = @"If true, the popover is visible.";

        public const string MudPopover_Fixed = @"If true the popover will be fixed position instead of absolute.";

        public const string MudPopover_Duration = @"Sets the length of time that the opening transition takes to complete.";

        public const string MudPopover_Delay = @"Sets the amount of time in milliseconds to wait from opening the popover before beginning to perform the transition.";

        public const string MudPopover_Direction = @"Sets the direction the popover will start from relative to its parent.";

        public const string MudPopover_AnchorOrigin = @"Set the anchor point on the element of the popover.
            The anchor point will determinate where the popover will be placed.";

        public const string MudPopover_TransformOrigin = @"Sets the intersection point if the anchor element. At this point the popover will lay above the popover. 
            This property in conjunction with AnchorPlacement determinate where the popover will be placed.";

        public const string MudPopover_OverflowBehavior = @"Set the overflow behavior of a popover and controls how the element should react if there is not enough space for the element to be visible
            Defaults to none, which doens't apply any overflow logic";

        public const string MudPopover_OffsetX = @"If true, the select menu will open either above or bellow the input depending on the direction.";

        public const string MudPopover_OffsetY = @"If true, the select menu will open either before or after the input depending on the direction.";

        public const string MudPopover_RelativeWidth = @"If true, the popover will have the same width at its parent element, default to false";

        public const string MudPopover_ChildContent = @"Child content of the component.";

        public const string MudPopover_Class = @"User class names, separated by space.";

        public const string MudPopover_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudPopover_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudPopover_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudPopover_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string MudPopoverHandler_method_Void_SetComponentBaseParameters_MudBlazor_MudComponentBase__System_String__System_String__Boolean_ = @"";

        public const string MudPopoverHandler_method_Void_UpdateFragment_Microsoft_AspNetCore_Components_RenderFragment__MudBlazor_MudComponentBase__System_String__System_String__Boolean_ = @"";

        public const string MudPopoverHandler_method_System_Threading_Tasks_Task_Initialize__ = @"";

        public const string MudPopoverHandler_method_System_Threading_Tasks_Task_Detach__ = @"";

        public const string MudPopoverProvider_method_Void_Dispose__ = @"";

        public const string MudPopoverService_method_Void_add_FragmentsChanged_System_EventHandler_ = @"";

        public const string MudPopoverService_method_Void_remove_FragmentsChanged_System_EventHandler_ = @"";

        public const string MudPopoverService_method_System_Threading_Tasks_Task_InitializeIfNeeded__ = @"";

        public const string MudPopoverService_method_MudBlazor_MudPopoverHandler_Register_Microsoft_AspNetCore_Components_RenderFragment_ = @"";

        public const string MudPopoverService_method_System_Threading_Tasks_Task_1_System_Boolean__Unregister_MudBlazor_MudPopoverHandler_ = @"";

        public const string MudPopoverService_method_System_Threading_Tasks_ValueTask_1_System_Int32__CountProviders__ = @"";

        public const string MudPopoverService_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string MudProgressCircular_Color = @"The color of the component. It supports the theme colors.";

        public const string MudProgressCircular_Size = @"The size of the component.";

        public const string MudProgressCircular_Indeterminate = @"Constantly animates, does not follow any value.";

        public const string MudProgressCircular_Min = @"";

        public const string MudProgressCircular_Max = @"";

        public const string MudProgressCircular_Value = @"";

        public const string MudProgressCircular_StrokeWidth = @"";

        public const string MudProgressCircular_Minimum = @"";

        public const string MudProgressCircular_Maximum = @"";

        public const string MudProgressCircular_Class = @"User class names, separated by space.";

        public const string MudProgressCircular_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudProgressCircular_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudProgressCircular_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudProgressLinear_Color = @"The color of the component. It supports the theme colors.";

        public const string MudProgressLinear_Size = @"The color of the component. It supports the theme colors.";

        public const string MudProgressLinear_Indeterminate = @"Constantly animates, does not follow any value.";

        public const string MudProgressLinear_Buffer = @"If true, the buffer value will be used.";

        public const string MudProgressLinear_Rounded = @"If true, border-radius is set to the themes default value.";

        public const string MudProgressLinear_Striped = @"Adds stripes to the filled part of the linear progress.";

        public const string MudProgressLinear_Vertical = @"If true, the progress bar  will be displayed vertically.";

        public const string MudProgressLinear_ChildContent = @"Child content of component.";

        public const string MudProgressLinear_Min = @"The minimum allowed value of the linear progress. Should not be equal to max.";

        public const string MudProgressLinear_Max = @"The maximum allowed value of the linear progress. Should not be equal to min.";

        public const string MudProgressLinear_Value = @"The maximum allowed value of the linear progress. Should not be equal to min.";

        public const string MudProgressLinear_BufferValue = @"";

        public const string MudProgressLinear_Minimum = @"";

        public const string MudProgressLinear_Maximum = @"";

        public const string MudProgressLinear_Class = @"User class names, separated by space.";

        public const string MudProgressLinear_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudProgressLinear_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudProgressLinear_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudProgressLinear_method_Double_GetValuePercent__ = @"";

        public const string MudProgressLinear_method_Double_GetBufferPercent__ = @"";

        public const string MudProgressLinear_method_System_String_GetStyledBar1Transform__ = @"";

        public const string MudProgressLinear_method_System_String_GetStyledBar2Transform__ = @"";

        public const string MudRadio_Color = @"The color of the component. It supports the theme colors.";

        public const string MudRadio_UnCheckedColor = @"The base color of the component in its none active/unchecked state. It supports the theme colors.";

        public const string MudRadio_Placement = @"The position of the child content.";

        public const string MudRadio_Option = @"The value to associate to the button.";

        public const string MudRadio_Dense = @"If true, compact padding will be applied.";

        public const string MudRadio_Size = @"The Size of the component.";

        public const string MudRadio_DisableRipple = @"If true, disables ripple effect.";

        public const string MudRadio_Disabled = @"If true, the button will be disabled.";

        public const string MudRadio_ChildContent = @"Child content of component.";

        public const string MudRadio_Class = @"User class names, separated by space.";

        public const string MudRadio_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudRadio_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudRadio_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudRadio_method_Void_Select__ = @"";

        public const string MudRadio_method_Void_Dispose__ = @"";

        public const string MudRadioGroup_InputClass = @"User class names for the input, separated by space";

        public const string MudRadioGroup_InputStyle = @"User style definitions for the input";

        public const string MudRadioGroup_ChildContent = @"";

        public const string MudRadioGroup_Name = @"";

        public const string MudRadioGroup_SelectedOption = @"";

        public const string MudRadioGroup_SelectedOptionChanged = @"";

        public const string MudRadioGroup_Required = @"If true, this form input is required to be filled out.";

        public const string MudRadioGroup_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudRadioGroup_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudRadioGroup_Error = @"If true, the label will be displayed in an error state.";

        public const string MudRadioGroup_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudRadioGroup_Converter = @"The generic converter of the component.";

        public const string MudRadioGroup_Culture = @"The culture of the component.";

        public const string MudRadioGroup_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudRadioGroup_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudRadioGroup_Class = @"User class names, separated by space.";

        public const string MudRadioGroup_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudRadioGroup_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudRadioGroup_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudRadioGroup_method_Void_CheckGenericTypeMatch_System_Object_ = @"";

        public const string MudRadioGroup_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudRadioGroup_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudRadioGroup_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudRadioGroup_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudRangeInput_InputType = @"Type of the input element. It should be a valid HTML5 input type.";

        public const string MudRangeInput_PlaceholderStart = @"The short hint displayed in the start input before the user enters a value.";

        public const string MudRangeInput_PlaceholderEnd = @"The short hint displayed in the end input before the user enters a value.";

        public const string MudRangeInput_ChildContent = @"ChildContent of the MudInput will only be displayed if InputType.Hidden and if its not null.";

        public const string MudRangeInput_SeparatorIcon = @"Custom separator icon, leave null for default.";

        public const string MudRangeInput_Disabled = @"If true, the input element will be disabled.";

        public const string MudRangeInput_ReadOnly = @"If true, the input will be read-only.";

        public const string MudRangeInput_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudRangeInput_Immediate = @"If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.";

        public const string MudRangeInput_DisableUnderLine = @"If true, the input will not have an underline.";

        public const string MudRangeInput_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudRangeInput_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudRangeInput_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudRangeInput_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudRangeInput_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudRangeInput_OnlyValidateIfDirty = @"The validation is only triggered if the user has changed the input value at least once. By default, it is false";

        public const string MudRangeInput_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudRangeInput_AdornmentAriaLabel = @"The aria-label of the adornment.";

        public const string MudRangeInput_IconSize = @"The Icon Size.";

        public const string MudRangeInput_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudRangeInput_Variant = @"Variant to use.";

        public const string MudRangeInput_Margin = @"Will adjust vertical spacing.";

        public const string MudRangeInput_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudRangeInput_Counter = @"If set, will display the counter, value 0 will display current count but no stop count.";

        public const string MudRangeInput_MaxLength = @"Maximum number of characters that the input will accept";

        public const string MudRangeInput_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudRangeInput_AutoFocus = @"If true the input will focus automatically.";

        public const string MudRangeInput_Lines = @"A multiline input (textarea) will be shown, if set to more than one line.";

        public const string MudRangeInput_Text = @"The text to be displayed.";

        public const string MudRangeInput_TextUpdateSuppression = @"When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.";

        public const string MudRangeInput_InputMode = @"Hints at the type of data that might be entered by the user while editing the input";

        public const string MudRangeInput_Pattern = @"The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
            Not Supported in multline input";

        public const string MudRangeInput_TextChanged = @"Fired when the text value changes.";

        public const string MudRangeInput_OnBlur = @"Fired when the element loses focus.";

        public const string MudRangeInput_OnInternalInputChanged = @"Fired when the element changes internally its text value.";

        public const string MudRangeInput_OnKeyDown = @"Fired on the KeyDown event.";

        public const string MudRangeInput_KeyDownPreventDefault = @"Prevent the default action for the KeyDown event.";

        public const string MudRangeInput_OnKeyPress = @"Fired on the KeyPress event.";

        public const string MudRangeInput_KeyPressPreventDefault = @"Prevent the default action for the KeyPress event.";

        public const string MudRangeInput_OnKeyUp = @"Fired on the KeyUp event.";

        public const string MudRangeInput_KeyUpPreventDefault = @"Prevent the default action for the KeyUp event.";

        public const string MudRangeInput_ValueChanged = @"Fired when the Value property changes.";

        public const string MudRangeInput_Value = @"The value of this input element.";

        public const string MudRangeInput_Format = @"Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans";

        public const string MudRangeInput_Required = @"If true, this form input is required to be filled out.";

        public const string MudRangeInput_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudRangeInput_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudRangeInput_Error = @"If true, the label will be displayed in an error state.";

        public const string MudRangeInput_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudRangeInput_Converter = @"The generic converter of the component.";

        public const string MudRangeInput_Culture = @"The culture of the component.";

        public const string MudRangeInput_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudRangeInput_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudRangeInput_Class = @"User class names, separated by space.";

        public const string MudRangeInput_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudRangeInput_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudRangeInput_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudRangeInput_method_System_Threading_Tasks_ValueTask_FocusStartAsync__ = @"
            <summary>
            Focuses the start input of MudRangeInput
            </summary>
            <returns></returns>
        ";

        public const string MudRangeInput_method_System_Threading_Tasks_ValueTask_SelectStartAsync__ = @"
            <summary>
            Selects the start text of MudRangeInput
            </summary>
            <returns></returns>
        ";

        public const string MudRangeInput_method_System_Threading_Tasks_ValueTask_SelectRangeStartAsync_Int32__Int32_ = @"
            <summary>
            Selects the specified range of the start text
            </summary>
            <param name=""pos1"">Start position of the selection</param>
            <param name=""pos2"">End position of the selection</param>
            <returns></returns>
        ";

        public const string MudRangeInput_method_System_Threading_Tasks_ValueTask_FocusEndAsync__ = @"
            <summary>
            Focuses the end input of MudRangeInput
            </summary>
            <returns></returns>
        ";

        public const string MudRangeInput_method_System_Threading_Tasks_ValueTask_SelectEndAsync__ = @"
            <summary>
            Selects the end text of MudRangeInput
            </summary>
            <returns></returns>
        ";

        public const string MudRangeInput_method_System_Threading_Tasks_ValueTask_SelectRangeEndAsync_Int32__Int32_ = @"
            <summary>
            Selects the specified range of the end text
            </summary>
            <param name=""pos1"">Start position of the selection</param>
            <param name=""pos2"">End position of the selection</param>
            <returns></returns>
        ";

        public const string MudRangeInput_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"
            <summary>
            Focuses the element
            </summary>
            <returns>The ValueTask</returns>
        ";

        public const string MudRangeInput_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudRangeInput_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudRangeInput_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudRangeInput_method_Void_ForceRender_Boolean_ = @"";

        public const string MudRangeInput_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudRangeInput_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudRangeInput_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudRangeInput_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudRating_RatingItemsClass = @"User class names for RatingItems, separated by space";

        public const string MudRating_RatingItemsStyle = @"User styles for RatingItems.";

        public const string MudRating_Name = @"Input name. If not initialized, name will be random guid.";

        public const string MudRating_MaxValue = @"Max value and how many elements to click will be generated. Default: 5";

        public const string MudRating_FullIcon = @"Selected or hovered icon. Default @Icons.Material.Star";

        public const string MudRating_EmptyIcon = @"Non selected item icon. Default @Icons.Material.StarBorder";

        public const string MudRating_Color = @"The color of the component. It supports the theme colors.";

        public const string MudRating_Size = @"The Size of the icons.";

        public const string MudRating_DisableRipple = @"If true, disables ripple effect.";

        public const string MudRating_Disabled = @"If true, the controls will be disabled.";

        public const string MudRating_ReadOnly = @"If true, the ratings will show without interactions.";

        public const string MudRating_SelectedValueChanged = @"Fires when SelectedValue changes.";

        public const string MudRating_SelectedValue = @"Selected value. This property is two-way bindable.";

        public const string MudRating_HoveredValueChanged = @"Fires when hovered value change. Value will be null if no rating item is hovered.";

        public const string MudRating_Class = @"User class names, separated by space.";

        public const string MudRating_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudRating_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudRating_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudRatingItem_ItemValue = @"This rating item value;";

        public const string MudRatingItem_Size = @"The Size of the icon.";

        public const string MudRatingItem_Color = @"The color of the component. It supports the theme colors.";

        public const string MudRatingItem_DisableRipple = @"If true, disables ripple effect.";

        public const string MudRatingItem_Disabled = @"If true, the controls will be disabled.";

        public const string MudRatingItem_ReadOnly = @"If true, the item will be readonly.";

        public const string MudRatingItem_ItemClicked = @"Fires when element clicked.";

        public const string MudRatingItem_ItemHovered = @"Fires when element hovered.";

        public const string MudRatingItem_Class = @"User class names, separated by space.";

        public const string MudRatingItem_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudRatingItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudRatingItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudRender_ChildContent = @"The content to render";

        public const string MudRender_method_Void_ForceRender__ = @"
            <summary>
            Re-render the content
            </summary>
        ";

        public const string MudRTLProvider_RightToLeft = @"If true, changes the layout to RightToLeft.";

        public const string MudRTLProvider_ChildContent = @"Child content of the component.";

        public const string MudRTLProvider_Class = @"User class names, separated by space.";

        public const string MudRTLProvider_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudRTLProvider_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudRTLProvider_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudScrollToTop_ChildContent = @"";

        public const string MudScrollToTop_Selector = @"The CSS selector to which the scroll event will be attached";

        public const string MudScrollToTop_Visible = @"If set to true, it starts Visible. If sets to false, it will become visible when the TopOffset amount of scrolled pixels is reached";

        public const string MudScrollToTop_VisibleCssClass = @"CSS class for the Visible state. Here, apply some transitions and animations that will happen when the component becomes visible";

        public const string MudScrollToTop_HiddenCssClass = @"CSS class for the Hidden state. Here, apply some transitions and animations that will happen when the component becomes invisible";

        public const string MudScrollToTop_TopOffset = @"The distance in pixels scrolled from the top of the selected element from which 
            the component becomes visible";

        public const string MudScrollToTop_ScrollBehavior = @"Smooth or Auto";

        public const string MudScrollToTop_OnScroll = @"Called when scroll event is fired";

        public const string MudScrollToTop_Class = @"User class names, separated by space.";

        public const string MudScrollToTop_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudScrollToTop_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudScrollToTop_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudScrollToTop_method_Void_Dispose__ = @"
            <summary>
            Remove the event
            </summary>
        ";

        public const string MudSelect_OnOpen = @"Fired when dropdown opens.";

        public const string MudSelect_OnClose = @"Fired when dropdown closes.";

        public const string MudSelect_ChildContent = @"Add the MudSelectItems here";

        public const string MudSelect_PopoverClass = @"User class names for the popover, separated by space";

        public const string MudSelect_Dense = @"If true, compact vertical padding will be applied to all Select items.";

        public const string MudSelect_OpenIcon = @"The Open Select Icon";

        public const string MudSelect_CloseIcon = @"The Close Select Icon";

        public const string MudSelect_SelectAll = @"If set to true and the MultiSelection option is set to true, a ""select all"" checkbox is added at the top of the list of items.";

        public const string MudSelect_SelectAllText = @"Define the text of the Select All option.";

        public const string MudSelect_SelectedValuesChanged = @"Fires when SelectedValues changes.";

        public const string MudSelect_MultiSelectionTextFunc = @"Function to define a customized multiselection text.";

        public const string MudSelect_Delimiter = @"Parameter to define the delimited string separator.";

        public const string MudSelect_SelectedValues = @"Set of selected values. If MultiSelection is false it will only ever contain a single value. This property is two-way bindable.";

        public const string MudSelect_Comparer = @"The Comparer to use for comparing selected values internally.";

        public const string MudSelect_ToStringFunc = @"Defines how values are displayed in the drop-down list";

        public const string MudSelect_MultiSelection = @"If true, multiple values can be selected via checkboxes which are automatically shown in the dropdown";

        public const string MudSelect_MaxHeight = @"Sets the maxheight the Select can have when open.";

        public const string MudSelect_AnchorOrigin = @"Set the anchor origin point to determen where the popover will open from.";

        public const string MudSelect_TransformOrigin = @"Sets the transform origin point for the popover.";

        public const string MudSelect_Direction = @"Sets the direction the Select menu should open.";

        public const string MudSelect_OffsetX = @"If true, the Select menu will open either before or after the input (left/right).";

        public const string MudSelect_OffsetY = @"If true, the Select menu will open either before or after the input (top/bottom).
            
            [ExcludeFromCodeCoverage]";

        public const string MudSelect_Strict = @"If true, the Select's input will not show any values that are not defined in the dropdown.
            This can be useful if Value is bound to a variable which is initialized to a value which is not in the list
            and you want the Select to show the label / placeholder instead.";

        public const string MudSelect_Clearable = @"Show clear button.";

        public const string MudSelect_LockScroll = @"If true, prevent scrolling while dropdown is open.";

        public const string MudSelect_OnClearButtonClick = @"Button click event for clear button. Called after text and value has been cleared.";

        public const string MudSelect_CheckedIcon = @"Custom checked icon.";

        public const string MudSelect_UncheckedIcon = @"Custom unchecked icon.";

        public const string MudSelect_IndeterminateIcon = @"Custom indeterminate icon.";

        public const string MudSelect_Disabled = @"If true, the input element will be disabled.";

        public const string MudSelect_ReadOnly = @"If true, the input will be read-only.";

        public const string MudSelect_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudSelect_Immediate = @"If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.";

        public const string MudSelect_DisableUnderLine = @"If true, the input will not have an underline.";

        public const string MudSelect_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudSelect_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudSelect_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudSelect_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudSelect_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudSelect_OnlyValidateIfDirty = @"The validation is only triggered if the user has changed the input value at least once. By default, it is false";

        public const string MudSelect_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudSelect_AdornmentAriaLabel = @"The aria-label of the adornment.";

        public const string MudSelect_IconSize = @"The Icon Size.";

        public const string MudSelect_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudSelect_Variant = @"Variant to use.";

        public const string MudSelect_Margin = @"Will adjust vertical spacing.";

        public const string MudSelect_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudSelect_Counter = @"If set, will display the counter, value 0 will display current count but no stop count.";

        public const string MudSelect_MaxLength = @"Maximum number of characters that the input will accept";

        public const string MudSelect_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudSelect_AutoFocus = @"If true the input will focus automatically.";

        public const string MudSelect_Lines = @"A multiline input (textarea) will be shown, if set to more than one line.";

        public const string MudSelect_Text = @"The text to be displayed.";

        public const string MudSelect_TextUpdateSuppression = @"When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.";

        public const string MudSelect_InputMode = @"Hints at the type of data that might be entered by the user while editing the input";

        public const string MudSelect_Pattern = @"The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
            Not Supported in multline input";

        public const string MudSelect_TextChanged = @"Fired when the text value changes.";

        public const string MudSelect_OnBlur = @"Fired when the element loses focus.";

        public const string MudSelect_OnInternalInputChanged = @"Fired when the element changes internally its text value.";

        public const string MudSelect_OnKeyDown = @"Fired on the KeyDown event.";

        public const string MudSelect_KeyDownPreventDefault = @"Prevent the default action for the KeyDown event.";

        public const string MudSelect_OnKeyPress = @"Fired on the KeyPress event.";

        public const string MudSelect_KeyPressPreventDefault = @"Prevent the default action for the KeyPress event.";

        public const string MudSelect_OnKeyUp = @"Fired on the KeyUp event.";

        public const string MudSelect_KeyUpPreventDefault = @"Prevent the default action for the KeyUp event.";

        public const string MudSelect_ValueChanged = @"Fired when the Value property changes.";

        public const string MudSelect_Value = @"The value of this input element.";

        public const string MudSelect_Format = @"Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans";

        public const string MudSelect_Required = @"If true, this form input is required to be filled out.";

        public const string MudSelect_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudSelect_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudSelect_Error = @"If true, the label will be displayed in an error state.";

        public const string MudSelect_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudSelect_Converter = @"The generic converter of the component.";

        public const string MudSelect_Culture = @"The culture of the component.";

        public const string MudSelect_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudSelect_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudSelect_Class = @"User class names, separated by space.";

        public const string MudSelect_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudSelect_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudSelect_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudSelect_method_System_Threading_Tasks_Task_SelectOption_Int32_ = @"";

        public const string MudSelect_method_System_Threading_Tasks_Task_SelectOption_System_Object_ = @"";

        public const string MudSelect_method_System_Threading_Tasks_Task_ToggleMenu__ = @"";

        public const string MudSelect_method_System_Threading_Tasks_Task_OpenMenu__ = @"";

        public const string MudSelect_method_System_Threading_Tasks_Task_CloseMenu_Boolean_ = @"";

        public const string MudSelect_method_Void_CheckGenericTypeMatch_System_Object_ = @"";

        public const string MudSelect_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudSelect_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudSelect_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudSelect_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudSelect_method_System_Threading_Tasks_Task_ClearAsync__ = @"";

        public const string MudSelect_method_System_Threading_Tasks_Task_Clear__ = @"
            <summary>
            Clear the selection
            </summary>
        ";

        public const string MudSelect_method_Void_RegisterShadowItem_MudBlazor_MudSelectItem_1_T__ = @"";

        public const string MudSelect_method_Void_UnregisterShadowItem_MudBlazor_MudSelectItem_1_T__ = @"";

        public const string MudSelect_method_Void_ForceRender_Boolean_ = @"";

        public const string MudSelect_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudSelect_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudSelect_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudSelect_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudSelectItem_Value = @"A user-defined option that can be selected";

        public const string MudSelectItem_Disabled = @"If true, the input element will be disabled.";

        public const string MudSelectItem_DisableRipple = @"If true, disables ripple effect.";

        public const string MudSelectItem_Href = @"Link to a URL when clicked.";

        public const string MudSelectItem_ForceLoad = @"If true, force browser to redirect outside component router-space.";

        public const string MudSelectItem_ChildContent = @"Child content of component.";

        public const string MudSelectItem_CommandParameter = @"Command parameter.";

        public const string MudSelectItem_Command = @"Command executed when the user clicks on an element.";

        public const string MudSelectItem_OnClick = @"";

        public const string MudSelectItem_Class = @"User class names, separated by space.";

        public const string MudSelectItem_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudSelectItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudSelectItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudSelectItem_method_Void_Dispose__ = @"";

        public const string MudSimpleTable_Elevation = @"Child content of component.";

        public const string MudSimpleTable_Hover = @"If true, the table row will shade on hover.";

        public const string MudSimpleTable_Square = @"If true, border-radius is set to 0.";

        public const string MudSimpleTable_Dense = @"If true, compact padding will be used.";

        public const string MudSimpleTable_Outlined = @"If true, table will be outlined.";

        public const string MudSimpleTable_Bordered = @"If true, table's cells will have left/right borders.";

        public const string MudSimpleTable_Striped = @"If true, striped table rows will be used.";

        public const string MudSimpleTable_FixedHeader = @"When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.";

        public const string MudSimpleTable_ChildContent = @"Child content of the component.";

        public const string MudSimpleTable_Class = @"User class names, separated by space.";

        public const string MudSimpleTable_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudSimpleTable_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudSimpleTable_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudSkeleton_Width = @"With defined in string, needs px or % or equal prefix.";

        public const string MudSkeleton_Height = @"Height defined in string, needs px or % or equal prefix.";

        public const string MudSkeleton_SkeletonType = @"Shape of the skeleton that will be rendered.";

        public const string MudSkeleton_Animation = @"Animation style, if false it will be disabled.";

        public const string MudSkeleton_Class = @"User class names, separated by space.";

        public const string MudSkeleton_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudSkeleton_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudSkeleton_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudSlider_Min = @"The minimum allowed value of the slider. Should not be equal to max.";

        public const string MudSlider_Max = @"The maximum allowed value of the slider. Should not be equal to min.";

        public const string MudSlider_Step = @"How many steps the slider should take on each move.";

        public const string MudSlider_Disabled = @"If true, the slider will be disabled.";

        public const string MudSlider_ChildContent = @"Child content of component.";

        public const string MudSlider_Converter = @"";

        public const string MudSlider_ValueChanged = @"";

        public const string MudSlider_Value = @"";

        public const string MudSlider_Color = @"The color of the component. It supports the Primary, Secondary and Tertiary theme colors.";

        public const string MudSlider_Immediate = @"If true, the dragging the slider will update the Value immediately.
            If false, the Value is updated only on releasing the handle.";

        public const string MudSlider_Vertical = @"If true, displays the slider vertical.";

        public const string MudSlider_TickMarks = @"If true, displays tick marks on the track.";

        public const string MudSlider_TickMarkLabels = @"Labels for tick marks, will attempt to map the labels to each step in index order.";

        public const string MudSlider_Size = @"Labels for tick marks, will attempt to map the labels to each step in index order.";

        public const string MudSlider_Variant = @"The variant to use.";

        public const string MudSlider_ValueLabel = @"Displays the value over the slider thumb.";

        public const string MudSlider_Class = @"User class names, separated by space.";

        public const string MudSlider_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudSlider_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudSlider_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudSnackbarElement_Snackbar = @"";

        public const string MudSnackbarElement_CloseIcon = @"Custom close icon.";

        public const string MudSnackbarElement_Class = @"User class names, separated by space.";

        public const string MudSnackbarElement_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudSnackbarElement_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudSnackbarElement_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudSnackbarElement_method_Void_Dispose__ = @"";

        public const string MudSnackbarProvider_Class = @"User class names, separated by space.";

        public const string MudSnackbarProvider_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudSnackbarProvider_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudSnackbarProvider_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudSnackbarProvider_method_Void_Dispose__ = @"";

        public const string MudSortableColumn_Value = @"Specifies the name of the object's property bound to the column";

        public const string MudSortableColumn_ValueChanged = @"";

        public const string MudSortableColumn_FooterValue = @"Specifies the name of the object's property bound to the footer";

        public const string MudSortableColumn_FooterText = @"Used if no FooterValue is available";

        public const string MudSortableColumn_DataFormatString = @"Specifies which string format should be used.";

        public const string MudSortableColumn_ReadOnly = @"Specifies if the column should be readonly even if the DataTable is in editmode.";

        public const string MudSortableColumn_SortLabel = @"";

        public const string MudSortableColumn_SortBy = @"";

        public const string MudSortableColumn_Visible = @"";

        public const string MudSortableColumn_HeaderText = @"";

        public const string MudSparkLine_StrokeWidth = @"";

        public const string MudSparkLine_Class = @"User class names, separated by space.";

        public const string MudSparkLine_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudSparkLine_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudSparkLine_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudStack_Row = @"If true, items will be placed horizontally in a row instead of vertically.";

        public const string MudStack_Reverse = @"Reverses the order of its items.";

        public const string MudStack_Spacing = @"Defines the spacing between its items.";

        public const string MudStack_Justify = @"Defines the spacing between its items.";

        public const string MudStack_AlignItems = @"Defines the spacing between its items.";

        public const string MudStack_ChildContent = @"Child content of the component.";

        public const string MudStack_Class = @"User class names, separated by space.";

        public const string MudStack_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudStack_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudStack_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudSwipeArea_ChildContent = @"";

        public const string MudSwipeArea_OnSwipe = @"";

        public const string MudSwipeArea_PreventDefault = @"Prevents default behavior of the browser when swiping.
            Usable espacially when swiping up/down - this will prevent the whole page from scrolling up/down.";

        public const string MudSwipeArea_Class = @"User class names, separated by space.";

        public const string MudSwipeArea_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudSwipeArea_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudSwipeArea_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudSwitch_Color = @"The color of the component. It supports the theme colors.";

        public const string MudSwitch_UnCheckedColor = @"The base color of the component in its none active/unchecked state. It supports the theme colors.";

        public const string MudSwitch_Label = @"The text/label will be displayed next to the switch if set.";

        public const string MudSwitch_LabelPosition = @"The position of the text/label.";

        public const string MudSwitch_ThumbIcon = @"Shows an icon on Switch's thumb.";

        public const string MudSwitch_ThumbIconColor = @"The color of the thumb icon. Supports the theme colors.";

        public const string MudSwitch_DisableRipple = @"If true, disables ripple effect.";

        public const string MudSwitch_ChildContent = @"";

        public const string MudSwitch_Disabled = @"If true, the input will be disabled.";

        public const string MudSwitch_ReadOnly = @"If true, the input will be read-only.";

        public const string MudSwitch_Checked = @"The state of the component";

        public const string MudSwitch_StopClickPropagation = @"If true will prevent the click from bubbling up the event tree.";

        public const string MudSwitch_CheckedChanged = @"Fired when Checked changes.";

        public const string MudSwitch_Required = @"If true, this form input is required to be filled out.";

        public const string MudSwitch_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudSwitch_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudSwitch_Error = @"If true, the label will be displayed in an error state.";

        public const string MudSwitch_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudSwitch_Converter = @"The generic converter of the component.";

        public const string MudSwitch_Culture = @"The culture of the component.";

        public const string MudSwitch_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudSwitch_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudSwitch_Class = @"User class names, separated by space.";

        public const string MudSwitch_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudSwitch_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudSwitch_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudSwitch_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudSwitch_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudSwitch_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudSwitch_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudTable_RowTemplate = @"Defines how a table row looks like. Use MudTd to define the table cells and their content.";

        public const string MudTable_ChildRowContent = @"Row Child content of the component.";

        public const string MudTable_RowEditingTemplate = @"Defines how a table row looks like in edit mode (for selected row). Use MudTd to define the table cells and their content.";

        public const string MudTable_Columns = @"Defines how a table column looks like. Columns components should inherit from MudBaseColumn";

        public const string MudTable_QuickColumns = @"Comma separated list of columns to show if there is no templates defined";

        public const string MudTable_NoRecordsContent = @"Defines the table body content when there are no matching records found";

        public const string MudTable_LoadingContent = @"Defines the table body content  the table has no rows and is loading";

        public const string MudTable_HorizontalScrollbar = @"Defines if the table has a horizontal scrollbar.";

        public const string MudTable_Items = @"The data to display in the table. MudTable will render one row per item";

        public const string MudTable_Filter = @"A function that returns whether or not an item should be displayed in the table. You can use this to implement your own search function.";

        public const string MudTable_OnRowClick = @"Button click event.";

        public const string MudTable_RowClassFunc = @"Returns the class that will get joined with RowClass. Takes the current item and row index.";

        public const string MudTable_RowStyleFunc = @"Returns the style that will get joined with RowStyle. Takes the current item and row index.";

        public const string MudTable_SelectedItem = @"Returns the item which was last clicked on in single selection mode (that is, if MultiSelection is false)";

        public const string MudTable_SelectedItemChanged = @"Callback is called when a row has been clicked and returns the selected item.";

        public const string MudTable_SelectedItems = @"If MultiSelection is true, this returns the currently selected items. You can bind this property and the initial content of the HashSet you bind it to will cause these rows to be selected initially.";

        public const string MudTable_Comparer = @"The Comparer to use for comparing selected items internally.";

        public const string MudTable_SelectedItemsChanged = @"Callback is called whenever items are selected or deselected in multi selection mode.";

        public const string MudTable_GroupBy = @"Defines data grouping parameters. It can has N hierarchical levels";

        public const string MudTable_GroupHeaderTemplate = @"Defines how a table grouping row header looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.";

        public const string MudTable_GroupHeaderClass = @"Defines custom CSS classes for using on Group Header's MudTr.";

        public const string MudTable_GroupHeaderStyle = @"Defines custom styles for using on Group Header's MudTr.";

        public const string MudTable_GroupFooterClass = @"Defines custom CSS classes for using on Group Footer's MudTr.";

        public const string MudTable_GroupFooterStyle = @"Defines custom styles for using on Group Footer's MudTr.";

        public const string MudTable_GroupFooterTemplate = @"Defines how a table grouping row footer looks like. It works only when GroupBy is not null. Use MudTd to define the table cells and their content.";

        public const string MudTable_ServerData = @"Supply an async function which (re)loads filtered, paginated and sorted data from server.
            Table will await this func and update based on the returned TableData.
            Used only with ServerData";

        public const string MudTable_IsEditRowSwitchingBlocked = @"When editing a row and this is true, the editing row must be saved/cancelled before a new row will be selected.";

        public const string MudTable_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

        public const string MudTable_Square = @"Set true to disable rounded corners";

        public const string MudTable_Outlined = @"If true, table will be outlined.";

        public const string MudTable_Bordered = @"If true, table's cells will have left/right borders.";

        public const string MudTable_Dense = @"Set true for rows with a narrow height";

        public const string MudTable_Hover = @"Set true to see rows hover on mouse-over.";

        public const string MudTable_Striped = @"If true, striped table rows will be used.";

        public const string MudTable_Breakpoint = @"At what breakpoint the table should switch to mobile layout. Takes None, Xs, Sm, Md, Lg and Xl the default behavior is breaking on Xs.";

        public const string MudTable_FixedHeader = @"When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.";

        public const string MudTable_FixedFooter = @"When true, the footer will be visible is not scrolled to the bottom. Note: set Height to make the table scrollable.";

        public const string MudTable_Height = @"Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the
            attribute 'height' accepts, i.e. 500px.";

        public const string MudTable_SortLabel = @"If table is in smalldevice mode and uses any kind of sorting the text applied here will be the sort selects label.";

        public const string MudTable_AllowUnsorted = @"If true allows table to be in an unsorted state through column clicks (i.e. first click sorts ""Ascending"", second ""Descending"", third ""None"").
            If false only ""Ascending"" and ""Descending"" states are allowed (i.e. there always should be a column to sort).";

        public const string MudTable_RowsPerPage = @"If the table has more items than this number, it will break the rows into pages of said size.
            Note: requires a MudTablePager in PagerContent.";

        public const string MudTable_RowsPerPageChanged = @"Rows Per Page two-way bindable parameter";

        public const string MudTable_CurrentPage = @"The page index of the currently displayed page (Zero based). Usually called by MudTablePager.
            Note: requires a MudTablePager in PagerContent.";

        public const string MudTable_MultiSelection = @"Set to true to enable selection of multiple rows with check boxes.";

        public const string MudTable_ToolBarContent = @"Optional. Add any kind of toolbar to this render fragment.";

        public const string MudTable_Loading = @"Show a loading animation, if true.";

        public const string MudTable_LoadingProgressColor = @"The color of the loading progress if used. It supports the theme colors.";

        public const string MudTable_HeaderContent = @"Add MudTh cells here to define the table header. If MudTableBase.CustomHeader is set, add one or more MudTHeadRow instead.";

        public const string MudTable_CustomHeader = @"Specify if the header has multiple rows. In that case, you need to provide the MudTHeadRow tags.";

        public const string MudTable_HeaderClass = @"Add a class to the thead tag";

        public const string MudTable_FooterContent = @"Add MudTd cells here to define the table footer. IfMudTableBase.CustomFooter is set, add one or more MudTFootRow instead.";

        public const string MudTable_CustomFooter = @"Specify if the footer has multiple rows. In that case, you need to provide the MudTFootRow tags.";

        public const string MudTable_FooterClass = @"Add a class to the tfoot tag";

        public const string MudTable_ColGroup = @"Specifies a group of one or more columns in a table for formatting.
            Ex:
            table
                colgroup
                   col span=""2"" style=""background-color:red""
                   col style=""background-color:yellow""
                 colgroup
                 header
                 body
            table";

        public const string MudTable_PagerContent = @"Add MudTablePager here to enable breaking the rows in to multiple pages.";

        public const string MudTable_ReadOnly = @"Locks Inline Edit mode, if true.";

        public const string MudTable_OnCommitEditClick = @"Button commit edit click event.";

        public const string MudTable_OnCancelEditClick = @"Button cancel edit click event.";

        public const string MudTable_OnPreviewEditClick = @"Event is called before the item is modified in inline editing.";

        public const string MudTable_CommitEditCommand = @"Command executed when the user clicks on the CommitEdit Button.";

        public const string MudTable_CommitEditCommandParameter = @"Command parameter for the CommitEdit Button. By default, will be the row level item model, if you won't set anything else.";

        public const string MudTable_CommitEditTooltip = @"Tooltip for the CommitEdit Button.";

        public const string MudTable_CancelEditTooltip = @"Tooltip for the CancelEdit Button.";

        public const string MudTable_CommitEditIcon = @"Sets the Icon of the CommitEdit Button.";

        public const string MudTable_CancelEditIcon = @"Sets the Icon of the CancelEdit Button.";

        public const string MudTable_CanCancelEdit = @"Define if Cancel button is present or not for inline editing.";

        public const string MudTable_ApplyButtonPosition = @"Set the positon of the CommitEdit and CancelEdit button, if MudTableBase.IsEditable IsEditable is true. Defaults to the end of the row";

        public const string MudTable_EditButtonPosition = @"Set the positon of the StartEdit button, if MudTableBase.IsEditable IsEditable is true. Defaults to the end of the row";

        public const string MudTable_EditTrigger = @"Defines how a table row edit will be triggered";

        public const string MudTable_EditButtonContent = @"Defines the edit button that will be rendered when EditTrigger.EditButton";

        public const string MudTable_RowEditPreview = @"The method is called before the item is modified in inline editing.";

        public const string MudTable_RowEditCommit = @"The method is called when the edition of the item has been committed in inline editing.";

        public const string MudTable_RowEditCancel = @"The method is called when the edition of the item has been canceled in inline editing.";

        public const string MudTable_TotalItems = @"Number of items. Used only with ServerData=""true""";

        public const string MudTable_RowClass = @"CSS class for the table rows. Note, many CSS settings are overridden by MudTd though";

        public const string MudTable_RowStyle = @"CSS styles for the table rows. Note, many CSS settings are overridden by MudTd though";

        public const string MudTable_Virtualize = @"If true, the results are displayed in a Virtualize component, allowing a boost in rendering speed.";

        public const string MudTable_RightAlignSmall = @"Alignment of the table cell text when breakpoint is smaller than MudTableBase.Breakpoint";

        public const string MudTable_Class = @"User class names, separated by space.";

        public const string MudTable_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTable_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTable_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTable_method_Int32_GetFilteredItemsCount__ = @"";

        public const string MudTable_method_Void_SetSelectedItem_System_Object_ = @"";

        public const string MudTable_method_Void_SetEditingItem_System_Object_ = @"";

        public const string MudTable_method_Boolean_ContainsItem_System_Object_ = @"";

        public const string MudTable_method_Void_UpdateSelection__ = @"";

        public const string MudTable_method_System_Threading_Tasks_Task_ReloadServerData__ = @"
            <summary>
            Call this to reload the server-filtered, -sorted and -paginated items
            </summary>
        ";

        public const string MudTable_method_Void_NavigateTo_MudBlazor_Page_ = @"";

        public const string MudTable_method_Void_NavigateTo_Int32_ = @"
            <summary>
            Navigate to page with specified index.
            </summary>
            <param name=""pageIndex""> The index of the page number.</param>
        ";

        public const string MudTable_method_Void_SetRowsPerPage_Int32_ = @"";

        public const string MudTableBase_IsEditRowSwitchingBlocked = @"When editing a row and this is true, the editing row must be saved/cancelled before a new row will be selected.";

        public const string MudTableBase_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

        public const string MudTableBase_Square = @"Set true to disable rounded corners";

        public const string MudTableBase_Outlined = @"If true, table will be outlined.";

        public const string MudTableBase_Bordered = @"If true, table's cells will have left/right borders.";

        public const string MudTableBase_Dense = @"Set true for rows with a narrow height";

        public const string MudTableBase_Hover = @"Set true to see rows hover on mouse-over.";

        public const string MudTableBase_Striped = @"If true, striped table rows will be used.";

        public const string MudTableBase_Breakpoint = @"At what breakpoint the table should switch to mobile layout. Takes None, Xs, Sm, Md, Lg and Xl the default behavior is breaking on Xs.";

        public const string MudTableBase_FixedHeader = @"When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.";

        public const string MudTableBase_FixedFooter = @"When true, the footer will be visible is not scrolled to the bottom. Note: set Height to make the table scrollable.";

        public const string MudTableBase_Height = @"Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the
            attribute 'height' accepts, i.e. 500px.";

        public const string MudTableBase_SortLabel = @"If table is in smalldevice mode and uses any kind of sorting the text applied here will be the sort selects label.";

        public const string MudTableBase_AllowUnsorted = @"If true allows table to be in an unsorted state through column clicks (i.e. first click sorts ""Ascending"", second ""Descending"", third ""None"").
            If false only ""Ascending"" and ""Descending"" states are allowed (i.e. there always should be a column to sort).";

        public const string MudTableBase_RowsPerPage = @"If the table has more items than this number, it will break the rows into pages of said size.
            Note: requires a MudTablePager in PagerContent.";

        public const string MudTableBase_RowsPerPageChanged = @"Rows Per Page two-way bindable parameter";

        public const string MudTableBase_CurrentPage = @"The page index of the currently displayed page (Zero based). Usually called by MudTablePager.
            Note: requires a MudTablePager in PagerContent.";

        public const string MudTableBase_MultiSelection = @"Set to true to enable selection of multiple rows with check boxes.";

        public const string MudTableBase_ToolBarContent = @"Optional. Add any kind of toolbar to this render fragment.";

        public const string MudTableBase_Loading = @"Show a loading animation, if true.";

        public const string MudTableBase_LoadingProgressColor = @"The color of the loading progress if used. It supports the theme colors.";

        public const string MudTableBase_HeaderContent = @"Add MudTh cells here to define the table header. If MudTableBase.CustomHeader is set, add one or more MudTHeadRow instead.";

        public const string MudTableBase_CustomHeader = @"Specify if the header has multiple rows. In that case, you need to provide the MudTHeadRow tags.";

        public const string MudTableBase_HeaderClass = @"Add a class to the thead tag";

        public const string MudTableBase_FooterContent = @"Add MudTd cells here to define the table footer. IfMudTableBase.CustomFooter is set, add one or more MudTFootRow instead.";

        public const string MudTableBase_CustomFooter = @"Specify if the footer has multiple rows. In that case, you need to provide the MudTFootRow tags.";

        public const string MudTableBase_FooterClass = @"Add a class to the tfoot tag";

        public const string MudTableBase_ColGroup = @"Specifies a group of one or more columns in a table for formatting.
            Ex:
            table
                colgroup
                   col span=""2"" style=""background-color:red""
                   col style=""background-color:yellow""
                 colgroup
                 header
                 body
            table";

        public const string MudTableBase_PagerContent = @"Add MudTablePager here to enable breaking the rows in to multiple pages.";

        public const string MudTableBase_ReadOnly = @"Locks Inline Edit mode, if true.";

        public const string MudTableBase_OnCommitEditClick = @"Button commit edit click event.";

        public const string MudTableBase_OnCancelEditClick = @"Button cancel edit click event.";

        public const string MudTableBase_OnPreviewEditClick = @"Event is called before the item is modified in inline editing.";

        public const string MudTableBase_CommitEditCommand = @"Command executed when the user clicks on the CommitEdit Button.";

        public const string MudTableBase_CommitEditCommandParameter = @"Command parameter for the CommitEdit Button. By default, will be the row level item model, if you won't set anything else.";

        public const string MudTableBase_CommitEditTooltip = @"Tooltip for the CommitEdit Button.";

        public const string MudTableBase_CancelEditTooltip = @"Tooltip for the CancelEdit Button.";

        public const string MudTableBase_CommitEditIcon = @"Sets the Icon of the CommitEdit Button.";

        public const string MudTableBase_CancelEditIcon = @"Sets the Icon of the CancelEdit Button.";

        public const string MudTableBase_CanCancelEdit = @"Define if Cancel button is present or not for inline editing.";

        public const string MudTableBase_ApplyButtonPosition = @"Set the positon of the CommitEdit and CancelEdit button, if MudTableBase.IsEditable IsEditable is true. Defaults to the end of the row";

        public const string MudTableBase_EditButtonPosition = @"Set the positon of the StartEdit button, if MudTableBase.IsEditable IsEditable is true. Defaults to the end of the row";

        public const string MudTableBase_EditTrigger = @"Defines how a table row edit will be triggered";

        public const string MudTableBase_EditButtonContent = @"Defines the edit button that will be rendered when EditTrigger.EditButton";

        public const string MudTableBase_RowEditPreview = @"The method is called before the item is modified in inline editing.";

        public const string MudTableBase_RowEditCommit = @"The method is called when the edition of the item has been committed in inline editing.";

        public const string MudTableBase_RowEditCancel = @"The method is called when the edition of the item has been canceled in inline editing.";

        public const string MudTableBase_TotalItems = @"Number of items. Used only with ServerData=""true""";

        public const string MudTableBase_RowClass = @"CSS class for the table rows. Note, many CSS settings are overridden by MudTd though";

        public const string MudTableBase_RowStyle = @"CSS styles for the table rows. Note, many CSS settings are overridden by MudTd though";

        public const string MudTableBase_Virtualize = @"If true, the results are displayed in a Virtualize component, allowing a boost in rendering speed.";

        public const string MudTableBase_RightAlignSmall = @"Alignment of the table cell text when breakpoint is smaller than MudTableBase.Breakpoint";

        public const string MudTableBase_Class = @"User class names, separated by space.";

        public const string MudTableBase_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTableBase_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTableBase_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTableBase_method_Int32_GetFilteredItemsCount__ = @"";

        public const string MudTableBase_method_Void_SetSelectedItem_System_Object_ = @"";

        public const string MudTableBase_method_Void_SetEditingItem_System_Object_ = @"";

        public const string MudTableBase_method_Boolean_ContainsItem_System_Object_ = @"";

        public const string MudTableBase_method_Void_UpdateSelection__ = @"";

        public const string MudTableBase_method_Void_NavigateTo_MudBlazor_Page_ = @"";

        public const string MudTableBase_method_Void_NavigateTo_Int32_ = @"
            <summary>
            Navigate to page with specified index.
            </summary>
            <param name=""pageIndex""> The index of the page number.</param>
        ";

        public const string MudTableBase_method_Void_SetRowsPerPage_Int32_ = @"";

        public const string MudTableGroupRow_GroupDefinition = @"The group definition for this grouping level. It's recursive.";

        public const string MudTableGroupRow_Items = @"Inner Items List for the Group";

        public const string MudTableGroupRow_HeaderTemplate = @"Defines Group Header Data Template";

        public const string MudTableGroupRow_FooterTemplate = @"Defines Group Header Data Template";

        public const string MudTableGroupRow_IsCheckable = @"Add a multi-select checkbox that will select/unselect every item in the table";

        public const string MudTableGroupRow_HeaderClass = @"";

        public const string MudTableGroupRow_FooterClass = @"";

        public const string MudTableGroupRow_HeaderStyle = @"";

        public const string MudTableGroupRow_FooterStyle = @"";

        public const string MudTableGroupRow_ExpandIcon = @"Custom expand icon.";

        public const string MudTableGroupRow_CollapseIcon = @"Custom collapse icon.";

        public const string MudTableGroupRow_OnRowClick = @"On click event";

        public const string MudTableGroupRow_Class = @"User class names, separated by space.";

        public const string MudTableGroupRow_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTableGroupRow_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTableGroupRow_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTableGroupRow_method_Void_Dispose__ = @"";

        public const string MudTableGroupRow_method_Void_SetChecked_Boolean__Boolean_ = @"";

        public const string MudTablePager_HideRowsPerPage = @"Set true to hide the part of the pager which allows to change the page size.";

        public const string MudTablePager_DisableRowsPerPage = @"Set true to hide the part of the pager which allows to change the page size.";

        public const string MudTablePager_HidePageNumber = @"Set true to hide the number of pages.";

        public const string MudTablePager_HidePagination = @"Set true to hide the pagination.";

        public const string MudTablePager_HorizontalAlignment = @"Set the horizontal alignment position.";

        public const string MudTablePager_PageSizeOptions = @"Define a list of available page size options for the user to choose from";

        public const string MudTablePager_InfoFormat = @"Format string for the display of the current page, which you can localize to your language. Available variables are:
            {first_item}, {last_item} and {all_items} which will replaced with the indices of the page's first and last item, as well as the total number of items.
            Default: ""{first_item}-{last_item} of {all_items}"" which is transformed into ""0-25 of 77"".";

        public const string MudTablePager_RowsPerPageString = @"The localizable ""Rows per page:"" text.";

        public const string MudTablePager_FirstIcon = @"Custom first icon.";

        public const string MudTablePager_BeforeIcon = @"Custom before icon.";

        public const string MudTablePager_NextIcon = @"Custom next icon.";

        public const string MudTablePager_LastIcon = @"Custom last icon.";

        public const string MudTablePager_Class = @"User class names, separated by space.";

        public const string MudTablePager_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTablePager_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTablePager_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTableSortLabel_ChildContent = @"";

        public const string MudTableSortLabel_InitialDirection = @"";

        public const string MudTableSortLabel_Enabled = @"Enable the sorting. Set to true by default.";

        public const string MudTableSortLabel_SortIcon = @"The Icon used to display sortdirection.";

        public const string MudTableSortLabel_AppendIcon = @"If true the icon will be placed before the label text.";

        public const string MudTableSortLabel_SortDirection = @"";

        public const string MudTableSortLabel_SortDirectionChanged = @"";

        public const string MudTableSortLabel_SortBy = @"";

        public const string MudTableSortLabel_SortLabel = @"";

        public const string MudTableSortLabel_Class = @"User class names, separated by space.";

        public const string MudTableSortLabel_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTableSortLabel_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTableSortLabel_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTableSortLabel_method_System_Threading_Tasks_Task_ToggleSortDirection__ = @"";

        public const string MudTableSortLabel_method_Void_Dispose__ = @"";

        public const string MudTabPanel_Text = @"Text will be displayed in the TabPanel as TabTitle.";

        public const string MudTabPanel_Icon = @"Icon placed before the text if set.";

        public const string MudTabPanel_Disabled = @"If true, the tabpanel will be disabled.";

        public const string MudTabPanel_BadgeData = @"Optional information to be showed into a badge";

        public const string MudTabPanel_BadgeDot = @"Optional information to show the badge as a dot.";

        public const string MudTabPanel_BadgeColor = @"The color of the badge.";

        public const string MudTabPanel_ID = @"Unique TabPanel ID. Useful for activation when Panels are dynamically generated.";

        public const string MudTabPanel_OnClick = @"Raised when tab is clicked";

        public const string MudTabPanel_ChildContent = @"Child content of component.";

        public const string MudTabPanel_TabContent = @"Tab content of component.";

        public const string MudTabPanel_TabWrapperContent = @"Tab content wrapper of component. It is used to wrap the content of a tab heading in a user supplied div or component. 
            Use @context in the TabWrapperContent to render the tab header within your custom wrapper. 
            This is most useful with tooltips, which must wrap the entire content they refer to.";

        public const string MudTabPanel_ToolTip = @"TabPanel Tooltip. It will be ignored if TabContent is provided.";

        public const string MudTabPanel_Class = @"User class names, separated by space.";

        public const string MudTabPanel_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTabPanel_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTabPanel_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTabPanel_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string MudTabs_KeepPanelsAlive = @"If true, render all tabs and hide (display:none) every non-active.";

        public const string MudTabs_Rounded = @"If true, sets the border-radius to theme default.";

        public const string MudTabs_Border = @"If true, sets a border between the content and the toolbar depending on the position.";

        public const string MudTabs_Outlined = @"If true, toolbar will be outlined.";

        public const string MudTabs_Centered = @"If true, centers the tabitems.";

        public const string MudTabs_HideSlider = @"Hides the active tab slider.";

        public const string MudTabs_PrevIcon = @"Icon to use for left pagination.";

        public const string MudTabs_NextIcon = @"Icon to use for right pagination.";

        public const string MudTabs_AlwaysShowScrollButtons = @"If true, always display the scroll buttons even if the tabs are smaller than the required with, buttons will be disabled if there is nothing to scroll.";

        public const string MudTabs_MaxHeight = @"Sets the maxheight the component can have.";

        public const string MudTabs_Position = @"Sets the position of the tabs itself.";

        public const string MudTabs_Color = @"The color of the component. It supports the theme colors.";

        public const string MudTabs_SliderColor = @"The color of the tab slider. It supports the theme colors.";

        public const string MudTabs_IconColor = @"The color of the icon. It supports the theme colors.";

        public const string MudTabs_ScrollIconColor = @"The color of the next/prev icons. It supports the theme colors.";

        public const string MudTabs_Elevation = @"The higher the number, the heavier the drop-shadow, applies around the whole component.";

        public const string MudTabs_ApplyEffectsToContainer = @"If true, will apply elevation, rounded, outlined effects to the whole tab component instead of just toolbar.";

        public const string MudTabs_DisableRipple = @"If true, disables ripple effect.";

        public const string MudTabs_DisableSliderAnimation = @"If true, disables slider animation";

        public const string MudTabs_ChildContent = @"Child content of component.";

        public const string MudTabs_PrePanelContent = @"This fragment is placed between toolbar and panels. 
            It can be used to display additional content like an address line in a browser.
            The active tab will be the content of this RenderFragement";

        public const string MudTabs_TabPanelClass = @"Custom class/classes for TabPanel";

        public const string MudTabs_PanelClass = @"Custom class/classes for Selected Content Panel";

        public const string MudTabs_ActivePanelIndex = @"The current active panel index. Also with Bidirectional Binding";

        public const string MudTabs_ActivePanelIndexChanged = @"Fired when ActivePanelIndex changes.";

        public const string MudTabs_Header = @"A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control";

        public const string MudTabs_HeaderPosition = @"Additional content specified by Header is placed either before the tabs, after or not at all";

        public const string MudTabs_TabPanelHeader = @"A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel";

        public const string MudTabs_TabPanelHeaderPosition = @"Additional content specified by Header is placed either before the tabs, after or not at all";

        public const string MudTabs_Class = @"User class names, separated by space.";

        public const string MudTabs_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTabs_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTabs_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTabs_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string MudTabs_method_Void_ActivatePanel_MudBlazor_MudTabPanel__Boolean_ = @"";

        public const string MudTabs_method_Void_ActivatePanel_Int32__Boolean_ = @"";

        public const string MudTabs_method_Void_ActivatePanel_System_Object__Boolean_ = @"";

        public const string MudTd_ChildContent = @"";

        public const string MudTd_DataLabel = @"";

        public const string MudTd_HideSmall = @"Hide cell when breakpoint is smaller than the defined value in table.";

        public const string MudTd_Class = @"User class names, separated by space.";

        public const string MudTd_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTd_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTd_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTemplateColumn_DataContext = @"";

        public const string MudTemplateColumn_Header = @"";

        public const string MudTemplateColumn_Row = @"";

        public const string MudTemplateColumn_Edit = @"";

        public const string MudTemplateColumn_Footer = @"";

        public const string MudTemplateColumn_Visible = @"";

        public const string MudTemplateColumn_HeaderText = @"";

        public const string MudText_Typo = @"Applies the theme typography styles.";

        public const string MudText_Align = @"Set the text-align on the component.";

        public const string MudText_Color = @"The color of the component. It supports the theme colors.";

        public const string MudText_GutterBottom = @"If true, the text will have a bottom margin.";

        public const string MudText_ChildContent = @"Child content of component.";

        public const string MudText_Inline = @"If true, Sets display inline";

        public const string MudText_Class = @"User class names, separated by space.";

        public const string MudText_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudText_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudText_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTextField_InputType = @"Type of the input element. It should be a valid HTML5 input type.";

        public const string MudTextField_Clearable = @"Show clear button.";

        public const string MudTextField_OnClearButtonClick = @"Button click event for clear button. Called after text and value has been cleared.";

        public const string MudTextField_Mask = @"Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask
            Note: when Mask is set, TextField will ignore some properties such as Lines, Pattern or HideSpinButtons, OnKeyDown and OnKeyUp, etc.";

        public const string MudTextField_DebounceInterval = @"Interval to be awaited in milliseconds before changing the Text value";

        public const string MudTextField_OnDebounceIntervalElapsed = @"callback to be called when the debounce interval has elapsed
            receives the Text as a parameter";

        public const string MudTextField_Disabled = @"If true, the input element will be disabled.";

        public const string MudTextField_ReadOnly = @"If true, the input will be read-only.";

        public const string MudTextField_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudTextField_Immediate = @"If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.";

        public const string MudTextField_DisableUnderLine = @"If true, the input will not have an underline.";

        public const string MudTextField_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudTextField_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudTextField_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudTextField_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudTextField_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudTextField_OnlyValidateIfDirty = @"The validation is only triggered if the user has changed the input value at least once. By default, it is false";

        public const string MudTextField_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudTextField_AdornmentAriaLabel = @"The aria-label of the adornment.";

        public const string MudTextField_IconSize = @"The Icon Size.";

        public const string MudTextField_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudTextField_Variant = @"Variant to use.";

        public const string MudTextField_Margin = @"Will adjust vertical spacing.";

        public const string MudTextField_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudTextField_Counter = @"If set, will display the counter, value 0 will display current count but no stop count.";

        public const string MudTextField_MaxLength = @"Maximum number of characters that the input will accept";

        public const string MudTextField_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudTextField_AutoFocus = @"If true the input will focus automatically.";

        public const string MudTextField_Lines = @"A multiline input (textarea) will be shown, if set to more than one line.";

        public const string MudTextField_Text = @"The text to be displayed.";

        public const string MudTextField_TextUpdateSuppression = @"When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.";

        public const string MudTextField_InputMode = @"Hints at the type of data that might be entered by the user while editing the input";

        public const string MudTextField_Pattern = @"The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
            Not Supported in multline input";

        public const string MudTextField_TextChanged = @"Fired when the text value changes.";

        public const string MudTextField_OnBlur = @"Fired when the element loses focus.";

        public const string MudTextField_OnInternalInputChanged = @"Fired when the element changes internally its text value.";

        public const string MudTextField_OnKeyDown = @"Fired on the KeyDown event.";

        public const string MudTextField_KeyDownPreventDefault = @"Prevent the default action for the KeyDown event.";

        public const string MudTextField_OnKeyPress = @"Fired on the KeyPress event.";

        public const string MudTextField_KeyPressPreventDefault = @"Prevent the default action for the KeyPress event.";

        public const string MudTextField_OnKeyUp = @"Fired on the KeyUp event.";

        public const string MudTextField_KeyUpPreventDefault = @"Prevent the default action for the KeyUp event.";

        public const string MudTextField_ValueChanged = @"Fired when the Value property changes.";

        public const string MudTextField_Value = @"The value of this input element.";

        public const string MudTextField_Format = @"Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans";

        public const string MudTextField_Required = @"If true, this form input is required to be filled out.";

        public const string MudTextField_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudTextField_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudTextField_Error = @"If true, the label will be displayed in an error state.";

        public const string MudTextField_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudTextField_Converter = @"The generic converter of the component.";

        public const string MudTextField_Culture = @"The culture of the component.";

        public const string MudTextField_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudTextField_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudTextField_Class = @"User class names, separated by space.";

        public const string MudTextField_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTextField_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTextField_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTextField_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudTextField_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudTextField_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudTextField_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudTextField_method_System_Threading_Tasks_Task_Clear__ = @"
            <summary>
            Clear the text field, set Value to default(T) and Text to null
            </summary>
            <returns></returns>
        ";

        public const string MudTextField_method_System_Threading_Tasks_Task_SetText_System_String_ = @"
            <summary>
            Sets the input text from outside programmatically
            </summary>
            <param name=""text""></param>
            <returns></returns>
        ";

        public const string MudTextField_method_Void_ForceRender_Boolean_ = @"";

        public const string MudTextField_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudTextField_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudTextField_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudTextField_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudTextFieldString_InputType = @"Type of the input element. It should be a valid HTML5 input type.";

        public const string MudTextFieldString_Clearable = @"Show clear button.";

        public const string MudTextFieldString_OnClearButtonClick = @"Button click event for clear button. Called after text and value has been cleared.";

        public const string MudTextFieldString_Mask = @"Provide a masking object. Built-in masks are PatternMask, MultiMask, RegexMask and BlockMask
            Note: when Mask is set, TextField will ignore some properties such as Lines, Pattern or HideSpinButtons, OnKeyDown and OnKeyUp, etc.";

        public const string MudTextFieldString_DebounceInterval = @"Interval to be awaited in milliseconds before changing the Text value";

        public const string MudTextFieldString_OnDebounceIntervalElapsed = @"callback to be called when the debounce interval has elapsed
            receives the Text as a parameter";

        public const string MudTextFieldString_Disabled = @"If true, the input element will be disabled.";

        public const string MudTextFieldString_ReadOnly = @"If true, the input will be read-only.";

        public const string MudTextFieldString_FullWidth = @"If true, the input will take up the full width of its container.";

        public const string MudTextFieldString_Immediate = @"If true, the input will update the Value immediately on typing.
            If false, the Value is updated only on Enter.";

        public const string MudTextFieldString_DisableUnderLine = @"If true, the input will not have an underline.";

        public const string MudTextFieldString_HelperText = @"The HelperText will be displayed below the text field.";

        public const string MudTextFieldString_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudTextFieldString_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

        public const string MudTextFieldString_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

        public const string MudTextFieldString_Adornment = @"The Adornment if used. By default, it is set to None.";

        public const string MudTextFieldString_OnlyValidateIfDirty = @"The validation is only triggered if the user has changed the input value at least once. By default, it is false";

        public const string MudTextFieldString_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudTextFieldString_AdornmentAriaLabel = @"The aria-label of the adornment.";

        public const string MudTextFieldString_IconSize = @"The Icon Size.";

        public const string MudTextFieldString_OnAdornmentClick = @"Button click event if set and Adornment used.";

        public const string MudTextFieldString_Variant = @"Variant to use.";

        public const string MudTextFieldString_Margin = @"Will adjust vertical spacing.";

        public const string MudTextFieldString_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudTextFieldString_Counter = @"If set, will display the counter, value 0 will display current count but no stop count.";

        public const string MudTextFieldString_MaxLength = @"Maximum number of characters that the input will accept";

        public const string MudTextFieldString_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudTextFieldString_AutoFocus = @"If true the input will focus automatically.";

        public const string MudTextFieldString_Lines = @"A multiline input (textarea) will be shown, if set to more than one line.";

        public const string MudTextFieldString_Text = @"The text to be displayed.";

        public const string MudTextFieldString_TextUpdateSuppression = @"When TextUpdateSuppression is true (which is default) the text can not be updated by bindings while the component is focused in BSS (not WASM).
            This solves issue #1012: Textfield swallowing chars when typing rapidly
            If you need to update the input's text while it is focused you can set this parameter to false.
            Note: on WASM text update suppression is not active, so this parameter has no effect.";

        public const string MudTextFieldString_InputMode = @"Hints at the type of data that might be entered by the user while editing the input";

        public const string MudTextFieldString_Pattern = @"The pattern attribute, when specified, is a regular expression which the input's value must match in order for the value to pass constraint validation. It must be a valid JavaScript regular expression
            Not Supported in multline input";

        public const string MudTextFieldString_TextChanged = @"Fired when the text value changes.";

        public const string MudTextFieldString_OnBlur = @"Fired when the element loses focus.";

        public const string MudTextFieldString_OnInternalInputChanged = @"Fired when the element changes internally its text value.";

        public const string MudTextFieldString_OnKeyDown = @"Fired on the KeyDown event.";

        public const string MudTextFieldString_KeyDownPreventDefault = @"Prevent the default action for the KeyDown event.";

        public const string MudTextFieldString_OnKeyPress = @"Fired on the KeyPress event.";

        public const string MudTextFieldString_KeyPressPreventDefault = @"Prevent the default action for the KeyPress event.";

        public const string MudTextFieldString_OnKeyUp = @"Fired on the KeyUp event.";

        public const string MudTextFieldString_KeyUpPreventDefault = @"Prevent the default action for the KeyUp event.";

        public const string MudTextFieldString_ValueChanged = @"Fired when the Value property changes.";

        public const string MudTextFieldString_Value = @"The value of this input element.";

        public const string MudTextFieldString_Format = @"Conversion format parameter for ToString(), can be used for formatting primitive types, DateTimes and TimeSpans";

        public const string MudTextFieldString_Required = @"If true, this form input is required to be filled out.";

        public const string MudTextFieldString_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudTextFieldString_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudTextFieldString_Error = @"If true, the label will be displayed in an error state.";

        public const string MudTextFieldString_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudTextFieldString_Converter = @"The generic converter of the component.";

        public const string MudTextFieldString_Culture = @"The culture of the component.";

        public const string MudTextFieldString_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudTextFieldString_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudTextFieldString_Class = @"User class names, separated by space.";

        public const string MudTextFieldString_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTextFieldString_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTextFieldString_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTextFieldString_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudTextFieldString_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudTextFieldString_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudTextFieldString_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudTextFieldString_method_System_Threading_Tasks_Task_Clear__ = @"
            <summary>
            Clear the text field, set Value to default(T) and Text to null
            </summary>
            <returns></returns>
        ";

        public const string MudTextFieldString_method_System_Threading_Tasks_Task_SetText_System_String_ = @"
            <summary>
            Sets the input text from outside programmatically
            </summary>
            <param name=""text""></param>
            <returns></returns>
        ";

        public const string MudTextFieldString_method_Void_ForceRender_Boolean_ = @"";

        public const string MudTextFieldString_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudTextFieldString_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudTextFieldString_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudTextFieldString_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudTFootRow_ChildContent = @"";

        public const string MudTFootRow_IsCheckable = @"Add a multi-select checkbox that will select/unselect every item in the table";

        public const string MudTFootRow_IgnoreCheckbox = @"Specify behavior in case the table is multi-select mode. If set to true, it won't render an additional empty column.";

        public const string MudTFootRow_IgnoreEditable = @"Specify behavior in case the table is editable. If set to true, it won't render an additional empty column.";

        public const string MudTFootRow_IsExpandable = @"";

        public const string MudTFootRow_OnRowClick = @"On click event";

        public const string MudTFootRow_Class = @"User class names, separated by space.";

        public const string MudTFootRow_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTFootRow_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTFootRow_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTFootRow_method_Void_Dispose__ = @"";

        public const string MudTFootRow_method_Void_SetChecked_Boolean__Boolean_ = @"";

        public const string MudTh_ChildContent = @"";

        public const string MudTh_Class = @"User class names, separated by space.";

        public const string MudTh_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTh_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTh_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTHeadRow_ChildContent = @"";

        public const string MudTHeadRow_IsCheckable = @"Add a multi-select checkbox that will select/unselect every item in the table";

        public const string MudTHeadRow_IgnoreCheckbox = @"Specify behavior in case the table is multi-select mode. If set to true, it won't render an additional empty column.";

        public const string MudTHeadRow_IgnoreEditable = @"Specify behavior in case the table is editable. If set to true, it won't render an additional empty column.";

        public const string MudTHeadRow_IsExpandable = @"";

        public const string MudTHeadRow_OnRowClick = @"On click event";

        public const string MudTHeadRow_Class = @"User class names, separated by space.";

        public const string MudTHeadRow_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTHeadRow_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTHeadRow_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTHeadRow_method_Void_Dispose__ = @"";

        public const string MudTHeadRow_method_Void_SetChecked_Boolean__Boolean_ = @"";

        public const string MudThemeProvider_Theme = @"The theme used by the application.";

        public const string MudThemeProvider_DefaultScrollbar = @"If true, will not apply MudBlazor styled scrollbar and use browser default.";

        public const string MudThemeProvider_IsDarkMode = @"The active palette of the theme.";

        public const string MudThemeProvider_IsDarkModeChanged = @"Invoked when the dark mode changes.";

        public const string MudThemeProvider_method_System_Threading_Tasks_Task_1_System_Boolean__GetSystemPreference__ = @"
            <summary>
            Returns the dark mode preference of the user. True if dark mode is preferred.
            </summary>
            <returns></returns>
        ";

        public const string MudTimeline_TimelineOrientation = @"Sets the orientation of the timeline and its timeline items.";

        public const string MudTimeline_TimelinePosition = @"The position the timeline itself and how the timeline items should be displayed.";

        public const string MudTimeline_TimelineAlign = @"Aligns the dot and any item modifiers is changed, in default mode they are centered to the item.";

        public const string MudTimeline_Reverse = @"Reverse the order of TimelineItems when TimelinePosition is set to Alternate.";

        public const string MudTimeline_DisableModifiers = @"If true, disables all TimelineItem modifiers, like adding a caret to a MudCard.";

        public const string MudTimeline_ChildContent = @"Collection of T";

        public const string MudTimeline_SelectedIndex = @"Selected Item's index";

        public const string MudTimeline_SelectedIndexChanged = @"";

        public const string MudTimeline_Class = @"User class names, separated by space.";

        public const string MudTimeline_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTimeline_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTimeline_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTimeline_method_Void_Previous__ = @"
            <summary>
            Move to Previous Item
            </summary>
        ";

        public const string MudTimeline_method_Void_Next__ = @"
            <summary>
            Move to Next Item
            </summary>
        ";

        public const string MudTimeline_method_Void_MoveTo_Int32_ = @"
            <summary>
            Move to Item at desired index
            </summary>
        ";

        public const string MudTimeline_method_Void_AddItem_MudBlazor_MudTimelineItem_ = @"";

        public const string MudTimelineItem_Icon = @"Dot Icon";

        public const string MudTimelineItem_Variant = @"Variant of the dot.";

        public const string MudTimelineItem_DotStyle = @"User styles, applied to the lineItem dot.";

        public const string MudTimelineItem_Color = @"Color of the dot.";

        public const string MudTimelineItem_Size = @"Size of the dot.";

        public const string MudTimelineItem_Elevation = @"Elevation of the dot. The higher the number, the heavier the drop-shadow.";

        public const string MudTimelineItem_TimelineAlign = @"Overrides Timeline Parents default sorting method in Default and Reverse mode.";

        public const string MudTimelineItem_HideDot = @"If true, dot will not be displayed.";

        public const string MudTimelineItem_ItemOpposite = @"If used renders child content of the ItemOpposite.";

        public const string MudTimelineItem_ItemContent = @"If used renders child content of the ItemContent.";

        public const string MudTimelineItem_ItemDot = @"If used renders child content of the ItemDot.";

        public const string MudTimelineItem_ChildContent = @"Optional child content if no other RenderFragments is used.";

        public const string MudTimelineItem_Class = @"User class names, separated by space.";

        public const string MudTimelineItem_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTimelineItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTimelineItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTimelineItem_method_Void_Dispose__ = @"";

        public const string MudTimePicker_OpenTo = @"First view to show in the MudDatePicker.";

        public const string MudTimePicker_TimeEditMode = @"Choose the edition mode. By default, you can edit hours and minutes.";

        public const string MudTimePicker_ClosingDelay = @"Sets the amount of time in milliseconds to wait before closing the picker. This helps the user see that the time was selected before the popover disappears.";

        public const string MudTimePicker_AutoClose = @"If AutoClose is set to true and PickerActions are defined, the hour and the minutes can be defined without any action.";

        public const string MudTimePicker_AmPm = @"If true, sets 12 hour selection clock.";

        public const string MudTimePicker_TimeFormat = @"String Format for selected time view";

        public const string MudTimePicker_Time = @"The currently selected time (two-way bindable). If null, then nothing was selected.";

        public const string MudTimePicker_TimeChanged = @"Fired when the date changes.";

        public const string MudTimePicker_InputIcon = @"Sets the icon of the input text field";

        public const string MudTimePicker_AdornmentColor = @"The color of the adornment if used. It supports the theme colors.";

        public const string MudTimePicker_AdornmentIcon = @"Sets the icon of the input text field";

        public const string MudTimePicker_AdornmentAriaLabel = @"Sets the aria-label of the input text field icon";

        public const string MudTimePicker_Placeholder = @"The short hint displayed in the input before the user enters a value.";

        public const string MudTimePicker_PickerOpened = @"Fired when the dropdown / dialog opens";

        public const string MudTimePicker_PickerClosed = @"Fired when the dropdown / dialog closes";

        public const string MudTimePicker_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.";

        public const string MudTimePicker_Square = @"If true, border-radius is set to 0 this is set to true automatically in static mode but can be overridden with Rounded bool.";

        public const string MudTimePicker_ReadOnly = @"If true, no date or time can be defined.";

        public const string MudTimePicker_Rounded = @"If true, border-radius is set to theme default when in Static Mode.";

        public const string MudTimePicker_HelperText = @"If string has value, HelperText will be applied.";

        public const string MudTimePicker_HelperTextOnFocus = @"If true, the helper text will only be visible on focus.";

        public const string MudTimePicker_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

        public const string MudTimePicker_Clearable = @"Show clear button.";

        public const string MudTimePicker_Disabled = @"If true, the picker will be disabled.";

        public const string MudTimePicker_Editable = @"If true, the picker will be editable.";

        public const string MudTimePicker_DisableToolbar = @"Hide toolbar and show only date/time views.";

        public const string MudTimePicker_ToolBarClass = @"User class names for picker's ToolBar, separated by space";

        public const string MudTimePicker_PickerVariant = @"Picker container option";

        public const string MudTimePicker_InputVariant = @"Variant of the text input";

        public const string MudTimePicker_Variant = @"Variant of the text input";

        public const string MudTimePicker_Adornment = @"Sets if the icon will be att start or end, set to false to disable.";

        public const string MudTimePicker_Orientation = @"What orientation to render in when in PickerVariant Static Mode.";

        public const string MudTimePicker_IconSize = @"Sets the Icon Size.";

        public const string MudTimePicker_Color = @"The color of the toolbar, selected and active. It supports the theme colors.";

        public const string MudTimePicker_AllowKeyboardInput = @"Changes the cursor appearance.";

        public const string MudTimePicker_TextChanged = @"Fired when the text changes.";

        public const string MudTimePicker_Text = @"The currently selected string value (two-way bindable)";

        public const string MudTimePicker_ClassActions = @"CSS class that will be applied to the action buttons container";

        public const string MudTimePicker_PickerActions = @"Define the action buttons here";

        public const string MudTimePicker_Margin = @"Will adjust vertical spacing.";

        public const string MudTimePicker_Mask = @"A mask for structured input of the date (requires Editable to be true).";

        public const string MudTimePicker_AnchorOrigin = @"Gets or sets the origin of the popover's anchor. Defaults to Origin.TopLeft";

        public const string MudTimePicker_TransformOrigin = @"Gets or sets the origin of the popover's transform. Defaults to Origin.TopLeft";

        public const string MudTimePicker_Required = @"If true, this form input is required to be filled out.";

        public const string MudTimePicker_RequiredError = @"The error text that will be displayed if the input is not filled out but required.";

        public const string MudTimePicker_ErrorText = @"The ErrorText that will be displayed if Error true.";

        public const string MudTimePicker_Error = @"If true, the label will be displayed in an error state.";

        public const string MudTimePicker_ErrorId = @"The ErrorId that will be used by aria-describedby if Error true";

        public const string MudTimePicker_Converter = @"The generic converter of the component.";

        public const string MudTimePicker_Culture = @"The culture of the component.";

        public const string MudTimePicker_Validation = @"A validation func or a validation attribute. Supported types are:
            Func&lt;T, bool&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, string&gt; ... outputs the result as error message, no error if null 
            Func&lt;T, IEnumerable&lt; string &gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, IEnumerable&lt; string &gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            Func&lt;T, Task&lt; bool &gt;&gt; ... will output the standard error message ""Invalid"" if false
            Func&lt;T, Task&lt; string &gt;&gt; ... outputs the result as error message, no error if null
            Func&lt;T, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; ... outputs all the returned error messages, no error if empty
            Func&lt;object, string, Task&lt;IEnumerable&lt; string &gt;&gt;&gt; input Form.Model, Full Path of Member ... outputs all the returned error messages, no error if empty
            System.ComponentModel.DataAnnotations.ValidationAttribute instances";

        public const string MudTimePicker_For = @"Specify an expression which returns the model's field for which validation messages should be displayed.";

        public const string MudTimePicker_Class = @"User class names, separated by space.";

        public const string MudTimePicker_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTimePicker_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTimePicker_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTimePicker_method_Void_Clear_Boolean_ = @"";

        public const string MudTimePicker_method_Void_ToggleOpen__ = @"";

        public const string MudTimePicker_method_Void_Close_Boolean_ = @"";

        public const string MudTimePicker_method_Void_Open__ = @"";

        public const string MudTimePicker_method_System_Threading_Tasks_ValueTask_FocusAsync__ = @"";

        public const string MudTimePicker_method_System_Threading_Tasks_ValueTask_BlurAsync__ = @"";

        public const string MudTimePicker_method_System_Threading_Tasks_ValueTask_SelectAsync__ = @"";

        public const string MudTimePicker_method_System_Threading_Tasks_ValueTask_SelectRangeAsync_Int32__Int32_ = @"";

        public const string MudTimePicker_method_System_String_GetErrorText__ = @"
            <summary>
            Return the validation error text or the conversion error message.
            </summary>
            <returns>Error text/message</returns>
        ";

        public const string MudTimePicker_method_System_Threading_Tasks_Task_Validate__ = @"
            <summary>
            Cause this component to validate its value.
            </summary>
        ";

        public const string MudTimePicker_method_Void_Reset__ = @"
            <summary>
            Reset the value and the validation.
            </summary>
        ";

        public const string MudTimePicker_method_Void_ResetValidation__ = @"
            <summary>
            Reset the validation.
            </summary>
        ";

        public const string MudToggleIconButton_Toggled = @"The toggled value.";

        public const string MudToggleIconButton_ToggledChanged = @"Fires whenever toggled is changed.";

        public const string MudToggleIconButton_Icon = @"The Icon that will be used in the untoggled state.";

        public const string MudToggleIconButton_ToggledIcon = @"The Icon that will be used in the toggled state.";

        public const string MudToggleIconButton_Title = @"Title of the icon used for accessibility.";

        public const string MudToggleIconButton_ToggledTitle = @"Title used in toggled state, if different.";

        public const string MudToggleIconButton_Color = @"The color of the icon in the untoggled state. It supports the theme colors.";

        public const string MudToggleIconButton_ToggledColor = @"The color of the icon in the toggled state. It supports the theme colors.";

        public const string MudToggleIconButton_Size = @"The Size of the component in the untoggled state.";

        public const string MudToggleIconButton_ToggledSize = @"The Size of the component in the toggled state.";

        public const string MudToggleIconButton_Edge = @"If set uses a negative margin.";

        public const string MudToggleIconButton_DisableRipple = @"If true, disables ripple effect.";

        public const string MudToggleIconButton_Disabled = @"If true, the button will be disabled.";

        public const string MudToggleIconButton_Variant = @"The variant to use.";

        public const string MudToggleIconButton_Class = @"User class names, separated by space.";

        public const string MudToggleIconButton_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudToggleIconButton_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudToggleIconButton_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudToggleIconButton_method_System_Threading_Tasks_Task_Toggle__ = @"";

        public const string MudToolBar_Dense = @"If true, compact padding will be used.";

        public const string MudToolBar_DisableGutters = @"If true, disables gutter padding.";

        public const string MudToolBar_ChildContent = @"Child content of component.";

        public const string MudToolBar_Class = @"User class names, separated by space.";

        public const string MudToolBar_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudToolBar_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudToolBar_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTooltip_Color = @"The color of the component. It supports the theme colors.";

        public const string MudTooltip_Text = @"Sets the text to be displayed inside the tooltip.";

        public const string MudTooltip_Arrow = @"If true, a arrow will be displayed pointing towards the content from the tooltip.";

        public const string MudTooltip_Duration = @"Sets the length of time that the opening transition takes to complete.";

        public const string MudTooltip_Delay = @"Sets the amount of time in milliseconds to wait from opening the popover before beginning to perform the transition.";

        public const string MudTooltip_Delayed = @"Changes the default transition delay in seconds.";

        public const string MudTooltip_Placement = @"Tooltip placement.";

        public const string MudTooltip_ChildContent = @"Child content of component.";

        public const string MudTooltip_TooltipContent = @"Tooltip content. May contain any valid html";

        public const string MudTooltip_Inline = @"Determines if this component should be inline with it's surrounding (default) or if it should behave like a block element.";

        public const string MudTooltip_RootStyle = @"Styles applied directly to root component of the tooltip";

        public const string MudTooltip_RootClass = @"Classes applied directly to root component of the tooltip";

        public const string MudTooltip_IsVisible = @"The visible state of the Tooltip.";

        public const string MudTooltip_IsVisibleChanged = @"An event triggered when the state of IsVisible has changed";

        public const string MudTooltip_Class = @"User class names, separated by space.";

        public const string MudTooltip_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTooltip_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTooltip_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTr_ChildContent = @"";

        public const string MudTr_Item = @"";

        public const string MudTr_IsCheckable = @"";

        public const string MudTr_IsEditable = @"";

        public const string MudTr_IsEditing = @"";

        public const string MudTr_IsEditSwitchBlocked = @"";

        public const string MudTr_IsExpandable = @"";

        public const string MudTr_IsCheckedChanged = @"";

        public const string MudTr_IsChecked = @"";

        public const string MudTr_Class = @"User class names, separated by space.";

        public const string MudTr_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTr_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTr_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTr_method_Void_OnRowClicked_Microsoft_AspNetCore_Components_Web_MouseEventArgs_ = @"";

        public const string MudTr_method_Void_Dispose__ = @"";

        public const string MudTr_method_Void_SetChecked_Boolean__Boolean_ = @"";

        public const string MudTr_method_Void_ManagePreviousEdition__ = @"";

        public const string MudTreeView_Color = @"The color of the selected treeviewitem.";

        public const string MudTreeView_CheckBoxColor = @"Check box color if multiselection is used.";

        public const string MudTreeView_MultiSelection = @"if true, multiple values can be selected via checkboxes which are automatically shown in the tree view.";

        public const string MudTreeView_CanSelect = @"if true, multiple values can be selected via checkboxes which are automatically shown in the tree view.";

        public const string MudTreeView_CanActivate = @"";

        public const string MudTreeView_ExpandOnClick = @"If true, clicking anywhere on the item will expand it, if it has childs.";

        public const string MudTreeView_ExpandOnDoubleClick = @"If true, double clicking anywhere on the item will expand it, if it has childs.";

        public const string MudTreeView_Hover = @"Hover effect for item's on mouse-over.";

        public const string MudTreeView_CanHover = @"Hover effect for item's on mouse-over.";

        public const string MudTreeView_Dense = @"If true, compact vertical padding will be applied to all treeview items.";

        public const string MudTreeView_Height = @"Setting a height will allow to scroll the treeview. If not set, it will try to grow in height. 
            You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px.";

        public const string MudTreeView_MaxHeight = @"Setting a maximum height will allow to scroll the treeview. If not set, it will try to grow in height. 
            You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px.";

        public const string MudTreeView_Width = @"Setting a width the treeview. You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px.";

        public const string MudTreeView_Disabled = @"If true, treeview will be disabled and all its childitems.";

        public const string MudTreeView_Items = @"";

        public const string MudTreeView_ActivatedValueChanged = @"";

        public const string MudTreeView_SelectedValueChanged = @"Called whenever the selected value changed.";

        public const string MudTreeView_SelectedValuesChanged = @"Called whenever the selectedvalues changed.";

        public const string MudTreeView_ChildContent = @"Child content of component.";

        public const string MudTreeView_ItemTemplate = @"ItemTemplate for rendering children.";

        public const string MudTreeView_ServerData = @"";

        public const string MudTreeView_Class = @"User class names, separated by space.";

        public const string MudTreeView_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTreeView_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTreeView_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTreeViewItem_CheckedIcon = @"Custom checked icon, leave null for default.";

        public const string MudTreeViewItem_UncheckedIcon = @"Custom unchecked icon, leave null for default.";

        public const string MudTreeViewItem_Value = @"Value of the treeviewitem. Acts as the displayed text if no text is set.";

        public const string MudTreeViewItem_Culture = @"";

        public const string MudTreeViewItem_Text = @"The text to display";

        public const string MudTreeViewItem_TextTypo = @"Tyopography for the text.";

        public const string MudTreeViewItem_TextClass = @"User class names for the text, separated by space.";

        public const string MudTreeViewItem_EndText = @"The text at the end of the item.";

        public const string MudTreeViewItem_EndTextTypo = @"Tyopography for the endtext.";

        public const string MudTreeViewItem_EndTextClass = @"User class names for the endtext, separated by space.";

        public const string MudTreeViewItem_Disabled = @"If true, treeviewitem will be disabled.";

        public const string MudTreeViewItem_ChildContent = @"Child content of component used to create sub levels.";

        public const string MudTreeViewItem_Content = @"Content of the item, if used completly replaced the default rendering.";

        public const string MudTreeViewItem_Items = @"";

        public const string MudTreeViewItem_Command = @"Command executed when the user clicks on the CommitEdit Button.";

        public const string MudTreeViewItem_Expanded = @"Expand or collapse treeview item when it has children. Two-way bindable. Note: if you directly set this to
            true or false (instead of using two-way binding) it will force the item's expansion state.";

        public const string MudTreeViewItem_ExpandedChanged = @"Called whenever expanded changed.";

        public const string MudTreeViewItem_Activated = @"";

        public const string MudTreeViewItem_Selected = @"";

        public const string MudTreeViewItem_Icon = @"Icon placed before the text if set.";

        public const string MudTreeViewItem_IconColor = @"The color of the icon. It supports the theme colors.";

        public const string MudTreeViewItem_EndIcon = @"Icon placed after the text if set.";

        public const string MudTreeViewItem_EndIconColor = @"The color of the icon. It supports the theme colors.";

        public const string MudTreeViewItem_ExpandedIcon = @"The expand/collapse icon.";

        public const string MudTreeViewItem_ExpandedIconColor = @"The color of the expand/collapse button. It supports the theme colors.";

        public const string MudTreeViewItem_LoadingIcon = @"The loading icon.";

        public const string MudTreeViewItem_LoadingIconColor = @"The color of the loading. It supports the theme colors.";

        public const string MudTreeViewItem_ActivatedChanged = @"Called whenever the activated value changed.";

        public const string MudTreeViewItem_SelectedChanged = @"Called whenever the selected value changed.";

        public const string MudTreeViewItem_OnClick = @"Tree item click event.";

        public const string MudTreeViewItem_OnDoubleClick = @"Tree item double click event.";

        public const string MudTreeViewItem_Class = @"User class names, separated by space.";

        public const string MudTreeViewItem_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string MudTreeViewItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string MudTreeViewItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string MudTreeViewItemToggleButton_Visible = @"If true, displays the button.";

        public const string MudTreeViewItemToggleButton_Expanded = @"Determens when to flip the expanded icon.";

        public const string MudTreeViewItemToggleButton_Loading = @"If true, displays the loading icon.";

        public const string MudTreeViewItemToggleButton_ExpandedChanged = @"Called whenever expanded changed.";

        public const string MudTreeViewItemToggleButton_LoadingIcon = @"The loading icon.";

        public const string MudTreeViewItemToggleButton_LoadingIconColor = @"The color of the loading. It supports the theme colors.";

        public const string MudTreeViewItemToggleButton_ExpandedIcon = @"The expand/collapse icon.";

        public const string MudTreeViewItemToggleButton_ExpandedIconColor = @"The color of the expand/collapse. It supports the theme colors.";

        public const string MudVirtualize_IsEnabled = @"Set false to turn off virtualization";

        public const string MudVirtualize_ChildContent = @"Gets or sets the item template for the list.";

        public const string MudVirtualize_Items = @"Gets or sets the fixed item source.";

        public const string MudVirtualize_OverscanCount = @"Gets or sets a value that determines how many additional items will be rendered
            before and after the visible region. This help to reduce the frequency of rendering
            during scrolling. However, higher values mean that more elements will be present
            in the page.";

        public const string MultiMask_method_Void_Insert_System_String_ = @"";

        public const string MultiMask_method_Void_Delete__ = @"";

        public const string MultiMask_method_Void_Backspace__ = @"";

        public const string MultiMask_method_Void_UpdateFrom_MudBlazor_IMask_ = @"";

        public const string MultiMask_method_System_String_GetCleanText__ = @"
            <summary>
            Return the Text without Placeholders. If CleanDelimiters is enabled, then also strip all
            undefined characters. For instance, for a mask ""0000 0000 0000 0000"" the space would be
            an undefined character (a delimiter) unless it were defined as a mask character in MaskChars.
            </summary>
        ";

        public const string MultiMask_method_Void_Clear__ = @"
            <summary>
            Reset the mask as if the whole textfield was cleared
            </summary>
        ";

        public const string MultiMask_method_Void_SetText_System_String_ = @"
            <summary>
            Overwrite the mask text from the outside without losing caret position
            </summary>
            <param name=""text""></param>
        ";

        public const string NaturalSpline_method_Void_CalcParameters__ = @"";

        public const string NaturalSpline_method_Void_Interpolate__ = @"";

        public const string NaturalSpline_method_Double_Integrate__ = @"";

        public const string Num_method_Double_From_T__T_ = @"";

        public const string NumericConverter_method_Boolean_AreEqual_Double__Double__Double_ = @"";

        public const string ParameterViewExtensions_method_Boolean_Contains_T__Microsoft_AspNetCore_Components_ParameterView__System_String_ = @"";

        public const string PatternMask_method_Void_Insert_System_String_ = @"
            <summary>
            Inserts given text at caret position
            </summary>
            <param name=""input"">One or multiple characters of input</param>
        ";

        public const string PatternMask_method_Void_Delete__ = @"
            <summary>
            Implements the effect of the Del key at the current cursor position
            </summary>
        ";

        public const string PatternMask_method_Void_Backspace__ = @"
            <summary>
            Implements the effect of the Backspace key at the current cursor position
            </summary>
        ";

        public const string PatternMask_method_System_String_GetCleanText__ = @"
            <summary>
            Return the Text without Placeholders. If CleanDelimiters is enabled, then also strip all
            undefined characters. For instance, for a mask ""0000 0000 0000 0000"" the space would be
            an undefined character (a delimiter) unless it were defined as a mask character in MaskChars.
            </summary>
        ";

        public const string PatternMask_method_Void_UpdateFrom_MudBlazor_IMask_ = @"";

        public const string PatternMask_method_Void_Clear__ = @"
            <summary>
            Reset the mask as if the whole textfield was cleared
            </summary>
        ";

        public const string PatternMask_method_Void_SetText_System_String_ = @"
            <summary>
            Overwrite the mask text from the outside without losing caret position
            </summary>
            <param name=""text""></param>
        ";

        public const string PeriodicSpline_method_Void_CalcParameters__ = @"";

        public const string PeriodicSpline_method_Void_Interpolate__ = @"";

        public const string PeriodicSpline_method_Double_Integrate__ = @"";

        public const string Pie_InputData = @"";

        public const string Pie_InputLabels = @"";

        public const string Pie_XAxisLabels = @"";

        public const string Pie_ChartSeries = @"";

        public const string Pie_ChartOptions = @"";

        public const string Pie_CustomGraphics = @"RenderFragment for costumization inside the chart's svg.";

        public const string Pie_ChartType = @"The Type of the chart.";

        public const string Pie_Width = @"The Width of the chart, end with % or px.";

        public const string Pie_Height = @"The Height of the chart, end with % or px.";

        public const string Pie_LegendPosition = @"The placement direction of the legend if used.";

        public const string Pie_SelectedIndex = @"Selected index of a portion of the chart.";

        public const string Pie_SelectedIndexChanged = @"Selected index of a portion of the chart.";

        public const string Pie_Class = @"User class names, separated by space.";

        public const string Pie_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string Pie_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string Pie_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string RangeConverter_method_System_String_Join_System_String__System_String_ = @"";

        public const string RangeConverter_method_Boolean_Split_System_String__System_String_ByRef__System_String_ByRef_ = @"";

        public const string RegexMask_method_Void_Insert_System_String_ = @"
            <summary>
            Inserts given text at caret position
            </summary>
            <param name=""input"">One or multiple characters of input</param>
        ";

        public const string RegexMask_method_Void_Delete__ = @"
            <summary>
            Implements the effect of the Del key at the current cursor position
            </summary>
        ";

        public const string RegexMask_method_Void_Backspace__ = @"
            <summary>
            Implements the effect of the Backspace key at the current cursor position
            </summary>
        ";

        public const string RegexMask_method_Void_UpdateFrom_MudBlazor_IMask_ = @"";

        public const string RegexMask_method_MudBlazor_RegexMask_IPv4_Boolean__Char_ = @"
            <summary>
            Creates a predefined RegexMask for an IPv4 Address with or without port masking.
            </summary>
            <param name=""includePort"">
            Set to true to include port to the mask.
            </param>
            <param name=""maskChar"">
            Set the IPv4 maskChar. Default is '0'
            </param>
        ";

        public const string RegexMask_method_MudBlazor_RegexMask_IPv6_Boolean__Char__Char_ = @"
            <summary>
            Creates a predefined RegexMask for an IPv6 Address with or without port masking.
            </summary>
            <param name=""includePort"">
            Set to true to include port to the mask.
            </param>
            <param name=""maskChar"">
            Set the IPv6 maskChar. Default is 'X'
            </param>
            <param name=""portMaskChar"">
            Set the IPv6 portMask. Default is '0'
            </param>
        ";

        public const string RegexMask_method_MudBlazor_RegexMask_Email_System_String_ = @"
            <summary>
            Creates a predefined RegexMask for Email Address.
            </summary>
            <param name=""mask"">
            Set the email mask. Default is ""Ex. user@domain.com""
            </param>
        ";

        public const string RegexMask_method_System_String_GetCleanText__ = @"
            <summary>
            Get the Text without delimiters or placeholders. Depends on the implementation entirely.
            Clean text will usually be used for the Value property of a mask field. 
            </summary>
        ";

        public const string RegexMask_method_Void_Clear__ = @"
            <summary>
            Reset the mask as if the whole textfield was cleared
            </summary>
        ";

        public const string RegexMask_method_Void_SetText_System_String_ = @"
            <summary>
            Overwrite the mask text from the outside without losing caret position
            </summary>
            <param name=""text""></param>
        ";

        public const string ResizeBasedService_method_System_Threading_Tasks_Task_1_System_Boolean__Unsubscribe_System_Guid_ = @"";

        public const string ResizeBasedService_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string ResizeListenerService_method_Void_add_OnResized_System_EventHandler_1_MudBlazor_Services_BrowserWindowSize__ = @"";

        public const string ResizeListenerService_method_Void_remove_OnResized_System_EventHandler_1_MudBlazor_Services_BrowserWindowSize__ = @"";

        public const string ResizeListenerService_method_Void_add_OnBreakpointChanged_System_EventHandler_1_MudBlazor_Breakpoint__ = @"";

        public const string ResizeListenerService_method_Void_remove_OnBreakpointChanged_System_EventHandler_1_MudBlazor_Breakpoint__ = @"";

        public const string ResizeListenerService_method_System_Threading_Tasks_ValueTask_1_System_Boolean__MatchMedia_System_String_ = @"
            <summary>
            Determine if the Document matches the provided media query.
            </summary>
            <param name=""mediaQuery""></param>
            <returns>Returns true if matched.</returns>
        ";

        public const string ResizeListenerService_method_System_Threading_Tasks_ValueTask_1_MudBlazor_Services_BrowserWindowSize__GetBrowserWindowSize__ = @"
            <summary>
            Get the current BrowserWindowSize, this includes the Height and Width of the document.
            </summary>
        ";

        public const string ResizeListenerService_method_Void_RaiseOnResized_MudBlazor_Services_BrowserWindowSize__MudBlazor_Breakpoint_ = @"
            <summary>
            Invoked by jsInterop, use the OnResized event handler to subscribe.
            </summary>
            <param name=""browserWindowSize""></param>
            <param name=""breakpoint""></param>
        ";

        public const string ResizeListenerService_method_System_Threading_Tasks_Task_1_MudBlazor_Breakpoint__GetBreakpoint__ = @"";

        public const string ResizeListenerService_method_System_Threading_Tasks_Task_1_System_Boolean__IsMediaSize_MudBlazor_Breakpoint_ = @"";

        public const string ResizeListenerService_method_Boolean_IsMediaSize_MudBlazor_Breakpoint__MudBlazor_Breakpoint_ = @"";

        public const string ResizeListenerService_method_Void_Dispose__ = @"";

        public const string ResizeObserver_method_System_Threading_Tasks_Task_1_MudBlazor_Interop_BoundingClientRect__Observe_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string ResizeObserver_method_System_Threading_Tasks_Task_1_System_Collections_Generic_IEnumerable_1_MudBlazor_Interop_BoundingClientRect___Observe_System_Collections_Generic_IEnumerable_1_Microsoft_AspNetCore_Components_ElementReference__ = @"";

        public const string ResizeObserver_method_System_Threading_Tasks_Task_Unobserve_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string ResizeObserver_method_Boolean_IsElementObserved_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string ResizeObserver_method_Void_OnSizeChanged_System_Collections_Generic_IEnumerable_1_MudBlazor_Services_ResizeObserver_SizeChangeUpdateInfo__ = @"";

        public const string ResizeObserver_method_Void_add_OnResized_MudBlazor_Services_SizeChanged_ = @"";

        public const string ResizeObserver_method_Void_remove_OnResized_MudBlazor_Services_SizeChanged_ = @"";

        public const string ResizeObserver_method_MudBlazor_Interop_BoundingClientRect_GetSizeInfo_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string ResizeObserver_method_Double_GetHeight_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string ResizeObserver_method_Double_GetWidth_Microsoft_AspNetCore_Components_ElementReference_ = @"";

        public const string ResizeObserver_method_Void_Dispose__ = @"";

        public const string ResizeObserver_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string ResizeObserver_SizeChangeUpdateInfo_method_Boolean_op_Inequality_SizeChangeUpdateInfo__SizeChangeUpdateInfo_ = @"";

        public const string ResizeObserver_SizeChangeUpdateInfo_method_Boolean_op_Equality_SizeChangeUpdateInfo__SizeChangeUpdateInfo_ = @"";

        public const string ResizeObserver_SizeChangeUpdateInfo_method_SizeChangeUpdateInfo__Clone____ = @"";

        public const string ResizeObserver_SizeChangeUpdateInfo_method_Void_Deconstruct_System_Guid_ByRef__MudBlazor_Interop_BoundingClientRect_ByRef_ = @"";

        public const string ResizeObserverFactory_method_MudBlazor_Services_IResizeObserver_Create_MudBlazor_Services_ResizeObserverOptions_ = @"";

        public const string ResizeObserverFactory_method_MudBlazor_Services_IResizeObserver_Create__ = @"";

        public const string ResizeOptions_method_Boolean_op_Equality_MudBlazor_Services_ResizeOptions__MudBlazor_Services_ResizeOptions_ = @"";

        public const string ResizeOptions_method_Boolean_op_Inequality_MudBlazor_Services_ResizeOptions__MudBlazor_Services_ResizeOptions_ = @"";

        public const string ResizeService_method_System_Threading_Tasks_ValueTask_1_MudBlazor_Services_BrowserWindowSize__GetBrowserWindowSize__ = @"
            <summary>
            Get the current BrowserWindowSize, this includes the Height and Width of the document.
            </summary>
        ";

        public const string ResizeService_method_Void_RaiseOnResized_MudBlazor_Services_BrowserWindowSize__MudBlazor_Breakpoint__System_Guid_ = @"
            <summary>
            Invoked by jsInterop, use the OnResized event handler to subscribe.
            </summary>
            <param name=""browserWindowSize""></param>
            <param name=""_""></param>
            <param name=""optionId""></param>
        ";

        public const string ResizeService_method_System_Threading_Tasks_Task_1_System_Guid__Subscribe_System_Action_1_MudBlazor_Services_BrowserWindowSize__ = @"
            <summary>
            Subscribe to size changes of the browser window. Default ResizeOptions will be used
            </summary>
            <param name=""callback"">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <returns>The subscription id. This id is needed for unscribe </returns>
        ";

        public const string ResizeService_method_System_Threading_Tasks_Task_1_System_Guid__Subscribe_System_Action_1_MudBlazor_Services_BrowserWindowSize___MudBlazor_Services_ResizeOptions_ = @"
            <summary>
            Subscribe to size changes of the browser window using the provided options
            </summary>
            <param name=""callback"">The method (callbacK) that is invoke as soon as the size of the window has changed</param>
            <param name=""options""></param>
            <returns>The subscription id. This id is needed for unscribe</returns>
        ";

        public const string ResizeService_method_System_Threading_Tasks_Task_1_System_Boolean__Unsubscribe_System_Guid_ = @"";

        public const string ResizeService_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string ResizeServiceSubscriptionInfo_method_System_Guid_AddSubscription_System_Action_1_MudBlazor_Services_BrowserWindowSize__ = @"";

        public const string ResizeServiceSubscriptionInfo_method_Boolean_ContainsSubscription_System_Guid_ = @"";

        public const string ResizeServiceSubscriptionInfo_method_Boolean_RemoveSubscription_System_Guid_ = @"";

        public const string ResizeServiceSubscriptionInfo_method_Void_InvokeCallbacks_MudBlazor_Services_BrowserWindowSize_ = @"";

        public const string Row_ChildContent = @"";

        public const string Row_Class = @"User class names, separated by space.";

        public const string Row_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string Row_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string Row_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string ScrollListener_method_Void_add_OnScroll_System_EventHandler_1_MudBlazor_ScrollEventArgs__ = @"";

        public const string ScrollListener_method_Void_remove_OnScroll_System_EventHandler_1_MudBlazor_ScrollEventArgs__ = @"";

        public const string ScrollListener_method_Void_RaiseOnScroll_MudBlazor_ScrollEventArgs_ = @"
            <summary>
            invoked in JS, in scroll-listener.js
            </summary>
            <param name=""e"">The scroll event args</param>
        ";

        public const string ScrollListener_method_Void_Dispose__ = @"";

        public const string ScrollListenerFactory_method_MudBlazor_IScrollListener_Create_System_String_ = @"";

        public const string ScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToFragmentAsync_System_String__MudBlazor_ScrollBehavior_ = @"
            <summary>
            Scroll to an url fragment
            </summary>
            <param name=""id"">The id of the selector that is going to be scrolled to</param>
            <param name=""behavior"">smooth or auto</param>
            <returns></returns>
        ";

        public const string ScrollManager_method_System_Threading_Tasks_Task_ScrollToFragment_System_String__MudBlazor_ScrollBehavior_ = @"";

        public const string ScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToAsync_System_String__Int32__Int32__MudBlazor_ScrollBehavior_ = @"
            <summary>
            Scrolls to the coordinates of the element
            </summary>
            <param name=""id"">id of element</param>
            <param name=""left"">x coordinate</param>
            <param name=""top"">y coordinate</param>
            <param name=""behavior"">smooth or auto</param>
            <returns></returns>
        ";

        public const string ScrollManager_method_System_Threading_Tasks_Task_ScrollTo_Int32__Int32__MudBlazor_ScrollBehavior_ = @"";

        public const string ScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToTopAsync_System_String__MudBlazor_ScrollBehavior_ = @"
            <summary>
            Scrolls to the top of the element
            </summary>
            <param name=""id"">id of element</param>
            <param name=""scrollBehavior"">smooth or auto</param>
            <returns></returns>
        ";

        public const string ScrollManager_method_System_Threading_Tasks_Task_ScrollToTop_MudBlazor_ScrollBehavior_ = @"";

        public const string ScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToBottomAsync_System_String__MudBlazor_ScrollBehavior_ = @"
            <summary>
            Scroll to the bottom of the element (or if not found to the bottom of the page)
            </summary>
            <param name=""id"">id of element of null to scroll to page bottom</param>
            <param name=""behavior"">smooth or auto</param>
            <returns></returns>
        ";

        public const string ScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToYearAsync_System_String_ = @"";

        public const string ScrollManager_method_System_Threading_Tasks_ValueTask_ScrollToListItemAsync_System_String_ = @"";

        public const string ScrollManager_method_System_Threading_Tasks_ValueTask_LockScrollAsync_System_String__System_String_ = @"";

        public const string ScrollManager_method_System_Threading_Tasks_ValueTask_UnlockScrollAsync_System_String__System_String_ = @"";

        public const string ScrollManagerException_method_System_Exception_GetBaseException__ = @"";

        public const string ScrollManagerException_method_Void_GetObjectData_System_Runtime_Serialization_SerializationInfo__System_Runtime_Serialization_StreamingContext_ = @"";

        public const string ScrollSpy_method_System_Threading_Tasks_Task_StartSpying_System_String_ = @"";

        public const string ScrollSpy_method_Void_SectionChangeOccured_System_String_ = @"";

        public const string ScrollSpy_method_Void_add_ScrollSectionSectionCentered_System_EventHandler_1_MudBlazor_ScrollSectionCenteredEventArgs__ = @"";

        public const string ScrollSpy_method_Void_remove_ScrollSectionSectionCentered_System_EventHandler_1_MudBlazor_ScrollSectionCenteredEventArgs__ = @"";

        public const string ScrollSpy_method_System_Threading_Tasks_Task_ScrollToSection_System_String_ = @"";

        public const string ScrollSpy_method_System_Threading_Tasks_Task_SetSectionAsActive_System_String_ = @"";

        public const string ScrollSpy_method_System_Threading_Tasks_Task_ScrollToSection_System_Uri_ = @"";

        public const string ScrollSpy_method_System_Threading_Tasks_ValueTask_DisposeAsync__ = @"";

        public const string ScrollSpyFactory_method_MudBlazor_IScrollSpy_Create__ = @"";

        public const string SelectColumn_ShowInHeader = @"";

        public const string SelectColumn_ShowInFooter = @"";

        public const string SelectColumn_Size = @"";

        public const string SelectColumn_Class = @"User class names, separated by space.";

        public const string SelectColumn_Style = @"User styles, applied on top of the component's own classes and styles.";

        public const string SelectColumn_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

        public const string SelectColumn_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters.
            They will be splatted onto the underlying HTML tag.";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorDialog_Microsoft_Extensions_DependencyInjection_IServiceCollection_ = @"
            <summary>
            Adds a Dialog Service as a Scoped instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorSnackbar_Microsoft_Extensions_DependencyInjection_IServiceCollection__MudBlazor_SnackbarConfiguration_ = @"
            <summary>
            Adds a Snackbar Service as a Scoped instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""configuration"">Defines SnackbarConfiguration for this instance.</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorSnackbar_Microsoft_Extensions_DependencyInjection_IServiceCollection__System_Action_1_MudBlazor_SnackbarConfiguration__ = @"
            <summary>
            Adds a Snackbar Service as a Scoped instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""configuration"">Defines SnackbarConfiguration for this instance.</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorResizeListener_Microsoft_Extensions_DependencyInjection_IServiceCollection__MudBlazor_Services_ResizeOptions_ = @"
            <summary>
            Adds a ResizeListener as a Scoped instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""options"">Defines ResizeOptions for this instance</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorResizeListener_Microsoft_Extensions_DependencyInjection_IServiceCollection__System_Action_1_MudBlazor_Services_ResizeOptions__ = @"
            <summary>
            Adds a ResizeListener as a Scoped instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""options"">Defines ResizeOptions for this instance</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorResizeObserver_Microsoft_Extensions_DependencyInjection_IServiceCollection__System_Action_1_MudBlazor_Services_ResizeObserverOptions__ = @"
            <summary>
            Adds a IResizeObserver as a Transient instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""options"">Defines ResizeObserverOptions for this instance</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorResizeObserver_Microsoft_Extensions_DependencyInjection_IServiceCollection__MudBlazor_Services_ResizeObserverOptions_ = @"
            <summary>
            Adds a IResizeObserver as a Transient instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""options"">Defines ResizeObserverOptions for this instance</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorResizeObserverFactory_Microsoft_Extensions_DependencyInjection_IServiceCollection__System_Action_1_MudBlazor_Services_ResizeObserverOptions__ = @"
            <summary>
            Adds a IResizeObserverFactory as a scoped dependency.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""options"">Defines ResizeObserverOptions for this instance</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorResizeObserverFactory_Microsoft_Extensions_DependencyInjection_IServiceCollection__MudBlazor_Services_ResizeObserverOptions_ = @"
            <summary>
            Adds a IResizeObserverFactory as a scoped dependency.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""options"">Defines ResizeObserverOptions for this instance</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorKeyInterceptor_Microsoft_Extensions_DependencyInjection_IServiceCollection_ = @"
            <summary>
            Adds IKeyInterceptor as a Transient instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorJsEvent_Microsoft_Extensions_DependencyInjection_IServiceCollection_ = @"
            <summary>
            Adds JsEvent as a Transient instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorScrollManager_Microsoft_Extensions_DependencyInjection_IServiceCollection_ = @"
            <summary>
            Adds ScrollManager as a transient instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudPopoverService_Microsoft_Extensions_DependencyInjection_IServiceCollection__System_Action_1_MudBlazor_PopoverOptions__ = @"
            <summary>
            Adds ScrollManager as a transient instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""options"">Defines PopoverOptions for the application/user</param>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudPopoverService_Microsoft_Extensions_DependencyInjection_IServiceCollection__MudBlazor_PopoverOptions_ = @"
            <summary>
            Adds ScrollManager as a transient instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""options"">Defines PopoverOptions for the application/user</param>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorScrollListener_Microsoft_Extensions_DependencyInjection_IServiceCollection_ = @"
            <summary>
            Adds ScrollListener as a transient instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorScrollSpy_Microsoft_Extensions_DependencyInjection_IServiceCollection_ = @"
            <summary>
            Adds ScrollSpy as a transient instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudBlazorJsApi_Microsoft_Extensions_DependencyInjection_IServiceCollection_ = @"
            <summary>
            Adds JsApi as a transient instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudEventManager_Microsoft_Extensions_DependencyInjection_IServiceCollection_ = @"
            <summary>
            Adds IEventListener as a transient instance.
            </summary>
            <param name=""services"">IServiceCollection</param>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudServices_Microsoft_Extensions_DependencyInjection_IServiceCollection__MudBlazor_Services_MudServicesConfiguration_ = @"
            <summary>
            Adds common services required by MudBlazor components
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""configuration"">Defines options for all MudBlazor services.</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string ServiceCollectionExtensions_method_Microsoft_Extensions_DependencyInjection_IServiceCollection_AddMudServices_Microsoft_Extensions_DependencyInjection_IServiceCollection__System_Action_1_MudBlazor_Services_MudServicesConfiguration__ = @"
            <summary>
            Adds common services required by MudBlazor components
            </summary>
            <param name=""services"">IServiceCollection</param>
            <param name=""configuration"">Defines options for all MudBlazor services.</param>
            <returns>Continues the IServiceCollection chain.</returns>
        ";

        public const string SizeChanged_method_Void_Invoke_System_Collections_Generic_IDictionary_2_Microsoft_AspNetCore_Components_ElementReference_MudBlazor_Interop_BoundingClientRect__ = @"";

        public const string SizeChanged_method_System_IAsyncResult_BeginInvoke_System_Collections_Generic_IDictionary_2_Microsoft_AspNetCore_Components_ElementReference_MudBlazor_Interop_BoundingClientRect___System_AsyncCallback__System_Object_ = @"";

        public const string SizeChanged_method_Void_EndInvoke_System_IAsyncResult_ = @"";

        public const string SizeChanged_method_Void_GetObjectData_System_Runtime_Serialization_SerializationInfo__System_Runtime_Serialization_StreamingContext_ = @"";

        public const string SizeChanged_method_System_Delegate___GetInvocationList__ = @"";

        public const string SizeChanged_method_Boolean_op_Equality_System_MulticastDelegate__System_MulticastDelegate_ = @"";

        public const string SizeChanged_method_Boolean_op_Inequality_System_MulticastDelegate__System_MulticastDelegate_ = @"";

        public const string SizeChanged_method_System_Delegate_CreateDelegate_System_Type__System_Object__System_String__Boolean__Boolean_ = @"";

        public const string SizeChanged_method_System_Delegate_CreateDelegate_System_Type__System_Type__System_String__Boolean__Boolean_ = @"";

        public const string SizeChanged_method_System_Delegate_CreateDelegate_System_Type__System_Reflection_MethodInfo__Boolean_ = @"";

        public const string SizeChanged_method_System_Delegate_CreateDelegate_System_Type__System_Object__System_Reflection_MethodInfo__Boolean_ = @"";

        public const string SizeChanged_method_System_Object_Clone__ = @"";

        public const string SizeChanged_method_System_Delegate_Combine_System_Delegate__System_Delegate_ = @"";

        public const string SizeChanged_method_System_Delegate_Combine_System_Delegate___ = @"";

        public const string SizeChanged_method_System_Delegate_CreateDelegate_System_Type__System_Object__System_Reflection_MethodInfo_ = @"";

        public const string SizeChanged_method_System_Delegate_CreateDelegate_System_Type__System_Reflection_MethodInfo_ = @"";

        public const string SizeChanged_method_System_Delegate_CreateDelegate_System_Type__System_Object__System_String_ = @"";

        public const string SizeChanged_method_System_Delegate_CreateDelegate_System_Type__System_Object__System_String__Boolean_ = @"";

        public const string SizeChanged_method_System_Delegate_CreateDelegate_System_Type__System_Type__System_String_ = @"";

        public const string SizeChanged_method_System_Delegate_CreateDelegate_System_Type__System_Type__System_String__Boolean_ = @"";

        public const string SizeChanged_method_System_Object_DynamicInvoke_System_Object___ = @"";

        public const string SizeChanged_method_System_Delegate_Remove_System_Delegate__System_Delegate_ = @"";

        public const string SizeChanged_method_System_Delegate_RemoveAll_System_Delegate__System_Delegate_ = @"";

        public const string SizeChanged_method_Boolean_op_Equality_System_Delegate__System_Delegate_ = @"";

        public const string SizeChanged_method_Boolean_op_Inequality_System_Delegate__System_Delegate_ = @"";

        public const string Snackbar_method_Void_add_OnClose_System_Action_1_MudBlazor_Snackbar__ = @"";

        public const string Snackbar_method_Void_remove_OnClose_System_Action_1_MudBlazor_Snackbar__ = @"";

        public const string Snackbar_method_Void_add_OnUpdate_System_Action_ = @"";

        public const string Snackbar_method_Void_remove_OnUpdate_System_Action_ = @"";

        public const string Snackbar_method_Void_Dispose__ = @"";

        public const string SnackbarMessageRenderFragment_Message = @"";

        public const string SnackbarMessageText_Message = @"";

        public const string SnackbarOptions_NormalIcon = @"Custom normal icon.";

        public const string SnackbarOptions_InfoIcon = @"Custom info icon.";

        public const string SnackbarOptions_SuccessIcon = @"Custom success icon.";

        public const string SnackbarOptions_WarningIcon = @"Custom warning icon.";

        public const string SnackbarOptions_ErrorIcon = @"Custom error icon.";

        public const string SnackbarService_method_Void_add_OnSnackbarsUpdated_System_Action_ = @"";

        public const string SnackbarService_method_Void_remove_OnSnackbarsUpdated_System_Action_ = @"";

        public const string SnackbarService_method_MudBlazor_Snackbar_Add_T__System_Collections_Generic_Dictionary_2_System_String_System_Object___MudBlazor_Severity__System_Action_1_MudBlazor_SnackbarOptions___System_String_ = @"
            <summary>
            Displays a snackbar containing a custom component specified by T.
            </summary>
            <typeparam name=""T"">The type of the custom component that specifies the content of the snackbar.</typeparam>
            <param name=""componentParameters"">Any additional parameters needed by the custom component to display the message.</param>
            <param name=""severity"">The severity of the snackbar. Dictates the color and default icon of the notification.</param>
            <param name=""configure"">Additional configuration for the snackbar.</param>
            <param name=""key"">If a key is provided, this message will not be shown while any other message with the same key is being shown.</param>
            <returns>The snackbar created by the parameters.</returns>
        ";

        public const string SnackbarService_method_MudBlazor_Snackbar_Add_Microsoft_AspNetCore_Components_RenderFragment__MudBlazor_Severity__System_Action_1_MudBlazor_SnackbarOptions___System_String_ = @"
            <summary>
            Displays a snackbar containing the RenderFragment.
            </summary>
            <param name=""message"">The RenderFragment which specifies the content of the snackbar.</param>
            <param name=""severity"">The severity of the snackbar. Dictates the color and default icon of the notification.</param>
            <param name=""configure"">Additional configuration for the snackbar.</param>
            <param name=""key"">If a key is provided, this message will not be shown while any other message with the same key is being shown.</param>
            <returns>The snackbar created by the parameters.</returns>
        ";

        public const string SnackbarService_method_MudBlazor_Snackbar_Add_System_String__MudBlazor_Severity__System_Action_1_MudBlazor_SnackbarOptions___System_String_ = @"
            <summary>
            Displays a snackbar containing the text.
            </summary>
            <param name=""message"">The string which specifies the content of the snackbar.</param>
            <param name=""severity"">The severity of the snackbar. Dictates the color and default icon of the notification.</param>
            <param name=""configure"">Additional configuration for the snackbar.</param>
            <param name=""key"">If no key is passed, defaults to the content of the message. This message will not be shown while any other message with the same key is being shown.</param>
            <returns>The snackbar created by the parameters.</returns>
        ";

        public const string SnackbarService_method_MudBlazor_Snackbar_AddNew_MudBlazor_Severity__System_String__System_Action_1_MudBlazor_SnackbarOptions__ = @"";

        public const string SnackbarService_method_Void_Clear__ = @"";

        public const string SnackbarService_method_Void_Remove_MudBlazor_Snackbar_ = @"";

        public const string SnackbarService_method_Void_Dispose__ = @"";

        public const string SnackbarStateExtensions_method_Boolean_IsShowing_MudBlazor_SnackbarState_ = @"";

        public const string SnackbarStateExtensions_method_Boolean_IsVisible_MudBlazor_SnackbarState_ = @"";

        public const string SnackbarStateExtensions_method_Boolean_IsHiding_MudBlazor_SnackbarState_ = @"";

        public const string SortDefinition_method_Boolean_op_Inequality_MudBlazor_SortDefinition_1_T___MudBlazor_SortDefinition_1_T__ = @"";

        public const string SortDefinition_method_Boolean_op_Equality_MudBlazor_SortDefinition_1_T___MudBlazor_SortDefinition_1_T__ = @"";

        public const string SortDefinition_method_MudBlazor_SortDefinition_1_T___Clone____ = @"";

        public const string SortDefinition_method_Void_Deconstruct_System_String_ByRef__Boolean_ByRef__Int32_ByRef__System_Func_2_T_System_Object__ByRef_ = @"";

        public const string SortingAssistent_method_Void_UpdateOrder_T__System_Collections_Generic_IEnumerable_1_T___MudBlazor_MudItemDropInfo_1_T___System_Linq_Expressions_Expression_1_System_Func_2_T_System_Int32____Int32_ = @"";

        public const string SplineInterpolator_method_Void_Interpolate__ = @"";

        public const string SplineInterpolator_method_Double_Integrate__ = @"";

        public const string Splitter_method_System_Memory_1_System_String__GetFragments_System_String__System_String__System_Collections_Generic_IEnumerable_1_System_String___System_String_ByRef__Boolean__Boolean_ = @"
            <summary>
            Splits the text into fragments, according to the
            text to be highlighted
            </summary>
            <param name=""text"">The whole text</param>
            <param name=""highlightedText"">The text to be highlighted</param>
            <param name=""highlightedTexts"">The texts to be highlighted</param>
            <param name=""regex"">Regex expression that was used to split fragments.</param>
            <param name=""caseSensitive"">Whether it's case sensitive or not</param>
            <param name=""untilNextBoundary"">If true, splits until the next regex boundary</param>
            <returns></returns>
        ";

        public const string StringExtensions_method_Boolean_IsEmpty_System_String_ = @"";

        public const string StringExtensions_method_Boolean_IsNonEmpty_System_String_ = @"";

        public const string StringExtensions_method_System_String_Trimmed_System_String_ = @"";

        public const string StringExtensions_method_System_String_ToPercentage_System_Decimal_ = @"";

        public const string StringExtensions_method_System_String_ToJsString_System_String_ = @"";

        public const string StringExtensions_method_Byte_GetByteValue_System_String__Int32_ = @"";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_Default_System_String__System_String_ = @"
            <summary>
            Creates a StyleBuilder used to define conditional in-line style used in a component. Call Build() to return the completed style as a string.
            </summary>
            <param name=""prop""></param>
            <param name=""value""></param>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_Default_System_String_ = @"
            <summary>
            Creates a StyleBuilder used to define conditional in-line style used in a component. Call Build() to return the completed style as a string.
            </summary>
            <param name=""style""></param>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_Empty__ = @"
            <summary>
            Creates a StyleBuilder used to define conditional in-line style used in a component. Call Build() to return the completed style as a string.
            </summary>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_AddStyle_System_String_ = @"
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon.
            </summary>
            <param name=""style""></param>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_AddStyle_System_String__System_String_ = @"
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name=""prop""></param>
            <param name=""value"">Style to add</param>
            <returns>StyleBuilder</returns>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_AddStyle_System_String__System_String__Boolean_ = @"
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name=""prop""></param>
            <param name=""value"">Style to conditionally add.</param>
            <param name=""when"">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_AddStyle_System_String__System_Func_1_System_String___Boolean_ = @"
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name=""prop""></param>
            <param name=""value"">Style to conditionally add.</param>
            <param name=""when"">Condition in which the style is added.</param>
            <returns></returns>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_AddStyle_System_String__System_String__System_Func_1_System_Boolean__ = @"
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name=""prop""></param>
            <param name=""value"">Style to conditionally add.</param>
            <param name=""when"">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_AddStyle_System_String__System_Func_1_System_String___System_Func_1_System_Boolean__ = @"
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name=""prop""></param>
            <param name=""value"">Style to conditionally add.</param>
            <param name=""when"">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_AddStyle_MudBlazor_Utilities_StyleBuilder_ = @"
            <summary>
            Adds a conditional nested StyleBuilder to the builder with separator and closing semicolon.
            </summary>
            <param name=""builder"">Style Builder to conditionally add.</param>
            <returns>StyleBuilder</returns>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_AddStyle_MudBlazor_Utilities_StyleBuilder__Boolean_ = @"
            <summary>
            Adds a conditional nested StyleBuilder to the builder with separator and closing semicolon.
            </summary>
            <param name=""builder"">Style Builder to conditionally add.</param>
            <param name=""when"">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_AddStyle_MudBlazor_Utilities_StyleBuilder__System_Func_1_System_Boolean__ = @"
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name=""builder"">Style Builder to conditionally add.</param>
            <param name=""when"">Condition in which the styles are added.</param>
            <returns>StyleBuilder</returns>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_AddStyle_System_String__System_Action_1_MudBlazor_Utilities_ValueBuilder___Boolean_ = @"
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            A ValueBuilder action defines a complex set of values for the property.
            </summary>
            <param name=""prop""></param>
            <param name=""builder""></param>
            <param name=""when""></param>
        ";

        public const string StyleBuilder_method_MudBlazor_Utilities_StyleBuilder_AddStyleFromAttributes_System_Collections_Generic_IReadOnlyDictionary_2_System_String_System_Object__ = @"
            <summary>
            Adds a conditional in-line style when it exists in a dictionary to the builder with separator.
            Null safe operation.
            </summary>
            <param name=""additionalAttributes"">Additional Attribute splat parameters</param>
            <returns>StyleBuilder</returns>
        ";

        public const string StyleBuilder_method_System_String_Build__ = @"
            <summary>
            Finalize the completed Style as a string.
            </summary>
            <returns>string</returns>
        ";

        public const string SubscriptionInfo_method_System_Guid_AddSubscription_System_Action_1_TAction__ = @"";

        public const string SubscriptionInfo_method_Boolean_ContainsSubscription_System_Guid_ = @"";

        public const string SubscriptionInfo_method_Boolean_RemoveSubscription_System_Guid_ = @"";

        public const string SubscriptionInfo_method_Void_InvokeCallbacks_TAction_ = @"";

        public const string TableButtonPositionExtentions_method_Boolean_IsEditable_MudBlazor_TableContext__Boolean_ = @"";

        public const string TableButtonPositionExtentions_method_Boolean_DisplayApplyButtonAtStart_MudBlazor_TableApplyButtonPosition_ = @"";

        public const string TableButtonPositionExtentions_method_Boolean_DisplayEditButtonAtStart_MudBlazor_TableEditButtonPosition_ = @"";

        public const string TableButtonPositionExtentions_method_Boolean_DisplayApplyButtonAtStart_MudBlazor_TableContext__Boolean_ = @"";

        public const string TableButtonPositionExtentions_method_Boolean_DisplayApplyButtonAtEnd_MudBlazor_TableApplyButtonPosition_ = @"";

        public const string TableButtonPositionExtentions_method_Boolean_DisplayEditButtonAtEnd_MudBlazor_TableEditButtonPosition_ = @"";

        public const string TableButtonPositionExtentions_method_Boolean_DisplayApplyButtonAtEnd_MudBlazor_TableContext__Boolean_ = @"";

        public const string TableButtonPositionExtentions_method_Boolean_DisplayEditbuttonAtStart_MudBlazor_TableContext__Boolean_ = @"";

        public const string TableButtonPositionExtentions_method_Boolean_DisplayEditbuttonAtEnd_MudBlazor_TableContext__Boolean_ = @"";

        public const string TableContext_method_Void_UpdateRowCheckBoxes_Boolean_ = @"";

        public const string TableContext_method_Void_ManagePreviousEditedRow_MudBlazor_MudTr_ = @"";

        public const string TableContext_method_Void_Add_MudBlazor_MudTr__System_Object_ = @"";

        public const string TableContext_method_Void_Remove_MudBlazor_MudTr__System_Object_ = @"";

        public const string TableContext_method_System_Threading_Tasks_Task_SetSortFunc_MudBlazor_MudTableSortLabel_1_T___Boolean_ = @"";

        public const string TableContext_method_System_Collections_Generic_IEnumerable_1_T__Sort_System_Collections_Generic_IEnumerable_1_T__ = @"";

        public const string TableContext_method_Void_InitializeSorting__ = @"";

        public const string TableExtensions_method_System_Linq_IOrderedEnumerable_1_TSource__OrderByDirection_TSource_TKey__System_Collections_Generic_IEnumerable_1_TSource___MudBlazor_SortDirection__System_Func_2_TSource_TKey__ = @"";

        public const string TableExtensions_method_System_Linq_IOrderedQueryable_1_TSource__OrderByDirection_TSource_TKey__System_Linq_IQueryable_1_TSource___MudBlazor_SortDirection__System_Linq_Expressions_Expression_1_System_Func_2_TSource_TKey___ = @"";

        public const string TableExtensions_method_Boolean_EditButtonDisabled_T__MudBlazor_TableContext__T_ = @"
            <summary>
            Disabled the edit button if edit row switching is blocked and the provided item is not being edited
            </summary>
        ";

        public const string TableRowValidator_method_Void_Validate__ = @"";

        public const string TaskExtensions_method_Void_AndForget_System_Threading_Tasks_Task_ = @"
            <summary>
            Task will be awaited and exceptions will be managed by the Blazor framework.
            </summary>
        ";

        public const string TaskExtensions_method_Void_AndForget_System_Threading_Tasks_Task__MudBlazor_TaskOption_ = @"
            <summary>
            Task will be awaited and exceptions will be logged to console (TaskOption.Safe) or managed by the Blazor framework (TaskOption.None).
            </summary>
        ";

        public const string TaskExtensions_method_Void_AndForget_System_Threading_Tasks_ValueTask_ = @"
            <summary>
            ValueTask will be awaited and exceptions will be managed by the Blazor framework.
            </summary>
        ";

        public const string TaskExtensions_method_Void_AndForget_System_Threading_Tasks_ValueTask__MudBlazor_TaskOption_ = @"
            <summary>
            ValueTask will be awaited and exceptions will be logged to console (TaskOption.Safe) or managed by the Blazor framework (TaskOption.None).
            </summary>
        ";

        public const string TimeSpanExtensions_method_System_String_ToIsoString_System_TimeSpan__Boolean__Boolean_ = @"";

        public const string TimeSpanExtensions_method_System_String_ToIsoString_System_Nullable_1_System_TimeSpan___Boolean__Boolean_ = @"";

        public const string TimeSpanExtensions_method_Int32_ToAmPmHour_System_TimeSpan_ = @"";

        public const string ValueBuilder_method_MudBlazor_Utilities_ValueBuilder_AddValue_System_String__Boolean_ = @"
            <summary>
            Adds a space separated conditional value to a property.
            </summary>
            <param name=""value""></param>
            <param name=""when""></param>
            <returns></returns>
        ";

        public const string ValueBuilder_method_MudBlazor_Utilities_ValueBuilder_AddValue_System_Func_1_System_String___Boolean_ = @"";

        public const string WebEventJsonContext_method_System_Text_Json_Serialization_Metadata_JsonTypeInfo_GetTypeInfo_System_Type_ = @"";

        public const string WebUnitsExtensions_method_System_String_ToPx_Int32_ = @"";

        public const string WebUnitsExtensions_method_System_String_ToPx_System_Nullable_1_System_Int32__ = @"";

        public const string WebUnitsExtensions_method_System_String_ToPx_Int64_ = @"";

        public const string WebUnitsExtensions_method_System_String_ToPx_System_Nullable_1_System_Int64__ = @"";

        public const string WebUnitsExtensions_method_System_String_ToPx_Double_ = @"";

        public const string WebUnitsExtensions_method_System_String_ToPx_System_Nullable_1_System_Double__ = @"";

    }
}
