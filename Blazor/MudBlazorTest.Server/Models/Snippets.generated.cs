//-----------------------------------------------------------------------
// This file is autogenerated by MudBlazor.Docs.Compiler
// Any changes to this file will be overwritten on build
// <auto-generated />
//-----------------------------------------------------------------------

namespace MudBlazor.Docs.Models
{
    public static partial class Snippets
    {
        public const string BorderRadiusCornerExample = @"<div class=""mud-theme-info py-4 px-6 mx-4 rounded-tl-xl"">
    <MudText Align=""Align.Center"">.rounded-tl-xl</MudText>
</div>
<div class=""mud-theme-tertiary py-4 px-6 mx-4 rounded-tr-xl"">
    <MudText Align=""Align.Center"">.rounded-tr-xl</MudText>
</div>
<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-br-xl"">
    <MudText Align=""Align.Center"">.rounded-br-xl</MudText>
</div>
<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-bl-xl"">
    <MudText Align=""Align.Center"">.rounded-bl-xl</MudText>
</div>";

        public const string BorderRadiusDefaultExample = @"<div class=""mud-theme-primary py-4 px-6 mx-4 rounded"">
    <MudText Align=""Align.Center"">.rounded</MudText>
</div>";

        public const string BorderRadiusPillnCircleExample = @"<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-pill"">
    <MudText Align=""Align.Center"">.rounded-pill</MudText>
</div>

<div class=""mud-theme-primary pa-7 rounded-circle""></div>";

        public const string BorderRadiusRemoveExample = @"<div class=""mud-theme-primary py-4 px-8 rounded-0"">
    <MudText Align=""Align.Center"">.rounded-0</MudText>
</div>";

        public const string BorderRadiusSidesExample = @"<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-t-xl"">
    <MudText Align=""Align.Center"">.rounded-t-xl</MudText>
</div>
<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-r-xl"">
    <MudText Align=""Align.Center"">.rounded-r-xl</MudText>
</div>
<div class=""mud-theme-tertiary py-4 px-6 mx-4 rounded-b-xl"">
    <MudText Align=""Align.Center"">.rounded-b-xl</MudText>
</div>
<div class=""mud-theme-info py-4 px-6 mx-4 rounded-l-xl"">
    <MudText Align=""Align.Center"">.rounded-l-xl</MudText>
</div>";

        public const string BorderRadiusSizeExample = @"<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-0"">
    <MudText Align=""Align.Center"">.rounded-0</MudText>
</div>
<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-sm"">
    <MudText Align=""Align.Center"">.rounded-sm</MudText>
</div>
<div class=""mud-theme-tertiary py-4 px-6 mx-4 rounded"">
    <MudText Align=""Align.Center"">.rounded</MudText>
</div>
<div class=""mud-theme-info py-4 px-6 mx-4 rounded-lg"">
    <MudText Align=""Align.Center"">.rounded-lg</MudText>
</div>
<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-xl"">
    <MudText Align=""Align.Center"">.rounded-xl</MudText>
</div>";

        public const string BorderStyleExample = @"<MudPaper Class=""border-solid border-2 mud-border-primary pa-4"" Elevation=""0"">border-solid</MudPaper>
<MudPaper Class=""border-dashed border-2 mud-border-primary pa-4"" Elevation=""0"">border-dashed</MudPaper>
<MudPaper Class=""border-dotted border-2 mud-border-primary pa-4"" Elevation=""0"">border-dotted</MudPaper>
<MudPaper Class=""border-double border-4 mud-border-primary pa-4"" Elevation=""0"">border-double</MudPaper>";

        public const string BorderStyleNoneHiddenExample = @"<MudPaper Outlined=""true"" Class=""border-none pa-4"" Elevation=""0"">border-none</MudPaper>
<MudPaper Outlined=""true"" Class=""border-hidden pa-4"" Elevation=""0"">border-hidden</MudPaper>";

        public const string BorderWidthAllSidesExample = @"<MudPaper Class=""border border-solid mud-border-primary pa-4"" Square=""true"">border</MudPaper>
<MudPaper Class=""border-2 border-solid mud-border-primary pa-4"" Square=""true"">border-2</MudPaper>
<MudPaper Class=""border-4 border-solid mud-border-primary pa-4"" Square=""true"">border-4</MudPaper>
<MudPaper Class=""border-8 border-solid mud-border-primary pa-4"" Square=""true"">border-8</MudPaper>";

        public const string BorderWidthHorizontalVerticalExample = @"<MudPaper Class=""border-x-4 border-solid mud-border-primary pa-4""  Square=""true"">border-x-4</MudPaper>
<MudPaper Class=""border-y-4 border-solid mud-border-primary pa-4""  Square=""true"">border-y-4</MudPaper>";

        public const string BorderWidthIndividualSidesExample = @"<MudPaper Class=""border-t-4 border-solid mud-border-primary pa-4"" Square=""true"">border-t-4</MudPaper>
<MudPaper Class=""border-r-4 border-solid mud-border-primary pa-4"" Square=""true"">border-r-4</MudPaper>
<MudPaper Class=""border-b-4 border-solid mud-border-primary pa-4"" Square=""true"">border-b-4</MudPaper>
<MudPaper Class=""border-l-4 border-solid mud-border-primary pa-4"" Square=""true"">border-l-4</MudPaper>";

        public const string AlignContentCenterExample = @"<MudPaper Class=""d-flex align-content-center flex-wrap flex-grow-1 gap-4"" MaxWidth=""608px"" Height=""320px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
</MudPaper>";

        public const string AlignContentEndExample = @"<MudPaper Class=""d-flex align-content-end flex-wrap flex-grow-1 gap-4"" MaxWidth=""608px"" Height=""320px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
</MudPaper>";

        public const string AlignContentSpaceAroundExample = @"<MudPaper Class=""d-flex align-content-space-around flex-wrap flex-grow-1 gap-4"" MaxWidth=""608px"" Height=""320px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
</MudPaper>";

        public const string AlignContentSpaceBetweenExample = @"<MudPaper Class=""d-flex align-content-space-between flex-wrap flex-grow-1 gap-4"" MaxWidth=""608px"" Height=""320px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
</MudPaper>";

        public const string AlignContentStartExample = @"<MudPaper Class=""d-flex align-content-start flex-wrap flex-grow-1 gap-4"" MaxWidth=""608px"" Height=""320px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
</MudPaper>";

        public const string AlignItemBaselineExample = @"<MudPaper Class=""d-flex align-baseline flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""pt-4 pb-12 d-flex flex-1 mud-theme-primary""><MudPaper Square=""true"" Elevation=""0"" Height=""4px"" Width=""100%""/></MudPaper>
    <MudPaper Class=""pt-16 pb-16 d-flex flex-1 mud-theme-primary""><MudPaper Square=""true"" Elevation=""0"" Height=""4px"" Width=""100%""/></MudPaper>
    <MudPaper Class=""pt-12 pb-4 d-flex flex-1 mud-theme-primary""><MudPaper Square=""true"" Elevation=""0"" Height=""4px"" Width=""100%""/></MudPaper>
</MudPaper>";

        public const string AlignItemCenterExample = @"<MudPaper Class=""d-flex align-center flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-4 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-8 d-flex flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignItemEndExample = @"<MudPaper Class=""d-flex align-end flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-4 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-8 d-flex flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignItemStartExample = @"<MudPaper Class=""d-flex align-start flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-8 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-12 d-flex flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignItemStretchExample = @"<MudPaper Class=""d-flex align-stretch flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-4 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-8 d-flex flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignSelfCenterExample = @"<MudPaper Class=""d-flex flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
    <MudPaper Class=""align-self-center py-4 flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignSelfEndExample = @"<MudPaper Class=""d-flex flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
    <MudPaper Class=""align-self-end py-4 flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignSelfStartExample = @"<MudPaper Class=""d-flex flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
    <MudPaper Class=""align-self-start py-4 flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignSelfStretchExample = @"<MudPaper Class=""d-flex flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
    <MudPaper Class=""align-self-stretch py-4 flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string FlexAutoExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-none d-flex py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-auto d-flex py-8 mud-theme-primary"" Width=""40%"" Elevation=""0""/>
    <MudPaper Class=""flex-auto d-flex py-8  mud-theme-primary"" Width=""20%"" Elevation=""0""/>
</div>";

        public const string FlexDirectionColumnExample = @"<MudPaper Class=""d-flex flex-column flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""100%"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""100%"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""100%"" Height=""64px""/>
</MudPaper>";

        public const string FlexDirectionColumnReversedExample = @"<MudPaper Class=""d-flex flex-column-reverse flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""100%"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""100%"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""100%"" Height=""64px""/>
</MudPaper>";

        public const string FlexDirectionRowExample = @"<MudPaper Class=""d-flex flex-row flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string FlexDirectionRowReversedExample = @"<MudPaper Class=""d-flex flex-row-reverse flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string FlexEnableExample = @"<MudPaper Class=""d-flex pa-4"">
    I'm a flexbox container.
</MudPaper>
<MudPaper Class=""d-flex pa-4"">
    I'm a flexbox container.
</MudPaper>
<MudPaper Class=""d-inline-flex pa-4"">
    I'm an inline flexbox container.
</MudPaper>
<MudPaper Class=""d-inline-flex pa-4"">
    I'm an inline flexbox container.
</MudPaper>";

        public const string FlexFlex1Example = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-none d-flex py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-1 d-flex py-8 mud-theme-primary"" Elevation=""0""/>
    <MudPaper Class=""flex-1 d-flex py-8  mud-theme-primary"" Elevation=""0""/>
</div>";

        public const string FlexGrowExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-grow-1 py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""py-8  mud-theme-primary"" Width=""64px"" Elevation=""0""/>
</div>";

        public const string FlexInitalExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-none d-flex py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-initial d-flex py-8 mud-theme-primary"" Width=""40%"" Elevation=""0""/>
    <MudPaper Class=""flex-initial d-flex py-8  mud-theme-primary"" Width=""25%"" Elevation=""0""/>
</div>";

        public const string FlexNoGrowExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-grow-1 py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-grow-0 py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-grow-1 py-8  mud-theme-primary"" Width=""64px"" Elevation=""0""/>
</div>";

        public const string FlexNoShrinkExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-1 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-shrink-0 py-8 mud-theme-primary"" Width=""128px"" Elevation=""0""/>
    <MudPaper Class=""flex-1 py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
</div>";

        public const string FlexNoneExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-none d-flex py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-none d-flex py-8 mud-theme-primary"" Width=""256px"" Elevation=""0""/>
    <MudPaper Class=""flex-1 d-flex py-8  mud-theme-primary"" Elevation=""0""/>
</div>";

        public const string FlexShrinkExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-none py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-shrink-1 py-8 mud-theme-primary"" Width=""100%"" Elevation=""0""/>
    <MudPaper Class=""flex-none py-8  mud-theme-primary"" Width=""64px"" Elevation=""0""/>
</div>";

        public const string FlexWrapNoWrapExample = @"<MudPaper Class=""d-flex flex-nowrap gap-4 overflow-auto"" MaxWidth=""560px"" Elevation=""0"">
    <MudPaper Class=""flex-none mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""flex-none mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""flex-none mud-theme-primary"" Width=""256px"" Height=""64px""/>
</MudPaper>";

        public const string FlexWrapReverseExample = @"<MudPaper Class=""d-flex flex-wrap-reverse gap-4"" MaxWidth=""528px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
</MudPaper>";

        public const string FlexWrapWrapExample = @"<MudPaper Class=""d-flex flex-wrap gap-4"" MaxWidth=""528px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
</MudPaper>";

        public const string GapBasicExample = @"<MudPaper Class=""gap-4 d-flex flex-wrap"" MaxWidth=""560px"" Elevation=""0"">
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""256px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""256px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""256px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""256px""/>
</MudPaper>";

        public const string GapRowColExample = @"<MudPaper Class=""gap-x-8 gap-y-4 d-flex flex-wrap"" MaxWidth=""560px"" Elevation=""0"">
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
</MudPaper>";

        public const string JustifyContentCenterExample = @"<MudPaper Class=""d-flex justify-center flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string JustifyContentEndExample = @"<MudPaper Class=""d-flex justify-end flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string JustifyContentSpaceAroundExample = @"<MudPaper Class=""d-flex justify-space-around flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string JustifyContentSpaceBetweenExample = @"<MudPaper Class=""d-flex justify-space-between flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string JustifyContentStartExample = @"<MudPaper Class=""d-flex justify-start flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string OrderBasicExample = @"<div class=""d-flex gap-2"">
    <MudAvatar Class=""order-3"" Size=""Size.Large"" Color=""Color.Primary"" Rounded=""true"">01</MudAvatar>
    <MudAvatar Class=""order-2"" Size=""Size.Large"" Color=""Color.Primary"" Rounded=""true"">02</MudAvatar>
    <MudAvatar Class=""order-1"" Size=""Size.Large"" Color=""Color.Primary"" Rounded=""true"">03</MudAvatar>
</div>";

        public const string CursorExample = @"<MudButton Variant=""Variant.Filled"">Default</MudButton>
<MudButton Class=""cursor-progress"" Color=""Color.Primary"" Variant=""Variant.Filled"">Saving...</MudButton>
<MudButton Class=""cursor-not-allowed"" Color=""Color.Primary"" Variant=""Variant.Filled"">Delete</MudButton>";

        public const string CursorInteractiveExample = @"<div class=""d-flex flex-wrap gap-4"">
    @foreach (var cursor in Cursors)
    {
        <MudPaper Class=""@($""d-flex justify-center align-center {cursor}"")"" Width=""128px"" Height=""64px"">
            @cursor
        </MudPaper>
    }
</div>

@code {
    string[] Cursors = new[]
    {
        ""cursor-all-scroll"", ""cursor-auto"", ""cursor-cell"", ""cursor-col-resize"", ""cursor-copy"", ""cursor-crosshair"", ""cursor-default"", ""cursor-grab"", ""cursor-grabbing"", ""cursor-help"", ""cursor-move"", ""cursor-no-drop"", ""cursor-none"", ""cursor-not-allowed"", ""cursor-n-resize"", ""cursor-pointer"", ""cursor-progress"", ""cursor-row-resize"", ""cursor-text"", ""cursor-url"", ""cursor-vertical-text"", ""cursor-wait"", ""cursor-w-resize"", ""cursor-zoom-in"", ""cursor-zoom-out""
    };
}";

        public const string PointerEventsExample = @"<MudText Class=""pointer-events-auto mx-4"" Typo=""Typo.h5"">pointer-events-auto</MudText>
<MudText Class=""pointer-events-none mx-4"" Typo=""Typo.h5"">pointer-events-none</MudText>";

        public const string DisplayDblockExample = @"<div>
    <div class=""d-block pa-2 mud-theme-primary"">d-block</div>
    <div class=""d-block pa-2 mud-theme-dark"">d-block</div>
</div>";

        public const string DisplayDinlineExample = @"<div>
    <div class=""d-inline pa-2 mud-theme-primary"">d-inline</div>
    <div class=""d-inline pa-2 mud-theme-dark"">d-inline</div>
</div>";

        public const string DisplayVisibilyExample = @"<MudPaper Elevation=""0"" Class=""pa-4"" Style=""height:100px; width:180px;"">
    <div class=""d-none d-sm-flex d-md-none mud-theme-primary rounded"" style=""height:100%; width:100%;""></div>
</MudPaper>
<MudPaper Elevation=""0"" Class=""pa-4"" Style=""height:100px; width:180px;"">
    <div class=""d-lg-none mud-theme-secondary rounded"" style=""height:100%; width:100%;""></div>
</MudPaper>
<MudPaper Elevation=""0"" Class=""pa-4"" Style=""height:100px; width:180px;"">
    <div class=""d-none d-lg-block mud-theme-tertiary rounded"" style=""height:100%; width:100%;""></div>
</MudPaper>";

        public const string VisibilityExample = @"<MudPaper Class=""px-8 py-4 mud-theme-primary"">Default</MudPaper>
<MudPaper Class=""invisible px-8 py-4 mud-theme-primary"">Invisible</MudPaper>
<MudPaper Class=""px-8 py-4 mud-theme-primary"">Default</MudPaper>";

        public const string ZIndexExample = @"<MudAvatar Class=""z-30 ma-n2"" Color=""Color.Primary"" Size=""Size.Large"">M</MudAvatar>
<MudAvatar Class=""z-20 ma-n2"" Color=""Color.Secondary"" Size=""Size.Large"">U</MudAvatar>
<MudAvatar Class=""z-10 ma-n2"" Color=""Color.Tertiary"" Size=""Size.Large"">D</MudAvatar>";

        public const string SpacingBreakpointExample = @"<MudPaper Class=""pa-md-6 mx-lg-auto mud-theme-secondary"">
    <MudText Typo=""Typo.body1"">Adjust screen size to see the changes.</MudText>
</MudPaper>";

        public const string SpacingCenteringExample = @"<MudPaper Class=""mx-auto pa-6 mud-theme-success"">
    <MudText Typo=""Typo.body1"">Centered!</MudText>
</MudPaper>";

        public const string SpacingExample = @"<MudPaper Class=""pa-4 mr-16"">
    <MudText Typo=""Typo.subtitle2"">pa-4 mr-16</MudText>
</MudPaper>
<MudPaper Class=""pa-4"">
    <MudText Typo=""Typo.subtitle2"">pa-4</MudText>
</MudPaper>
<MudPaper Class=""pa-4 ml-8"">
    <MudText Typo=""Typo.subtitle2"">pa-4 ml-8</MudText>
</MudPaper>";

        public const string SpacingNegativeExample = @"<MudPaper Class=""mx-auto pa-4 mud-theme-secondary"" Style=""height:100px; width:150px;"">
</MudPaper>
<MudPaper Class=""mt-n12 mx-auto pa-6 mud-theme-primary"" Elevation=""12"" Style=""width: 350px;"">
    <MudText Typo=""Typo.body1"">This card uses negative top margin!</MudText>
</MudPaper>";

        public const string AlertAlignmentExample = @"<MudAlert Severity=""Severity.Normal"" ContentAlignment=""HorizontalAlignment.Left"">Left</MudAlert>
<MudAlert Severity=""Severity.Info"" ContentAlignment=""HorizontalAlignment.Center"">Center</MudAlert>
<MudAlert Severity=""Severity.Success"" ContentAlignment=""HorizontalAlignment.Right"">Right</MudAlert>
<MudAlert Severity=""Severity.Warning"" ContentAlignment=""HorizontalAlignment.Start"">Start</MudAlert>
<MudAlert Severity=""Severity.Error"" ContentAlignment=""HorizontalAlignment.End"">End</MudAlert>";

        public const string AlertCloseExample = @"@if (showLeaveAlert)
{
    <MudAlert Severity=""Severity.Info"" ContentAlignment=""HorizontalAlignment.Center"" ShowCloseIcon=""true"" CloseIconClicked=""(() => CloseMe(true))"">Time to leave. Please close me!</MudAlert>
}
@if (showCallAlert)
{
    <MudAlert Severity=""Severity.Success"" ContentAlignment=""HorizontalAlignment.Center"" ShowCloseIcon=""true"" CloseIconClicked=""(() => CloseMe(false))"">Time to call. Please close me!</MudAlert>
}
@if (!showLeaveAlert && !showCallAlert)
{
    <div style=""display: flex; justify-content: center;"" class=""mt-6"">
        <MudButton @onclick=""ShowAlerts"" Variant=""Variant.Filled"" Color=""Color.Primary"">Show Alerts</MudButton>
    </div>
}

@code { 
    private bool showCallAlert = true;
    private bool showLeaveAlert = true;

    private void CloseMe(bool value)
    {
        if (value)
        {
            showLeaveAlert = false;
        }
        else
        {
            showCallAlert = false;
        }
    }

    private void ShowAlerts()
    {
        showCallAlert = true;
        showLeaveAlert = true;
    }
}";

        public const string AlertDenseExample = @"<MudGrid>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Dense=""true"" Class=""my-2"">Dense Default</MudAlert>
        <MudAlert Severity=""Severity.Info"" Dense=""true"" Class=""my-2"">Dense Info</MudAlert>
        <MudAlert Severity=""Severity.Success"" Dense=""true"" Class=""my-2"">Dense Success</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Dense=""true"" Class=""my-2"">Dense Warning</MudAlert>
        <MudAlert Severity=""Severity.Error"" Dense=""true"" Class=""my-2"">Dense Error</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" Dense=""true"" Class=""my-2"">Dense Default</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" Dense=""true"" Class=""my-2"">Dense Info</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" Dense=""true"" Class=""my-2"">Dense Success</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" Dense=""true"" Class=""my-2"">Dense Warning</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" Dense=""true"" Class=""my-2"">Dense Error</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" Dense=""true"" Class=""my-2"">Dense Default</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" Dense=""true"" Class=""my-2"">Dense Info</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" Dense=""true"" Class=""my-2"">Dense Success</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" Dense=""true"" Class=""my-2"">Dense Warning</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" Dense=""true"" Class=""my-2"">Dense Error</MudAlert>
    </MudItem>
</MudGrid>";

        public const string AlertElevationExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" Elevation=""@elevation"" Class=""mt-16"">
    Elevated Alert, or is it?
</MudAlert>
<MudSlider @bind-Value=""elevation"" Min=""0"" Max=""24"" Class=""my-4"">Elevation</MudSlider>

@code {
    public int elevation = 1;
}";

        public const string AlertFilledExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"">The reactor type is RBMK-1000</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"">The reactor was fired up successfully</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"">The reactor is running at optimum temperature</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"">The reactor temperature exceeds the optimal range</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"">Meltdown is imminent</MudAlert>";

        public const string AlertNoIconExample = @"<MudGrid>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" NoIcon=""true"" Class=""mb-2 mt-3"">Default No Icon</MudAlert>
        <MudAlert Severity=""Severity.Info"" NoIcon=""true"" Class=""my-2"">Info No Icon</MudAlert>
        <MudAlert Severity=""Severity.Success"" NoIcon=""true"" Class=""my-2"">Success No Icon</MudAlert>
        <MudAlert Severity=""Severity.Warning"" NoIcon=""true"" Class=""my-2"">Warning No Icon</MudAlert>
        <MudAlert Severity=""Severity.Error"" NoIcon=""true"" Class=""my-2"">Error No Icon</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" NoIcon=""true"" Class=""my-2"">Icon Default No</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" NoIcon=""true"" Class=""my-2"">Info No Icon</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" NoIcon=""true"" Class=""my-2"">Success No Icon</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" NoIcon=""true"" Class=""my-2"">Warning No Icon</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" NoIcon=""true"" Class=""my-2"">Error No Icon</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" NoIcon=""true"" Class=""mb-2 mt-3"">Default No Icon</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" NoIcon=""true"" Class=""my-2"">Info No Icon</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" NoIcon=""true"" Class=""my-2"">Success No Icon</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" NoIcon=""true"" Class=""my-2"">Warning No Icon</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" NoIcon=""true"" Class=""my-2"">Error No Icon</MudAlert>
    </MudItem>
</MudGrid>";

        public const string AlertOutlinedExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"">The reactor type is RBMK-1000</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"">The reactor was fired up successfully</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"">The reactor is running at optimum temperature</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"">The reactor temperature exceeds the optimal range</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"">Meltdown is imminent</MudAlert>";

        public const string AlertSimpleExample = @"<MudAlert Severity=""Severity.Normal"">The reactor type is RBMK-1000</MudAlert>
<MudAlert Severity=""Severity.Info"">The reactor was fired up successfully</MudAlert>
<MudAlert Severity=""Severity.Success"">The reactor is running at optimum temperature</MudAlert>
<MudAlert Severity=""Severity.Warning"">The reactor temperature exceeds the optimal range</MudAlert>
<MudAlert Severity=""Severity.Error"">Meltdown is imminent</MudAlert>";

        public const string AlertSquareExample = @"<MudGrid>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Square=""true"" Class=""mb-2 mt-3"">Default Square</MudAlert>
        <MudAlert Severity=""Severity.Info"" Square=""true"" Class=""my-2"">Info Square</MudAlert>
        <MudAlert Severity=""Severity.Success"" Square=""true"" Class=""my-2"">Success Square</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Square=""true"" Class=""my-2"">Warning Square</MudAlert>
        <MudAlert Severity=""Severity.Error"" Square=""true"" Class=""my-2"">Error Square</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" Square=""true"" Class=""my-2"">Default Square</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" Square=""true"" Class=""my-2"">Info Square</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" Square=""true"" Class=""my-2"">Success Square</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" Square=""true"" Class=""my-2"">Warning Square</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" Square=""true"" Class=""my-2"">Error Square</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" Square=""true"" Class=""mb-2 mt-3"">Default Square</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" Square=""true"" Class=""my-2"">Info Square</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" Square=""true"" Class=""my-2"">Success Square</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" Square=""true"" Class=""my-2"">Warning Square</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" Square=""true"" Class=""my-2"">Error Square</MudAlert>
    </MudItem>
</MudGrid>";

        public const string AppBarBottomExample = @"<MudLayout>
    <MudMainContent Class=""pt-0"">
        <MudList Clickable=""true"">
            <MudListItem Text=""App Bookmark Item 1"" Icon=""@Icons.Filled.Bookmark"" />
            <MudListItem Text=""App Bookmark Item 2"" Icon=""@Icons.Filled.Bookmark"" IconColor=""Color.Primary"" />
            <MudListItem Text=""App Bookmark Item 3"" Icon=""@Icons.Filled.Bookmark"" IconColor=""Color.Secondary"" />
            <MudListItem Text=""App Bookmark Item 4"" Icon=""@Icons.Filled.Bookmark"" IconColor=""Color.Tertiary"" />
            <MudListItem Text=""App Bookmark Item 5"" Icon=""@Icons.Filled.Bookmark"" IconColor=""Color.Info"" />
            <MudListItem Text=""App Bookmark Item 6"" Icon=""@Icons.Filled.Bookmark"" IconColor=""Color.Success"" />
            <MudListItem Text=""App Bookmark Item 7"" Icon=""@Icons.Filled.Bookmark"" IconColor=""Color.Warning"" />
            <MudListItem Text=""App Bookmark Item 8"" Icon=""@Icons.Filled.Bookmark"" IconColor=""Color.Error"" />
            <MudListItem Text=""App Bookmark Item 9"" Icon=""@Icons.Filled.Bookmark"" IconColor=""Color.Dark"" />
        </MudList>
    </MudMainContent>
    <MudAppBar Bottom=""true"" Fixed=""true"" Color=""Color.Primary"" Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Material.Filled.FavoriteBorder"" Color=""Color.Inherit"" Edge=""Edge.End"" />
        <MudIconButton Icon=""@Icons.Material.Filled.MoreVert"" Color=""Color.Inherit"" Edge=""Edge.End"" />
    </MudAppBar>
</MudLayout>


@code{
    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    }
}";

        public const string AppBarDenseExample = @"<MudAppBar Color=""Color.Primary"" Fixed=""false"" Dense=""true"">
    <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" />
    <MudSpacer />
    <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" />
</MudAppBar>";

        public const string AppBarElevationExample = @"<MudAppBar Color=""Color.Primary"" Fixed=""false"" Elevation=""0"">
    <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" />
    <MudSpacer />
    <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" />
</MudAppBar>";

        public const string AppBarSimpleExample = @"<MudAppBar Color=""Color.Primary"" Fixed=""false"">
    <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" />
    <MudSpacer />
    <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" />
</MudAppBar>";

        public const string AutocompleteCancellationTokenExample = @"@using System.Threading
@using System.Net.Http.Json

<MudGrid>
	<MudItem xs=""12"">
		<MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""_state"" SearchFuncWithCancel=""@Search"" Variant=""Variant.Outlined"" ShowProgressIndicator=""true"" />
	</MudItem>
</MudGrid>

@code {
	[Inject] private HttpClient HttpClient { get; set; }
	private string _state;

	private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
	{
		//the http endpoint does not return immediately. There is an artifical delay built-in
		var result = await HttpClient.GetFromJsonAsync<IEnumerable<string>>($""webapi/AmericanStates/searchWithDelay/{value ?? string.Empty}"", token);
		return result;
	}

}";

        public const string AutocompleteClrObjectsExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value1"" 
                         SearchFunc=""@Search"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value2"" 
                         SearchFunc=""@Search"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"">
            <ItemTemplate Context=""e"">                          
                <MudText>
                    <MudIcon Icon=""@Icons.Material.Filled.CheckBoxOutlineBlank"" Class=""mb-n1 mr-3""/>@($""{e.Name} ({e.Sign})"")
                </MudText>
            </ItemTemplate>
            <ItemSelectedTemplate Context=""e"">                
                <MudText>
                    <MudIcon Icon=""@Icons.Material.Filled.CheckBox"" Class=""mb-n1 mr-3""/>@($""{e.Name} ({e.Sign})"")
                </MudText>
            </ItemSelectedTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudText Class=""mb-n3"" Typo=""Typo.body2"">
            Selected values: <MudChip>@(value1?.ToString() ?? ""Not selected"")</MudChip><MudChip>@(value2?.ToString() ?? ""Not selected"")</MudChip>
        </MudText>
    </MudItem>
</MudGrid>

@code {
    private Element value1, value2;

    private async Task<IEnumerable<Element>> Search(string value)
    {
        return  await httpClient.GetFromJsonAsync<List<Element>>($""webapi/periodictable/{value}"");
    }
}";

        public const string AutocompleteMarginDenseExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"">
        <div>
            <MudCheckBox T=""bool"" CheckedChanged=""ChangeMargin"" Color=""Color.Primary"" Label=""@("" Margin: "" + _margin)"" />
        </div>
        <div>
            <MudCheckBox @bind-Checked=""_dense"" Color=""Color.Primary"" Label=""@("" Dense: "" + _dense)"" />
        </div>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value1"" SearchFunc=""@Search1"" Margin=""@_margin"" Dense=""@_dense"" Variant=""Variant.Outlined"" />
    </MudItem>
</MudGrid>

@code {
    Margin _margin = Margin.None;
    bool _dense = false;

    private void ChangeMargin()
    {
        if (_margin == Margin.None)
        {
            _margin = Margin.Dense;
        }
        else
        {
            _margin = Margin.None;
        }
    }

    private string value1;
    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}";

        public const string AutocompletePresentationExtrasExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value1""
                         SearchFunc=""@Search"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"">
            <MoreItemsTemplate>
                <MudText Align=""Align.Center"" Class=""px-4 py-1"">
                    Only the first 10 items are shown
                </MudText>
            </MoreItemsTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value2""
                         SearchFunc=""@SearchEmpty"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"">
            <NoItemsTemplate>
                <MudText Align=""Align.Center"" Class=""px-4 py-1"">
                    No items found
                </MudText>
            </NoItemsTemplate>
        </MudAutocomplete>
    </MudItem>
</MudGrid>

@code {
    private Element value1, value2;

    private async Task<IEnumerable<Element>> Search(string value)
    {
        return await httpClient.GetFromJsonAsync<List<Element>>($""webapi/periodictable/{value}"");
    }

    private async Task<IEnumerable<Element>> SearchEmpty(string value)
    {
        await Task.Delay(5);
        return Array.Empty<Element>();
    }
}";

        public const string AutocompleteProgressExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value1"" SearchFunc=""@Search1"" Variant=""Variant.Outlined"" ShowProgressIndicator=""true"" ProgressIndicatorColor=""SelectedColor"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value3"" SearchFunc=""@Search1"" Variant=""Variant.Outlined"" ProgressIndicatorColor=""SelectedColor"">
            <ProgressIndicatorInPopoverTemplate>
                <MudList Clickable=""false"">
                    <MudListItem>
                        Loading...
                    </MudListItem>
                </MudList>
            </ProgressIndicatorInPopoverTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value2"" SearchFunc=""@Search1"" ShowProgressIndicator=""true"">
            <ProgressIndicatorTemplate>
                <MudProgressLinear Size=""Size.Small"" Indeterminate=""true"" Color=""SelectedColor"" />
            </ProgressIndicatorTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem md=""4"">
        <MudText Typo=""Typo.h6"" GutterBottom=""true"">Progress options</MudText>
        <MudSelect T=""Color"" Label=""Color"" Margin=""Margin.Dense"" Dense=""true"" Value=""@SelectedColor"" ValueChanged=""OnColorSelected"">
            <MudSelectItem T=""Color"" Value=""@Color.Default"">Default</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""@Color.Info"">Info</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""@Color.Success"">Success</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""@Color.Warning"">Warning</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""@Color.Error"">Error</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>

@code {

    public Color SelectedColor { get; set; } = Color.Default;

    private string value1;
    private string value2;
    private string value3;

    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(1000);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public void OnColorSelected(Color value)
    {
        SelectedColor = value;
    }
}";

        public const string AutocompleteUsageExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value1"" SearchFunc=""@Search1""
                         ResetValueOnEmptyText=""@resetValueOnEmptyText""
                         CoerceText=""@coerceText"" CoerceValue=""@coerceValue"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value2"" SearchFunc=""@Search2""
                         ResetValueOnEmptyText=""@resetValueOnEmptyText""
                         CoerceText=""@coerceText"" CoerceValue=""@coerceValue""
                         AdornmentIcon=""@Icons.Material.Filled.Search"" AdornmentColor=""Color.Primary"" />
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudText Class=""mb-n3"" Typo=""Typo.body2"">
            <MudChip>@(value1 ?? ""Not selected"")</MudChip><MudChip>@(value2 ?? ""Not selected"")</MudChip>
        </MudText>
    </MudItem>
    <MudItem xs=""12"" md=""12"" class=""flex-column"">
        <MudSwitch @bind-Checked=""resetValueOnEmptyText"" Color=""Color.Primary"">Reset Value on empty Text</MudSwitch>
        <MudSwitch @bind-Checked=""coerceText"" Color=""Color.Secondary"">Coerce Text to Value</MudSwitch>
        <MudSwitch @bind-Checked=""coerceValue"" Color=""Color.Tertiary"">Coerce Value to Text (if not found)</MudSwitch>
    </MudItem>
</MudGrid>

@code {
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2;
    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}";

        public const string AutocompleteValidationExample = @"@using System.ComponentModel.DataAnnotations

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <EditForm EditContext=""editContext1"">
        <DataAnnotationsValidator />
            <MudAutocomplete Label=""US States"" @bind-Value=""choice1.State"" Required=""true""
             SearchFunc=""@SearchAsync"" Immediate=""true"" CoerceValue=""@coerceValue"" ResetValueOnEmptyText=""true""
             AdornmentIcon=""@Icons.Material.Filled.Search"" AdornmentColor=""Color.Primary""
             For=""@(() => choice1.State)""/>
            <MudButton ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" Color=""Color.Primary"" 
             Class=""ml-auto mt-3 mb-3"" OnClick=""@(()=>success1=editContext1.Validate())"">Validate</MudButton>
                   @if (success1)
                   {
                       <MudText Color=""Color.Success"">Success</MudText>
                   }
        </EditForm>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <EditForm EditContext=""editContext2"">
        <DataAnnotationsValidator />
            <MudAutocomplete Label=""US States"" @bind-Value=""choice2.State"" Required=""true""
             SearchFunc=""@SearchAsync"" Immediate=""true"" CoerceValue=""@coerceValue"" ResetValueOnEmptyText=""true""
             OpenIcon=""@Icons.Material.Filled.Search"" AdornmentColor=""Color.Secondary""
             Validation=""@(new Func<string, IEnumerable<string>>(Validate))"" />
            <MudButton ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" Color=""Color.Primary"" 
                       Class=""ml-auto mt-3 mb-3"" OnClick=""@(()=>success2=editContext2.Validate())"">Validate</MudButton>
                   @if (success2)
                   {
                       <MudText Color=""Color.Success"">Success</MudText>
                   }
        </EditForm>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudForm @ref=""form"">
            <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""choice3.State"" Required=""true""
             SearchFunc=""@SearchAsync"" Immediate=""true"" CoerceValue=""@coerceValue"" ResetValueOnEmptyText=""true""
             CloseIcon=""@Icons.Material.Filled.Search"" AdornmentColor=""Color.Tertiary""
             Validation=""@(new Func<string, IEnumerable<string>>(Validate))"" />
            <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Class=""ml-auto mt-3 mb-3"" 
             OnClick=""@(()=>form.Validate())"">Validate</MudButton>
                    @if (form.IsTouched && form.IsValid)
                    {
                        <MudText Color=""Color.Success"">Success</MudText>
                    }
                    else
                    {
                        <MudText>IsTouched: @form.IsTouched, IsValid: @form.IsValid</MudText>
                    }
        </MudForm>
	</MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudText Class=""mb-n3"" Typo=""Typo.body2"">
            <MudChip>@(choice1.State ?? ""Not selected"")</MudChip><MudChip>@(choice2.State ?? ""Not selected"")</MudChip><MudChip>@(choice3.State ?? ""Not selected"")</MudChip>
        </MudText>
    </MudItem>
    <MudItem xs=""12"" md=""12"" class=""flex-column"">
        <MudSwitch @bind-Checked=""coerceValue"" Color=""Color.Tertiary"">Coerce Value to Text (if not found)</MudSwitch>
    </MudItem>
</MudGrid>

@code {
    private MudForm form;
    private bool coerceValue;
    private bool success1;
    private bool success2;
    private Choice choice1 = new();
    private Choice choice2 = new();
    private Choice choice3 = new();
    private EditContext editContext1;
    private EditContext editContext2;

    protected override void OnInitialized()
    {
        editContext1 = new EditContext(choice1);
        editContext2 = new EditContext(choice2);
    } 

    private static string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

    private async Task<IEnumerable<string>> SearchAsync(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return states;
        }

        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private IEnumerable<string> Validate(string value)
    {        
        if (string.IsNullOrWhiteSpace(value))
        {
            yield return ""The State field is required"";
            yield break;
        }

        if (!states.Contains(value))
        {
            yield return ""This is an incorrect value"";
        }
    }

    public class Choice
    {
        [Required]
        [State]
        public string State { get; set;}
    }

    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter)]
    public sealed class StateAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (!states.Contains(value))
            {
                return new ValidationResult(""This is an incorrect value"", new[] { validationContext.MemberName });
            }

            return null;
        }
    }
}";

        public const string AvatarBadgeExample = @"<MudBadge Color=""Color.Success"" Overlap=""true"" Bordered=""true"">
    <MudAvatar Image=""images/jonny.jpg"" />
</MudBadge>
<MudBadge Color=""Color.Warning"" Overlap=""true"" Bordered=""true"">
    <MudAvatar Image=""images/mony.jpg"" />
</MudBadge>
<MudBadge Color=""Color.Error"" Icon=""@Icons.Material.Filled.Remove"" Overlap=""true"" Bordered=""true"">
    <MudAvatar Image=""images/toiletvisit.jpg"" />
</MudBadge>";

        public const string AvatarBasicExample = @"<MudAvatar Color=""Color.Primary"">M</MudAvatar>
<MudAvatar Color=""Color.Secondary"">U</MudAvatar>
<MudAvatar Color=""Color.Tertiary"">D</MudAvatar>";

        public const string AvatarGroupExample = @"<MudAvatarGroup Max=""@max"" Spacing=""@spacing"" MaxColor=""Color.Primary"">
    <MudAvatar Image=""images/jonny.jpg"" />
    <MudAvatar Image=""images/mony.jpg"" />
    <MudAvatar Image=""images/toiletvisit.jpg"" />
    <MudAvatar Image=""images/jonny.jpg"" />
    <MudAvatar Image=""images/mony.jpg"" />
    <MudAvatar Image=""images/toiletvisit.jpg"" />
</MudAvatarGroup>

<MudGrid>
    <MudItem xs=""12"" sm=""6"">
        <MudSlider Min=""0"" Max=""6"" Step=""0"" @bind-Value=""@max"" Color=""Color.Info"">Max Avatars</MudSlider>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudSlider Min=""0"" Max=""16"" Step=""0"" @bind-Value=""@spacing"" Color=""Color.Error"">Spacing</MudSlider>
    </MudItem>
</MudGrid>

@code {
    int max = 3;
    int spacing = 3;
}";

        public const string AvatarIconExample = @"<MudAvatar Color=""Color.Warning"" Variant=""Variant.Filled"">
    <MudIcon Color=""Color.Dark"" Icon=""@Icons.Custom.Uncategorized.Radioactive"" Size=""Size.Large"" />
</MudAvatar>
<MudAvatar Color=""Color.Primary"" Variant=""Variant.Outlined"">
    <MudIcon Icon=""@Icons.Custom.Brands.MudBlazor"" />
</MudAvatar>
<MudAvatar Color=""Color.Secondary"" Variant=""Variant.Outlined"">
    <MudIcon Icon=""@Icons.Material.Filled.FormatListNumbered"" />
</MudAvatar>";

        public const string AvatarImageExample = @"<MudAvatar Image=""images/mony.jpg"" />
<MudAvatar Image=""images/mony.jpg"" Alt=""An image of the best dog ever!""/>
<MudAvatar Image=""images/toiletvisit.jpg"" />";

        public const string AvatarOutlinedExample = @"<MudAvatar Color=""Color.Info"" Variant=""Variant.Outlined"">M</MudAvatar>
<MudAvatar Color=""Color.Success"" Variant=""Variant.Outlined"">U</MudAvatar>
<MudAvatar Color=""Color.Warning"" Variant=""Variant.Outlined"">D</MudAvatar>";

        public const string AvatarShapesExample = @"<MudAvatar Square=""true"">N</MudAvatar>
<MudAvatar Rounded=""true"" Color=""Color.Secondary"">
    <MudIcon Icon=""@Icons.Material.Filled.FormatListNumbered"" />
</MudAvatar>
<MudAvatar Color=""Color.Primary"">
    <MudIcon Icon=""@Icons.Material.Filled.Comment"" />
</MudAvatar>
<MudAvatar Square=""true"" Variant=""Variant.Outlined"">N</MudAvatar>
<MudAvatar Rounded=""true"" Color=""Color.Secondary""  Variant=""Variant.Outlined"">
    <MudIcon Icon=""@Icons.Material.Filled.FormatListNumbered"" />
</MudAvatar>
<MudAvatar Color=""Color.Primary"" Variant=""Variant.Outlined"">
    <MudIcon Icon=""@Icons.Material.Filled.Comment"" />
</MudAvatar>";

        public const string AvatarSizeExample = @"<MudAvatar Size=""Size.Small"" Color=""Color.Primary"">A</MudAvatar>
<MudAvatar Size=""Size.Medium"" Color=""Color.Primary"">A</MudAvatar>
<MudAvatar Size=""Size.Large"" Color=""Color.Primary"">A</MudAvatar>
<MudAvatar Style=""height:70px; width:70px; font-size:2rem;"" Color=""Color.Primary"">A</MudAvatar>
<MudAvatar Style=""height:70px; width:70px; font-size:2rem;"" Color=""Color.Primary"" Variant=""Variant.Outlined"">A</MudAvatar>
<MudAvatar Size=""Size.Large"" Color=""Color.Primary"" Variant=""Variant.Outlined"">A</MudAvatar>
<MudAvatar Size=""Size.Medium"" Color=""Color.Primary"" Variant=""Variant.Outlined"">A</MudAvatar>
<MudAvatar Size=""Size.Small"" Color=""Color.Primary"" Variant=""Variant.Outlined"">A</MudAvatar>";

        public const string BadgeBasicExample = @"<div Class=""d-flex justify-space-around flex-wrap mt-4"">
    <MudBadge Content=""3"" Overlap=""true"" Class=""mx-6 my-4"">
        <MudIcon Icon=""@Icons.Material.Filled.Email"" Color=""Color.Default"" />
    </MudBadge>
    <MudBadge Content=""100"" Color=""Color.Primary"" Overlap=""true"" Class=""mx-6 my-4"">
        <MudIcon Icon=""@Icons.Material.Filled.Email"" Color=""Color.Default"" />
    </MudBadge>
    <MudBadge Icon=""@Icons.Material.Filled.Lock"" Color=""Color.Error"" Overlap=""true"" Bordered=""true"" Class=""mx-6 my-4"">
        <MudButton Color=""Color.Error"" Variant=""Variant.Filled"" DisableElevation=""true"">Security Issues</MudButton>
    </MudBadge>
    <MudBadge Dot=""true"" Color=""Color.Info"" Class=""mx-6 my-4"">
        <MudText>Bug Reports</MudText>
    </MudBadge>
</div>";

        public const string BadgeInteractiveExample = @"<MudGrid>
    <MudItem md=""3"">
        <MudPaper Class=""pa-4"" Elevation=""0"">
            <MudText Typo=""Typo.h6"" GutterBottom=""true"">Test Options</MudText>
            <MudSelect T=""string"" Label=""Component"" Margin=""Margin.Dense"" Dense=""true"" Value=""@SelectedTestComponent"" ValueChanged=""OnSelectedTestComponent"">
                <MudSelectItem T=""string"" Value=""@(""MudIcon"")"">MudIcon</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""MudButton"")"">MudButton</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""MudIconButton"")"">MudIconButton</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""MudText"")"">MudText</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""MudAvatar"")"">MudAvatar</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""MudChip"")"">MudChip</MudSelectItem>
            </MudSelect>
        </MudPaper>
    </MudItem>
    <MudItem md=""6"" Class=""d-flex align-center justify-center my-auto"">
        <MudBadge Origin=""@Origin"" Content=""@BadgeContent"" Color=""Color.Primary"" Overlap=""@Overlap"" Dot=""@Dot"" Bordered=""@Bordered"" Icon=""@BadgeIcon"">
            @if (SelectedTestComponent == ""MudIcon"")
            {
                <MudIcon Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""Color.Default"" Size=""Size.Large"" />
            }
            else if (SelectedTestComponent == ""MudButton"")
            {
                <MudButton Color=""Color.Primary"" Variant=""Variant.Filled"">MudButton</MudButton>
            }
            else if (SelectedTestComponent == ""MudIconButton"")
            {
                <MudIconButton Icon=""@Icons.Material.Filled.Email"" Color=""Color.Default"" />
            }
            else if (SelectedTestComponent == ""MudText"")
            {
                <MudText>MudText</MudText>
            }
            else if(SelectedTestComponent == ""MudAvatar"")
            {
                <MudAvatar Image=""images/mony.jpg"" Size=""Size.Large"" Class=""ma-2"" />
            }
            else if(SelectedTestComponent == ""MudChip"")
            {
                <MudChip Label=""true"" Color=""Color.Warning"" Style=""color:black;"">Radioactive Areas</MudChip>
            }
        </MudBadge>
    </MudItem>
    <MudItem md=""3"">
        <MudPaper Class=""pa-4"" Elevation=""0"">
            <MudText Typo=""Typo.h6"" GutterBottom=""true"">Badge Options</MudText>
            <MudSelect Label=""Badge Origin"" Margin=""Margin.Dense"" Dense=""true"" @bind-Value=""@Origin"">
                <MudSelectItem Value=""Origin.TopLeft"">TopLeft</MudSelectItem>
                <MudSelectItem Value=""Origin.TopCenter"">TopCenter</MudSelectItem>
                <MudSelectItem Value=""Origin.TopRight"">TopRight</MudSelectItem>
                <MudSelectItem Value=""Origin.CenterLeft"">CenterLeft</MudSelectItem>
                <MudSelectItem Value=""Origin.CenterCenter"">CenterCenter</MudSelectItem>
                <MudSelectItem Value=""Origin.CenterRight"">CenterRight</MudSelectItem>
                <MudSelectItem Value=""Origin.BottomLeft"">BottomLeft</MudSelectItem>
                <MudSelectItem Value=""Origin.BottomCenter"">BottomCenter</MudSelectItem>
                <MudSelectItem Value=""Origin.BottomRight"">BottomRight</MudSelectItem>
            </MudSelect>
            <MudCheckBox @bind-Checked=""@Dot"" Label=""Dot"" Color=""Color.Primary"" Style=""width:100%;"" />
            <MudCheckBox @bind-Checked=""@Overlap"" Label=""Overlap"" Color=""Color.Primary"" Style=""width:100%;"" />
            <MudCheckBox @bind-Checked=""@Bordered"" Label=""Bordered"" Color=""Color.Primary"" Style=""width:100%;"" />
            <MudCheckBox T=""bool"" CheckedChanged=""AddIcon"" Label=""Icon"" Color=""Color.Primary"" Style=""width:100%;"" />
            <MudText Typo=""Typo.subtitle2"" Class=""my-2"">Badge Content</MudText>
            <div style=""display: flex;"">
                <MudButton OnClick=""AddValue"" Variant=""Variant.Filled"" Size=""Size.Small"" Color=""Color.Primary"" FullWidth=""true"" Class=""mr-1"">Add @AddNumber</MudButton>
                <MudButton OnClick=""ClearContent"" Variant=""Variant.Filled"" Size=""Size.Small"" Color=""Color.Secondary"" FullWidth=""true"" Class=""ml-1"">Clear</MudButton>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public Origin Origin { get; set; } = Origin.TopRight;
    public bool Dot { get; set; }
    public bool Overlap { get; set; }
    public bool Bordered { get; set; }
    public string BadgeIcon { get; set; }

    public string SelectedTestComponent { get; set; } = ""MudChip"";
    public string AddNumber { get; set; } = ""1"";

    public int? BadgeContent { get; set; }

    public void OnSelectedTestComponent(string value)
    {
        SelectedTestComponent = value;
    }

    public void AddIcon()
    {
        if (String.IsNullOrEmpty(BadgeIcon))
        {
            BadgeIcon = Icons.Custom.Uncategorized.Radioactive;
        }
        else
        {
            BadgeIcon = null;
        }
    }

    public void AddValue()
    {
        if(BadgeContent == null)
        {
            AddNumber = ""25"";
            BadgeContent = 1;
        }
        else
        {
            BadgeContent += 25;
        }
    }

    public void ClearContent()
    {
        AddNumber = ""1"";
        BadgeContent = null;
    }
}";

        public const string BreadcrumbsBasicExample = @"<MudBreadcrumbs Items=""_items""></MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem(""Home"", href: ""#""),
        new BreadcrumbItem(""Link 1"", href: ""#""),
        new BreadcrumbItem(""Link 2"", href: null, disabled: true)
    };
}";

        public const string BreadcrumbsCollapsedExample = @"<MudBreadcrumbs Items=""_items"" MaxItems=""4""></MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem(""Home"", href: ""#""),
        new BreadcrumbItem(""Link 1"", href: ""#""),
        new BreadcrumbItem(""Link 2"", href: ""#""),
        new BreadcrumbItem(""Link 3"", href: ""#""),
        new BreadcrumbItem(""Link 4"", href: null, disabled: true)
    };
}";

        public const string BreadcrumbsItemIconsExample = @"<MudBreadcrumbs Items=""_items""></MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem(""Home"", href: ""#"", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem(""Videos"", href: ""#"", icon: Icons.Material.Filled.VideoLibrary),
        new BreadcrumbItem(""Create"", href: null, disabled: true, icon: Icons.Material.Filled.Create)
    };
}";

        public const string BreadcrumbsItemTemplateExample = @"<MudBreadcrumbs Items=""_items"">
    <ItemTemplate Context=""item"">
        <MudLink Href=""@item.Href"">@item.Text.ToUpper()</MudLink>
    </ItemTemplate>
</MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem(""Home"", href: ""#""),
        new BreadcrumbItem(""Link 1"", href: ""#""),
        new BreadcrumbItem(""Link 2"", href: null, disabled: true)
    };
}";

        public const string BreadcrumbsSeparatorExample = @"<MudBreadcrumbs Items=""_items"" Separator="">""></MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem(""Home"", href: ""#""),
        new BreadcrumbItem(""Link 1"", href: ""#""),
        new BreadcrumbItem(""Link 2"", href: null, disabled: true)
    };
}";

        public const string BreadcrumbsSeparatorTemplateExample = @"<MudBreadcrumbs Items=""_items"">
    <SeparatorTemplate>
        <MudIcon Icon=""@Icons.Material.Filled.ArrowForward"" Size=""Size.Small"" />
    </SeparatorTemplate>
</MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem(""Home"", href: ""#""),
        new BreadcrumbItem(""Link 1"", href: ""#""),
        new BreadcrumbItem(""Link 2"", href: null, disabled: true)
    };
}";

        public const string BreakpointListenerExample = @"@using MudBlazor.Services
@implements IAsyncDisposable


<MudCard Class=""pa-5"">
	<MudText>Size started with @_start</MudText>
	@if (_breakpointHistory.Count > 0)
	{
		<MudText>And continued with: </MudText>
		<MudList Dense=""_breakpointHistory.Count > 10"">
			@foreach (var item in _breakpointHistory)
			{
				<MudListItem Text=""@item.ToString()""></MudListItem>
			}
		</MudList>
	}
</MudCard>

@code
{
	[Inject] IBreakpointService BreakpointListener { get; set; }

	private List<Breakpoint> _breakpointHistory = new();

	private Guid _subscriptionId;
	private Breakpoint _start;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var subscriptionResult = await BreakpointListener.Subscribe((breakpoint) =>
			{
				_breakpointHistory.Add(breakpoint);
				InvokeAsync(StateHasChanged);
			}, new ResizeOptions
			{
				ReportRate = 250,
				NotifyOnBreakpointOnly = true,
			});

			_start = subscriptionResult.Breakpoint;
			_subscriptionId = subscriptionResult.SubscriptionId;
			StateHasChanged();
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	public async ValueTask DisposeAsync() => await BreakpointListener.Unsubscribe(_subscriptionId);
}";

        public const string BreakpointProviderPageHiddenExample = @"@using MudBlazor.Services

<MudBreakpointProvider>
	@for (int i = 0; i < _amountOfRows; i++)
	{
		<MudHidden Breakpoint=""Breakpoint.Xl"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>XL</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.Lg"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>LG</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.Md"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>MD</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.Sm"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>SM</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.Xs"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>XS</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.LgAndUp"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>LG and Up</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.MdAndUp"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>MD and Up</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.SmAndUp"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>SM and Up</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.LgAndDown"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>LG and Down</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.MdAndDown"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>MD and Down</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.SmAndDown"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>SM and Down</MudText>
			</MudCard>
		</MudHidden>
	}
</MudBreakpointProvider>

<MudSlider @bind-Value=""_amountOfRows"" Min=""1"" Max=""100""></MudSlider>
<MudText>Rows: @_amountOfRows</MudText>

@code {
	private int _amountOfRows = 2;

}";

        public const string ButtonCustomizedExample = @"<MudButton Variant=""Variant.Filled"" EndIcon=""@Icons.Material.Filled.ArrowDownward"" Style=""background-color: yellowgreen; color: white; width: 200px; height: 60px;"">
    Download Now
</MudButton>";

        public const string ButtonElevationExample = @"<MudButton Variant=""Variant.Filled"" DisableElevation=""true"" Color=""Color.Primary"">Disable elevation</MudButton>";

        public const string ButtonFilledExample = @"<MudButton Variant=""Variant.Filled"">Default</MudButton>
<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"">Primary</MudButton>
<MudButton Variant=""Variant.Filled"" Color=""Color.Secondary"">Secondary</MudButton>
<MudButton Variant=""Variant.Filled"" Disabled=""true"">Disabled</MudButton>";

        public const string ButtonFullWidthExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" FullWidth=""true"">Full Width Button</MudButton>";

        public const string ButtonIconLabelExample = @"<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Filled.Delete"" Color=""Color.Error"">Delete</MudButton>
<MudButton Variant=""Variant.Filled"" EndIcon=""@Icons.Material.Filled.Send"" Color=""Color.Primary"">Send</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Warning"">Warning</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Filled.Mic"" Disabled=""true"">Talk</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Filled.Save"" Color=""Color.Info""  Size=""Size.Small"">Save</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Filled.Save"" IconColor=""Color.Secondary"" Size=""Size.Large"">Save</MudButton>";

        public const string ButtonLinkExample = @"<MudButton Href=""https://github.com/MudBlazor/MudBlazor""
           Target=""_blank""
           Variant=""Variant.Filled""
           EndIcon=""@Icons.Custom.Brands.GitHub""
           Color=""Color.Primary""
           Disabled=@disabled>
    GitHub Link
</MudButton>
<MudButton Href=""https://github.com/MudBlazor/MudBlazor""
           Target=""_blank""
           Variant=""Variant.Text""
           EndIcon=""@Icons.Custom.Brands.GitHub""
           Color=""Color.Secondary""
           Style=""text-transform:none""
           Disabled=@disabled>
    GitHub Link
</MudButton>
<MudButton Href=""https://github.com/MudBlazor/MudBlazor""
           Target=""_blank""
           Variant=""Variant.Outlined""
           EndIcon=""@Icons.Custom.Brands.GitHub""
           Color=""Color.Tertiary""
           Disabled=@disabled>
    GitHub Link
</MudButton>
<br />
<MudSwitch Color=""Color.Primary"" @bind-Checked=@(disabled) Label=""Disable"" />

@code{
    bool disabled = false;
}";

        public const string ButtonLoadingExample = @"<MudButton Disabled=""@_processing"" OnClick=""ProcessSomething"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    @if (_processing)
    {
        <MudProgressCircular Class=""ms-n1"" Size=""Size.Small"" Indeterminate=""true""/>
        <MudText Class=""ms-2"">Processing</MudText>
    }
    else
    {
        <MudText>Click me</MudText>
    }
</MudButton>

@code {
    private bool _processing = false;

    async Task ProcessSomething()
    {
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
    }
}";

        public const string ButtonOutlinedExample = @"<MudButton Variant=""Variant.Outlined"">Default</MudButton>
<MudButton Variant=""Variant.Outlined"" Color=""Color.Primary"">Primary</MudButton>
<MudButton Variant=""Variant.Outlined"" Color=""Color.Secondary"">Secondary</MudButton>
<MudButton Variant=""Variant.Outlined"" Disabled=""true"">Disabled</MudButton>";

        public const string ButtonSizeExample = @"<MudButton Variant=""Variant.Filled"" Size=""Size.Small"" Color=""Color.Primary"">Small</MudButton>
<MudButton Variant=""Variant.Filled"" Size=""Size.Medium"" Color=""Color.Secondary"">Medium</MudButton>
<MudButton Variant=""Variant.Filled"" Size=""Size.Large"" Color=""Color.Tertiary"">Large</MudButton>";

        public const string ButtonTextExample = @"<MudButton Variant=""Variant.Text"">Default</MudButton>
<MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Primary</MudButton>
<MudButton Variant=""Variant.Text"" Color=""Color.Secondary"">Secondary</MudButton>
<MudButton Variant=""Variant.Text"" Disabled=""true"">Disabled</MudButton>";

        public const string FabSimpleExample = @"<MudFab Color=""Color.Primary"" StartIcon=""@Icons.Material.Filled.Add"" />
<MudFab Color=""Color.Secondary"" StartIcon=""@Icons.Material.Filled.Edit"" />
<MudFab Color=""Color.Tertiary"" StartIcon=""@Icons.Material.Filled.ShoppingCart"" DisableElevation=""true"" />
<MudFab StartIcon=""@Icons.Filled.Bookmark"" Label=""Bookmark"" />
<MudFab StartIcon=""@Icons.Material.Filled.Save"" Disabled=""true"" />";

        public const string FabSizeExample = @"<MudFab Color=""Color.Secondary"" StartIcon=""@Icons.Material.Filled.Add"" Size=""Size.Small"" />
<MudFab Color=""Color.Secondary"" StartIcon=""@Icons.Material.Filled.Add"" Size=""Size.Medium"" />
<MudFab Color=""Color.Secondary"" StartIcon=""@Icons.Material.Filled.Add"" Size=""Size.Large"" />";

        public const string ButtonGroupBasicExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Outlined"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Filled"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Text"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>";

        public const string ButtonGroupCustomStylesExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Outlined"" OverrideStyles=""_overrideStyles"">
    <MudButton Color=""Color.Primary"" Variant=""Variant.Outlined"">One</MudButton>
    <MudButton Color=""Color.Warning"" Variant=""Variant.Outlined"">Two</MudButton>
    <MudButton Color=""Color.Secondary"" Variant=""Variant.Outlined"">Three</MudButton>
</MudButtonGroup>

<MudSwitch @bind-Checked=""@_overrideStyles"" Label=""Override styles"" Color=""Color.Primary"" />

@code {
    private bool _overrideStyles;
}";

        public const string ButtonGroupDisableElevationExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Filled"" DisableElevation=""@_disableElevation"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudSwitch @bind-Checked=""@_disableElevation"" Label=""Disable elevation"" Color=""Color.Primary"" />

@code {
    private bool _disableElevation = true;
}";

        public const string ButtonGroupIconButtonExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Outlined"">
    <MudIconButton Icon=""@Icons.Material.Filled.AccessAlarm""></MudIconButton>
    <MudToggleIconButton Icon=""@Icons.Material.Filled.AlarmOff"" Color=""@Color.Error""
                         ToggledIcon=""@Icons.Material.Filled.AlarmOn"" ToggledColor=""@Color.Success"" />
    <MudButton StartIcon=""@Icons.Material.Filled.AlarmAdd"" IconColor=""Color.Warning"">Add alarm</MudButton>
</MudButtonGroup>";

        public const string ButtonGroupSizesColorsExample = @"<MudButtonGroup Color=""Color.Default"" Size=""Size.Small"" Variant=""Variant.Outlined"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Secondary"" Size=""Size.Medium"" Variant=""Variant.Outlined"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Primary"" Size=""Size.Large"" Variant=""Variant.Outlined"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>";

        public const string ButtonGroupSplitButtonExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Outlined"">
    <MudButton>@_buttonText</MudButton>
    <MudMenu Icon=""@Icons.Material.Filled.ArrowDropDown"">
        <MudMenuItem OnClick=""() => SetButtonText(0)"">Reply</MudMenuItem>
        <MudMenuItem OnClick=""() => SetButtonText(1)"">Reply All</MudMenuItem>
        <MudMenuItem OnClick=""() => SetButtonText(2)"">Forward</MudMenuItem>
        <MudMenuItem OnClick=""() => SetButtonText(3)"">Reply & Delete</MudMenuItem>
    </MudMenu>
</MudButtonGroup>
@code {
    private string _buttonText = ""Reply"";

    private void SetButtonText(int id)
    {
        switch (id)
        {
            case 0: _buttonText = ""Reply"";
                break;
            case 1:
                _buttonText = ""Reply All"";
                break;
            case 2:
                _buttonText = ""Forward"";
                break;
            case 3:
                _buttonText = ""Reply & Delete"";
                break;
        }
    }
}";

        public const string ButtonGroupVerticalExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Outlined"" VerticalAlign=""true"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Filled"" VerticalAlign=""true"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Text"" VerticalAlign=""true"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>";

        public const string CardCombinedExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar Color=""Color.Secondary"">I</MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo=""Typo.body1"">Istra Croatia</MudText>
            <MudText Typo=""Typo.body2"">Peninsula in Europe</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon=""@Icons.Material.Filled.Settings"" Color=""Color.Default"" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardMedia Image=""images/pilars.jpg"" Height=""250"" />
    <MudCardContent>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon=""@Icons.Material.Filled.Favorite"" Color=""Color.Default"" />
        <MudIconButton Icon=""@Icons.Material.Filled.Share"" Color=""Color.Default"" />
    </MudCardActions>
</MudCard>";

        public const string CardHeaderExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo=""Typo.h6"">The Story Book</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon=""@Icons.Material.Filled.Settings"" Color=""Color.Default"" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText>This day everything happend.</MudText>
        <MudText Typo=""Typo.body2"">The quick, brown fox jumps over a lazy dog.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Read More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string CardMediaExample = @"<MudCard>
    <MudCardMedia Image=""images/door.jpg"" Height=""200"" />
    <MudCardContent>
        <MudText Typo=""Typo.h5"">Old Paint</MudText>
        <MudText Typo=""Typo.body2"">Old paint found on a stone house door.</MudText>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Share</MudButton>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string CardOutlinedExample = @"<MudCard Outlined=""true"">
    <MudCardContent>
        <MudText>Story of the day</MudText>
        <MudText Typo=""Typo.body2"">The quick, brown fox jumps over a lazy dog.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string CardSimpleExample = @"<MudCard>
    <MudCardContent>
        <MudText>Story of the day</MudText>
        <MudText Typo=""Typo.body2"">The quick, brown fox jumps over a lazy dog.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string CarouselBindingExample = @"<MudCarousel Class=""mud-width-full"" @ref=""_carousel"" ItemsSource=""@_source"" @bind-SelectedIndex=""selectedIndex"" Style=""height:200px;"" ShowArrows=""@_arrows"" ShowBullets=""@_bullets"" EnableSwipeGesture=""@_enableSwipeGesture"" AutoCycle=""@_autocycle"">
	<ItemTemplate>
		<div class=""d-flex flex-column flex-column justify-center"" style=""height:100%"">
			<MudIcon Class=""mx-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
			<MudText Align=""@Align.Center"" Class=""mx-auto"">@context</MudText>
		</div>
	</ItemTemplate>
</MudCarousel>
<MudSwitch @bind-Checked=""@_arrows"" Color=""Color.Primary"">Show Arrows</MudSwitch>
<MudSwitch @bind-Checked=""@_bullets"" Color=""Color.Primary"">Show Bullets</MudSwitch>
<MudSwitch @bind-Checked=""@_enableSwipeGesture"" Color=""Color.Primary"">Enable Swap Gesture</MudSwitch>
<MudSwitch @bind-Checked=""@_autocycle"" Color=""Color.Primary"">Auto Cycle (Default: 5 secs)</MudSwitch>
<br />
<MudButton Class=""ma-2"" Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""AddAsync"">Add</MudButton>
<MudButton Class=""ma-2"" Variant=""Variant.Filled"" Color=""Color.Error"" OnClick=""@(async () => await DeleteAsync(_carousel.SelectedIndex))"">Delete</MudButton>
<MudSelect @bind-Value=""selectedIndex"" Label=""@($""Selected Item (index: {selectedIndex})"")"">
	@{
		int index = 0;
		foreach (var item in _source)
		{
			<MudSelectItem Value=""@index"">@item</MudSelectItem>

			index++;
		}
	}
</MudSelect>
@code {
	private MudCarousel<string> _carousel;
	private bool _arrows = true;
	private bool _bullets = true;
	private bool _enableSwipeGesture = true;
	private bool _autocycle = true;
	private IList<string> _source = new List<string>() { ""Item 1"", ""Item 2"", ""Item 3"", ""Item 4"", ""Item 5"" };
	private int selectedIndex = 2;

	private async Task AddAsync()
	{
		_source.Add($""Item {_source.Count + 1}"");
		await Task.Delay(1);
		_carousel.MoveTo(_source.Count - 1);
	}

	private async Task DeleteAsync(int index)
	{
		if (_source.Any())
		{
			_source.RemoveAt(index);
			await Task.Delay(1);
			_carousel.MoveTo(System.Math.Max(System.Math.Min(index, _source.Count - 1), 0));
		}

	}

}";

        public const string CarouselCustomTransitionExample = @"@*Keyframes by https://animate.style/*@
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"" />
<style type=""text/css"">

    .bounceIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: bounceIn;
        animation-fill-mode: forwards;
    }

    .bounceOut {
        animation-duration: 0.5s;
        animation-name: bounceOut;
        animation-fill-mode: forwards;
    }

    .backInDown {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: backInDown;
        animation-fill-mode: forwards;
    }

    .backOutDown {
        animation-duration: 0.5s;
        animation-name: backOutDown;
        animation-fill-mode: forwards;
    }

    .rotateIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: rotateIn;
        animation-fill-mode: forwards;
    }

    .rotateOut {
        animation-duration: 0.5s;
        animation-name: rotateOut;
        animation-fill-mode: forwards;
    }

</style>

<MudCarousel Class=""mud-width-full"" Style=""height:200px;"" TData=""object"" AutoCycle=""false"">
    <MudCarouselItem Color=""@Color.Primary"" Transition=""Transition.Custom"" CustomTransitionEnter=""@AnimationEntrance"" CustomTransitionExit=""@AnimationExit"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Color=""@Color.Secondary"" Transition=""Transition.Custom"" CustomTransitionEnter=""@AnimationEntrance"" CustomTransitionExit=""@AnimationExit"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Transition=""Transition.Custom"" CustomTransitionEnter=""@AnimationEntrance"" CustomTransitionExit=""@AnimationExit"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""@Color.Primary"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
</MudCarousel>

<MudTextField @bind-Value=""AnimationEntrance"" Label=""Entrance Class (copy and paste from style tag)"" Class=""ma-2"" />
<MudTextField @bind-Value=""AnimationExit"" Label=""Exit Class (copy and paste from style tag)"" Class=""ma-2""/>

@code{ 
    private string AnimationEntrance = ""bounceIn"";
    private string AnimationExit = ""bounceOut""; 
}";

        public const string CarouselExample = @"<MudCarousel Class=""mud-width-full"" Style=""height:200px;"" ShowArrows=""@arrows"" ShowBullets=""@bullets"" EnableSwipeGesture=""@enableSwipeGesture"" AutoCycle=""@autocycle"" TData=""object"">
    <MudCarouselItem Transition=""transition"" Color=""@Color.Primary"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Transition=""transition"" Color=""@Color.Secondary"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Transition=""transition"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""@Color.Primary"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
</MudCarousel>
<MudSelect @bind-Value=""transition"" Label=""Transition"" Class=""ma-2"">
    <MudSelectItem Value=""@Transition.Fade"">Fade</MudSelectItem>
    <MudSelectItem Value=""@Transition.Slide"">Slide</MudSelectItem>
    <MudSelectItem Value=""@Transition.None"">None</MudSelectItem>
</MudSelect>
<MudSwitch @bind-Checked=""@arrows"" Color=""Color.Primary"">Show Arrows</MudSwitch>
<MudSwitch @bind-Checked=""@bullets"" Color=""Color.Primary"">Show Bullets</MudSwitch>
<MudSwitch @bind-Checked=""@enableSwipeGesture"" Color=""Color.Primary"">Enable Swap Gesture</MudSwitch>
<MudSwitch @bind-Checked=""@autocycle"" Color=""Color.Primary"">Auto Cycle (Default: 5 secs)</MudSwitch>

@code{ 
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;
}";

        public const string CarouselPerPageTransitionExample = @"@*Keyframes by https://animate.style/*@
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"" />
<style type=""text/css"">

    .bounceIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: bounceIn;
        animation-fill-mode: forwards;
    }

    .bounceOut {
        animation-duration: 0.5s;
        animation-name: bounceOut;
        animation-fill-mode: forwards;
    }

    .backInDown {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: backInDown;
        animation-fill-mode: forwards;
    }

    .backOutDown {
        animation-duration: 0.5s;
        animation-name: backOutDown;
        animation-fill-mode: forwards;
    }

    .rotateIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: rotateIn;
        animation-fill-mode: forwards;
    }

    .rotateOut {
        animation-duration: 0.5s;
        animation-name: rotateOut;
        animation-fill-mode: forwards;
    }
</style>

<MudCarousel Class=""mud-width-full"" Style=""height:200px;"" TData=""object"" AutoCycle=""false"">
    <MudCarouselItem Color=""@Color.Primary"" Transition=""Transition.Slide"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Color=""@Color.Secondary"" Transition=""Transition.Fade"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Color=""@Color.Tertiary"" Transition=""Transition.Custom"" CustomTransitionEnter=""bounceIn"" CustomTransitionExit=""bounceOut"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Transition=""Transition.Custom"" CustomTransitionEnter=""backInDown"" CustomTransitionExit=""backOutDown"">
        <div class=""d-flex"" style=""background-color:lightgray; height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""@Color.Primary"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Transition=""Transition.Custom"" CustomTransitionEnter=""rotateIn"" CustomTransitionExit=""rotateOut"">
        <div class=""d-flex"" style=""background-color:lightgray; height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""@Color.Secondary"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
</MudCarousel>";

        public const string CarouselTemplatesExample = @"<MudCarousel Class=""mud-width-full"" Style=""height:200px;"" AutoCycle=""false"" TData=""object"">
    <BulletTemplate Context=""selected"">
        <div Class=""mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon"">
            <span class=""mud-icon-button-label"">
                <MudIcon Icon=""@(selected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Circle)"" Color=""@Color.Inherit"" />
            </span>
        </div>
    </BulletTemplate>
    <PreviousButtonTemplate>
        <div Class=""mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon"">
            <span class=""mud-icon-button-label"">
                <MudIcon Class=""mud-ripple mud-ripple-icon mud-icon-button-size-medium"" Icon=""@Icons.Material.Filled.SkipPrevious"" Color=""@Color.Inherit"" />
            </span>
        </div>
    </PreviousButtonTemplate>
    <NextButtonTemplate>
        <div Class=""mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon"">
            <span class=""mud-icon-button-label"">
                <MudIcon Class=""mud-ripple mud-ripple-icon mud-icon-button-size-medium"" Icon=""@Icons.Material.Filled.SkipNext"" Color=""@Color.Inherit"" />
            </span>
        </div>
    </NextButtonTemplate>
    <ChildContent>
        <MudCarouselItem Color=""@Color.Primary"">
            <div class=""d-flex"" style=""height:100%"">
                <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
            </div>
        </MudCarouselItem>
        <MudCarouselItem Color=""@Color.Secondary"">
            <div class=""d-flex"" style=""height:100%"">
                <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
            </div>
        </MudCarouselItem>
        <MudCarouselItem>
            <div class=""d-flex"" style=""height:100%"">
                <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""@Color.Primary"" Size=""@Size.Large"" />
            </div>
        </MudCarouselItem>
    </ChildContent>
</MudCarousel>

@code { }";

        public const string BarCustomGraphicsExample = @"<MudChart ChartType=""ChartType.Bar"" ChartSeries=""@Series"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350px"">
	<CustomGraphics>
		<style>
			.heavy { font: bold 30px Helvetica; }
			.Rrrrr { font: italic 40px Helvetica; fill: rgb(62,44,221); }
		</style>
		<text x=""80"" y=""35"" class=""heavy"">I Love</text>
		<text x=""105"" y=""70"" class=""Rrrrr"">MudBlazor!</text>
	</CustomGraphics>
</MudChart>


@code {
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = ""United States"", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = ""Germany"", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = ""Sweden"", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels = { ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };
}";

        public const string BarExample1 = @"<div>
    <MudChart ChartType=""ChartType.Bar"" ChartSeries=""@Series"" @bind-SelectedIndex=""Index"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350px""></MudChart>
</div>
<MudText Typo=""Typo.h6"">Selected portion of the chart: @Index</MudText>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = ""United States"", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = ""Germany"", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = ""Sweden"", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels = { ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };
}";

        public const string DonutCustomGraphicsExample = @"<MudChart ChartType=""ChartType.Donut"" Width=""300px"" Height=""300px"" InputData=""@data"" InputLabels=""@labels"">
	<CustomGraphics>
		<text class=""donut-inner-text"" x=""47%"" y=""35%"" dominant-baseline=""middle"" text-anchor=""middle"" fill=""black"" font-family=""Helvetica"" font-size=""2"">Total</text>
		<text class=""donut-inner-text"" x=""47%"" y=""50%"" dominant-baseline=""middle"" text-anchor=""middle"" fill=""black"" font-family=""Helvetica"" font-size=""5"">@data.Sum().ToString()</text>
	</CustomGraphics>
</MudChart>

@code {
    public double[] data = { 25, 77, 28, 5 };
    public string[] labels = { ""Oil"", ""Coal"", ""Gas"", ""Biomass"" };
}";

        public const string DonutExample1 = @"<MudPaper Class=""pa-4"">
    <MudChart ChartType=""ChartType.Donut"" Width=""300px"" Height=""300px"" @bind-SelectedIndex=""Index"" InputData=""@data"" InputLabels=""@labels""></MudChart>
</MudPaper>
<MudPaper Class=""pa-4 mt-2 d-flex justify-center"">
    <MudButton OnClick=""AddDataSize"" Variant=""Variant.Filled"" Color=""Color.Primary"">Add</MudButton>
    <MudButton @onclick=""RandomizeData"" Variant=""Variant.Filled"" Class=""mx-4"">Randomize</MudButton>
    <MudButton OnClick=""RemoveDataSize"" Variant=""Variant.Filled"" Color=""Color.Secondary"">Remove</MudButton>  
</MudPaper>
<MudText Typo=""Typo.h6"">Selected portion of the chart: @Index</MudText>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    public double[] data = { 50, 25, 20, 5 };
    public string[] labels = { ""Fossile"", ""Nuclear"", ""Solar"", ""Wind"", ""Oil"", ""Coal"", ""Gas"", ""Biomass"",
                                ""Hydro"", ""Geothermal"", ""Fossil"", ""Nuclear"", ""Solar"", ""Wind"", ""Oil"",
                                ""Coal"", ""Gas"", ""Biomass"", ""Hydro"", ""Geothermal"" };

    Random random = new Random();

    void RandomizeData()
    {
        var new_data = new double[dataSize];
        for (int i = 0; i < new_data.Length; i++)
            new_data[i] = random.NextDouble() * 100;
        data = new_data;
        StateHasChanged();
    }

    void AddDataSize()
    {
        if (dataSize < 20)
        {
            dataSize = dataSize + 1;
            RandomizeData();
        }
    }
    void RemoveDataSize()
    {
        if (dataSize > 0)
        {
            dataSize = dataSize - 1;
            RandomizeData();
        }
    }
}";

        public const string DonutExample2 = @"<MudChart ChartType=""ChartType.Donut"" LegendPosition=""@LegendPosition"" Width=""300px"" Height=""300px""
          InputData=""@data"" InputLabels=""@labels"">
</MudChart>


<MudSelect Label=""Legend Position"" Variant=""Variant.Outlined"" Dense=""true"" T=""@Position"" ValueChanged=""OnSelectedValue"" Class=""mt-4"">
    <MudSelectItem T=""Position"" Value=""Position.Top"">Top</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""Position.Left"">Left</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""Position.Right"">Right</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""Position.Bottom"">Bottom</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""Position.Start"">Start</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""Position.End"">End</MudSelectItem>
</MudSelect>

@code {
    public double[] data = { 25, 77, 28, 5 };
    public string[] labels = { ""Oil"", ""Coal"", ""Gas"", ""Biomass"" };

    public Position LegendPosition { get; set; } = Position.Bottom;

    private void OnSelectedValue(Position value)
    {
        switch(value)
        {
            case Position.Top:
                LegendPosition = Position.Top;
                break;
            case Position.Left:
                LegendPosition = Position.Left;
                break;
            case Position.Right:
                LegendPosition = Position.Right;
                break;
            case Position.Bottom:
                LegendPosition = Position.Bottom;
                break;
            case Position.Start:
                LegendPosition = Position.Start;
                break;
            case Position.End:
                LegendPosition = Position.End;
                break;
        }
    }
}";

        public const string LineExample1 = @"<div>
    <MudChart ChartType=""ChartType.Line"" ChartSeries=""@Series"" @bind-SelectedIndex=""Index"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350px""></MudChart>
    <MudButton @onclick=""RandomizeData"">Randomize Data</MudButton>
    <MudText Typo=""Typo.h6"">Selected portion of the chart: @Index</MudText>
</div>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = ""Series 1"", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = ""Series 2"", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = {""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };

    Random random = new Random();
    public void RandomizeData()
    {
        var new_series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = ""Series 1"", Data = new double[9] },
            new ChartSeries() { Name = ""Series 2"", Data = new double[9] },
        };
        for (int i = 0; i < 9; i++)
        {
            new_series[0].Data[i] = random.NextDouble() * 100;
            new_series[1].Data[i] = random.NextDouble() * 100;
        }
        Series = new_series;
        StateHasChanged();
    }
}";

        public const string LineExample2 = @"<MudChart ChartType=""ChartType.Line"" ChartSeries=""@_series"" XAxisLabels=""@_xAxisLabels"" ChartOptions=""@_options"" Width=""100%"" Height=""350px""></MudChart>

@code {
    private readonly List<ChartSeries> _series = new();
    private readonly ChartOptions _options = new();
    private readonly string[] _xAxisLabels = { ""1986-04-20"", ""1986-04-21"", ""1986-04-22"", ""1986-04-23"", ""1986-04-24"", ""1986-04-25"", ""1986-04-26"" };

    protected override void OnInitialized()
    {
        double[] data1 = { 65, 68, 70, 74, 74, 72, 74 };
        double[] data2 = { 88, 90, 91, 92, 91, 90, 90 };
        double[] data3 = { 89, 91, 92, 92, 92, 92, 91 };
        double[] data4 = { 85, 86, 90, 90, 92, 99, 0 };

        _series.Add(new ChartSeries { Name = ""Chernobyl-1"", Data = data1 });
        _series.Add(new ChartSeries { Name = ""Chernobyl-2"", Data = data2 });
        _series.Add(new ChartSeries { Name = ""Chernobyl-3"", Data = data3 });
        _series.Add(new ChartSeries { Name = ""Chernobyl-4"", Data = data4 });

        _options.YAxisTicks = 400;

        StateHasChanged();
    }
}";

        public const string LineExample3 = @"<div>
    <MudChart ChartType=""ChartType.Line"" ChartSeries=""@Series"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350"" ChartOptions=""options""></MudChart>
    <MudButton @onclick=""RandomizeData"">Randomize Data</MudButton>
    <MudMenu Label=""Interpolation Algorithm"" FullWidth=""true"">
        <MudMenuItem OnClick=""() => OnClickMenu(InterpolationOption.NaturalSpline)"">Natural Spline</MudMenuItem>
        <MudMenuItem OnClick=""() => OnClickMenu(InterpolationOption.EndSlope)"">End Slope</MudMenuItem>
        <MudMenuItem OnClick=""() => OnClickMenu(InterpolationOption.Periodic)"">Periodic</MudMenuItem>
    </MudMenu>
</div>

@code {
    private ChartOptions options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = ""Series 1"", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = ""Series 2"", Data = new double[] { 35, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = { ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };

    Random random = new Random();
    protected override void OnInitialized()
    {
        options.InterpolationOption = InterpolationOption.NaturalSpline;
        options.YAxisFormat = ""c2"";
    }

    public void RandomizeData()
    {
        var new_series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = ""Series 1"", Data = new double[9] },
            new ChartSeries() { Name = ""Series 2"", Data = new double[9] },
        };
        for (int i = 0; i < 9; i++)
        {
            new_series[0].Data[i] = random.NextDouble() * 100;
            new_series[1].Data[i] = random.NextDouble() * 100;
        }
        Series = new_series;
        StateHasChanged();
    }

    void OnClickMenu(InterpolationOption interpolationOption)
    {
        options.InterpolationOption = interpolationOption;
        StateHasChanged();
    }


}";

        public const string LineWidthExample = @"<div>
    <MudChart ChartType=""ChartType.Line"" ChartSeries=""@Series"" @bind-SelectedIndex=""Index"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350px"" ChartOptions=""chartOptions""></MudChart>
    <MudButton @onclick=""RandomizeData"">Randomize Data</MudButton>
    <MudButton @onclick=""RandomizeLineWidths"">Randomize Line Widths</MudButton>
    <MudText Typo=""Typo.h6"">Selected portion of the chart: @Index</MudText>
</div>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public ChartOptions chartOptions = new ChartOptions();

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = ""Series 1"", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = ""Series 2"", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = {""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };

    Random random = new Random();
    public void RandomizeData()
    {
        var new_series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = ""Series 1"", Data = new double[9] },
            new ChartSeries() { Name = ""Series 2"", Data = new double[9] },
        };
        for (int i = 0; i < 9; i++)
        {
            new_series[0].Data[i] = random.NextDouble() * 100;
            new_series[1].Data[i] = random.NextDouble() * 100;
        }
        Series = new_series;
        StateHasChanged();
    }

    public void RandomizeLineWidths()
    {
        chartOptions.LineStrokeWidth = random.NextInt64(1, 10);
        StateHasChanged();
    }
}";

        public const string PieExample1 = @"<MudPaper Class=""pa-4"">
    <MudChart ChartType=""ChartType.Pie"" InputData=""@data"" @bind-SelectedIndex=""Index"" InputLabels=""@labels"" Width=""300px"" Height=""300px"" />
</MudPaper>
<MudPaper Class=""pa-4 mt-2 d-flex justify-center"">
    <MudButton OnClick=""AddDataSize"" Variant=""Variant.Filled"" Color=""Color.Primary"">Add</MudButton>
    <MudButton @onclick=""RandomizeData"" Variant=""Variant.Filled"" Class=""mx-4"">Randomize</MudButton>
    <MudButton OnClick=""RemoveDataSize"" Variant=""Variant.Filled"" Color=""Color.Secondary"">Remove</MudButton>  
</MudPaper>
<MudText Typo=""Typo.h6"">Selected portion of the chart: @Index</MudText>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    double[] data = { 77, 25, 20, 5 };
    string[] labels = { ""Uranium"", ""Plutonium"", ""Thorium"", ""Caesium"", ""Technetium"", ""Promethium"",
                        ""Polonium"", ""Astatine"", ""Radon"", ""Francium"", ""Radium"", ""Actinium"", ""Protactinium"",
                        ""Neptunium"", ""Americium"", ""Curium"", ""Berkelium"", ""Californium"", ""Einsteinium"", ""Mudblaznium"" };

    Random random = new Random();

    void RandomizeData()
    {
        var new_data = new double[dataSize];
        for (int i = 0; i < new_data.Length; i++)
            new_data[i] = random.NextDouble() * 100;
        data = new_data;
        StateHasChanged();
    }

    void AddDataSize()
    {
        if (dataSize < 20)
        {
            dataSize = dataSize + 1;
            RandomizeData();
        }
    }
    void RemoveDataSize()
    {
        if (dataSize > 0)
        {
            dataSize = dataSize - 1;
            RandomizeData();
        }
    }
}";

        public const string CheckboxBasicExample = @"<MudCheckBox @bind-Checked=""@Basic_CheckBox1""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Basic_CheckBox2"" Color=""Color.Primary""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Basic_CheckBox3"" Color=""Color.Secondary""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Basic_CheckBox4"" Disabled=""true""></MudCheckBox>

@code {
    public bool Basic_CheckBox1 { get; set; } = true;
    public bool Basic_CheckBox2 { get; set; } = false;
    public bool Basic_CheckBox3 { get; set; } = false;
    public bool Basic_CheckBox4 { get; set; } = true;
}";

        public const string CheckboxColorExample = @"<MudCheckBox @bind-Checked=""@Basic_CheckBox1"" UnCheckedColor=""Color.Error""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Basic_CheckBox2"" Color=""Color.Primary"" UnCheckedColor=""Color.Default""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Basic_CheckBox3"" Color=""Color.Secondary"" UnCheckedColor=""Color.Default""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Basic_CheckBox4"" Disabled=""true"" UnCheckedColor=""Color.Success""></MudCheckBox>

@code {
    public bool Basic_CheckBox1 { get; set; } = true;
    public bool Basic_CheckBox2 { get; set; } = false;
    public bool Basic_CheckBox3 { get; set; } = false;
    public bool Basic_CheckBox4 { get; set; } = true;
}";

        public const string CheckboxConversionExample = @"<MudCheckBox @bind-Checked=""boolean"">bool: @boolean</MudCheckBox>
<MudCheckBox @bind-Checked=""nullable"" Color=""Color.Primary"">bool?: @nullable</MudCheckBox>
<MudCheckBox @bind-Checked=""integer"" Color=""Color.Secondary"">int: @integer</MudCheckBox>
<MudCheckBox @bind-Checked=""str"" Color=""Color.Tertiary"">string: ""@(str)""</MudCheckBox>
<MudCheckBox @bind-Checked=""customstr"" Converter=""@(new CustomStringToBoolConverter())""> custom string: ""@(customstr)""</MudCheckBox>
<MudCheckBox @bind-Checked=""obj"" Converter=""@(new ObjectToBoolConverter())"">boxed bool: ""@(obj.ToString())""</MudCheckBox>

@code{ 
    public bool boolean { get; set; } = true;
    public bool? nullable { get; set; } = true;
    public int integer { get; set; } = 1;
    public string str { get; set; } = ""on"";
    public string customstr { get; set; } = CustomStringToBoolConverter.NullString;
    public object obj { get; set; } = false;

    public class ObjectToBoolConverter : BoolConverter<object>
    {
        public ObjectToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        private object OnGet(bool? value) => value == true;

        private bool? OnSet(object arg)
        {
            if (arg == null)
                return null;
            try
            {
                if (arg is bool)
                    return (bool)arg;
                else if (arg is bool?)
                    return (bool?)arg;
                else
                {
                    UpdateSetError(""Unable to convert to bool? from type object"");
                    return null;
                }
            }
            catch (FormatException e)
            {
                UpdateSetError(""Conversion error: "" + e.Message);
                return null;
            }
        }
    }

    public class CustomStringToBoolConverter : BoolConverter<string>
    {
        public CustomStringToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        public const string TrueString = ""Yes, please"";
        public const string FalseString = ""No, thanks"";
        public const string NullString = ""I don't know"";

        private string OnGet(bool? value) => value == null ? NullString : (value == true ? TrueString : FalseString);

        private bool? OnSet(string arg)
        {
            try
            {
                if (arg == TrueString)
                    return true;
                if (arg == FalseString)
                    return false;
                return null;
            }
            catch (FormatException e)
            {
                UpdateSetError(""Conversion error: "" + e.Message);
                return null;
            }
        }
    } }";

        public const string CheckboxDenseExample = @"<MudCheckBox @bind-Checked=""@Dense_CheckBox"" Dense=""true"" Color=""Color.Success""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Dense_CheckBox"" Dense=""false"" Color=""Color.Primary""></MudCheckBox>

@code {
    public bool Dense_CheckBox { get; set; } = true;
}";

        public const string CheckboxIconExample = @"<MudCheckBox @bind-Checked=""@CheckBox1"" Color=""Color.Secondary"" CheckedIcon=""@Icons.Material.Filled.Favorite"" UncheckedIcon=""@Icons.Material.Filled.FavoriteBorder""></MudCheckBox>
<MudCheckBox @bind-Checked=""@CheckBox2"" Color=""Color.Tertiary"" CheckedIcon=""@Icons.Material.Filled.Bookmark"" UncheckedIcon=""@Icons.Material.Filled.BookmarkBorder""></MudCheckBox>
<MudCheckBox @bind-Checked=""@CheckBox3"" Color=""Color.Warning"" CheckedIcon=""@Icons.Material.Filled.Star"" UncheckedIcon=""@Icons.Material.Filled.StarOutline""></MudCheckBox>



@code {
    public bool CheckBox1 { get; set; } = true;
    public bool CheckBox2 { get; set; } = false;
    public bool CheckBox3 { get; set; } = false;
}";

        public const string CheckboxIndeterminateExample = @"<MudCheckBox @bind-Checked=""value"" Color=""@Color.Primary"">
    Value: @(value == null ? ""null"" : value.ToString())
</MudCheckBox>
<MudButton OnClick=""@(()=>value=null)"">Reset</MudButton>
<MudCheckBox @bind-Checked=""anotherValue"" Color=""@Color.Secondary"" TriState=""true"">Checkbox with TriState. Value: @(anotherValue == null ? ""null"" : anotherValue.ToString())</MudCheckBox>

@code {
    public bool? value { get; set; } = null;
    public bool? anotherValue { get; set;} = null;
}";

        public const string CheckboxKeyboardNavigationExample = @"<MudCheckBox @bind-Checked=""@CheckBox1"" Color=""Color.Primary"" Label=""Basic""></MudCheckBox>
<MudCheckBox @bind-Checked=""@CheckBox2"" Color=""Color.Primary"" Label=""TriState"" TriState=""true""></MudCheckBox>

@code {
    public bool CheckBox1 { get; set; } = true;
    public bool? CheckBox2 { get; set; } = null;
}";

        public const string CheckboxLabelExample = @"<MudCheckBox @bind-Checked=""@Label_CheckBox1"" Label=""Default""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Label_CheckBox2"" Label=""Primary"" Color=""Color.Primary""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Label_CheckBox3"" Label=""Secondary"" LabelPosition=""LabelPosition.Start"" Color=""Color.Secondary""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Label_CheckBox1"" Disabled=""true"" Label=""Disabled"" LabelPosition=""LabelPosition.Start""></MudCheckBox>

@code {
    public bool Label_CheckBox1 { get; set; } = true;
    public bool Label_CheckBox2 { get; set; } = false;
    public bool Label_CheckBox3 { get; set; } = false;
}";

        public const string CheckboxReadOnlyExample = @"<div>
    <MudCheckBox ReadOnly=""@ReadOnly"" @bind-Checked=""@Label_Checkbox1"" Label=""@(ReadOnly ? ""ReadOnly Checkbox 1"" : ""EditMode Checkbox 1"")""/>
    <MudCheckBox ReadOnly=""@ReadOnly"" @bind-Checked=""@Label_Checkbox2"" Label=""@(ReadOnly ? ""ReadOnly Checkbox 2"" : ""EditMode Checkbox 2"")""/>
</div>
<MudSelect  @bind-Value=""@Label_Checkbox1"" Label=""Checkbox 1"">
    <MudSelectItem Value=""@(false)"">False</MudSelectItem>
    <MudSelectItem Value=""@(true)"">True</MudSelectItem>
</MudSelect>
<MudSelect @bind-Value=""@Label_Checkbox2"" Label=""Checkbox 2"">
    <MudSelectItem Value=""@(false)"">False</MudSelectItem>
    <MudSelectItem Value=""@(true)"">True</MudSelectItem>
</MudSelect>

<MudSwitch @bind-Checked=""@ReadOnly"" Label=""@(ReadOnly ? ""ReadOnly Mode"" : ""Edit Mode"")""/>

@code {
    public bool Label_Checkbox1 { get; set; } = true;
    public bool Label_Checkbox2 { get; set; } = false;
    public bool ReadOnly { get; set; } = true;
}";

        public const string CheckboxSizeExample = @"<MudCheckBox @bind-Checked=""@Size_CheckBox1"" Size=""Size.Small"" Color=""Color.Primary""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Size_CheckBox2"" Size=""Size.Medium"" Color=""Color.Secondary""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Size_CheckBox3"" Size=""Size.Large"" Color=""Color.Tertiary""></MudCheckBox>
@code {
    public bool Size_CheckBox1 { get; set; } = true;
    public bool Size_CheckBox2 { get; set; } = false;
    public bool Size_CheckBox3 { get; set; } = false;
}";

        public const string ChipBasicExample = @"<MudChip>Default</MudChip>
<MudChip Color=""Color.Primary"">Primary</MudChip>
<MudChip Color=""Color.Secondary"">Secondary</MudChip>
<MudChip Color=""Color.Info"">Info</MudChip>
<MudChip Color=""Color.Success"">Success</MudChip>
<MudChip Color=""Color.Warning"">Warning</MudChip>
<MudChip Color=""Color.Error"">Error</MudChip>
<MudChip Color=""Color.Dark"">Dark</MudChip>
<MudDivider />
<MudChip Disabled=""true"">Default</MudChip>
<MudChip Disabled=""true"" Color=""Color.Primary"">Primary</MudChip>
<MudChip Disabled=""true"" Color=""Color.Secondary"">Secondary</MudChip>
<MudChip Disabled=""true"" Color=""Color.Info"">Info</MudChip>
<MudChip Disabled=""true"" Color=""Color.Success"">Success</MudChip>
<MudChip Disabled=""true"" Color=""Color.Warning"">Warning</MudChip>
<MudChip Disabled=""true"" Color=""Color.Error"">Error</MudChip>
<MudChip Disabled=""true"" Color=""Color.Dark"">Dark</MudChip>";

        public const string ChipClosableExample = @"<MudChip Color=""Color.Default"" OnClose=""Closed"">Closable</MudChip>
<MudChip Color=""Color.Error"" OnClose=""Closed"">Closable</MudChip>
<MudChip Color=""Color.Primary"" OnClose=""Closed"" CloseIcon=""@Icons.Material.Filled.AlarmAdd"">Closable</MudChip>
<MudChip Color=""Color.Success"" OnClose=""Closed"" CloseIcon=""@Icons.Material.Filled.AlarmOn"">Closable</MudChip>

@code {
    void Closed(MudChip chip) {
        // react to chip closed
    }
}";

        public const string ChipIconExample = @"<MudChip Icon=""@Icons.Material.Filled.Dangerous"" IconColor=""Color.Error"">Extensions</MudChip>
<MudChip Icon=""@Icons.Material.Filled.Extension"" Color=""Color.Dark"">Extensions</MudChip>
<MudChip Icon=""@Icons.Material.Filled.Person"" Color=""Color.Primary"" >Account</MudChip>
<MudChip Icon=""@Icons.Material.Filled.FlightTakeoff"" Color=""Color.Secondary"" >Your flight times</MudChip>
<MudChip Icon=""@Icons.Material.Filled.VerifiedUser"" Color=""Color.Info"">Verified User</MudChip>";

        public const string ChipLabelExample = @"<MudChip Label=""true"">Default</MudChip>
<MudChip Icon=""@Icons.Custom.Brands.MudBlazor"" Label=""true"" Color=""Color.Primary"">MudBlazor</MudChip>
<MudChip Icon=""@Icons.Custom.Brands.Twitter"" Label=""true"" Color=""Color.Info"" OnClose=""CloseChip"">New Tweets</MudChip>
<MudChip Icon=""@Icons.Custom.Uncategorized.Radioactive"" Label=""true"" Color=""Color.Warning"" Style=""color:black;"">Radioactive Areas</MudChip>

@code {
    void CloseChip()
    {
        // Code..
    }
}";

        public const string ChipOutlinedExample = @"<MudChip Variant=""Variant.Outlined"">Default</MudChip>
<MudChip Variant=""Variant.Outlined"" Color=""Color.Primary"">Primary</MudChip>
<MudChip Variant=""Variant.Outlined"" Color=""Color.Secondary"">Secondary</MudChip>
<MudChip Variant=""Variant.Outlined"" Color=""Color.Info"">Info</MudChip>
<MudChip Variant=""Variant.Outlined"" Color=""Color.Success"">Success</MudChip>
<MudChip Variant=""Variant.Outlined"" Color=""Color.Warning"">Warning</MudChip>
<MudChip Variant=""Variant.Outlined"" Color=""Color.Error"">Error</MudChip>
<MudChip Variant=""Variant.Outlined"" Color=""Color.Dark"">Dark</MudChip>
<MudDivider />
<MudChip Disabled=""true"" Variant=""Variant.Outlined"">Default</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Primary"">Primary</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Secondary"">Secondary</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Info"">Info</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Success"">Success</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Warning"">Warning</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Error"">Error</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Dark"">Dark</MudChip>";

        public const string ChipSizeExample = @"<MudChip Size=""Size.Small"">Small</MudChip>
<MudChip Size=""Size.Medium"">Medium</MudChip>
<MudChip Size=""Size.Large"">Large</MudChip>";

        public const string ChipTextExample = @"<MudChip Variant=""Variant.Text"">Default</MudChip>
<MudChip Variant=""Variant.Text"" Color=""Color.Primary"">Primary</MudChip>
<MudChip Variant=""Variant.Text"" Color=""Color.Secondary"">Secondary</MudChip>
<MudChip Variant=""Variant.Text"" Color=""Color.Info"">Info</MudChip>
<MudChip Variant=""Variant.Text"" Color=""Color.Success"">Success</MudChip>
<MudChip Variant=""Variant.Text"" Color=""Color.Warning"">Warning</MudChip>
<MudChip Variant=""Variant.Text"" Color=""Color.Error"">Error</MudChip>
<MudChip Variant=""Variant.Text"" Color=""Color.Dark"">Dark</MudChip>
<MudDivider />
<MudChip Disabled=""true"" Variant=""Variant.Text"">Default</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Primary"">Primary</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Secondary"">Secondary</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Info"">Info</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Success"">Success</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Warning"">Warning</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Error"">Error</MudChip>
<MudChip Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Dark"">Dark</MudChip>";

        public const string ChipSetAddRemoveExample = @"<MudChipSet AllClosable=""true"" OnClose=""Closed"">
    @foreach (var value in values)
    {
        <MudChip Text=""@value""></MudChip>
    }
</MudChipSet>

Add chips <MudIconButton Icon=""@Icons.Material.Filled.Add"" OnClick=""Add""></MudIconButton>





@code
{
    int i = 1;
    List<string> values = new List<string>();
    public void Add() => values.Add(""Value "" + (i++));
    public void Closed(MudChip chip) => values.Remove(chip.Text);
}";

        public const string ChipSetBasicExample = @"<MudChipSet @bind-SelectedChip=""selected"" Filter=""true"" Mandatory=""@mandatory"">
    <MudChip Text=""grey"">Default</MudChip>
    <MudChip Text=""purple"" Color=""Color.Primary"">Primary</MudChip>
    <MudChip Text=""pink"" Color=""Color.Secondary"">Secondary</MudChip>
    <MudChip Text=""blue"" Color=""Color.Info"">Info</MudChip>
    <MudChip Text=""green"" Color=""Color.Success"">Success</MudChip>
    <MudChip Text=""orange"" Color=""Color.Warning"">Warning</MudChip>
    <MudChip Text=""red"" Color=""Color.Error"">Error</MudChip>
    <MudChip Text=""black"" Color=""Color.Dark"">Dark</MudChip>
</MudChipSet>

<div class=""d-flex flex-column align-center"">
    @if (selected != null)
    {
        <MudText>You selected the <MudText Color=""@selected.Color"" Inline=""true"">@selected.Text</MudText> chip.</MudText>
    }
    <MudCheckBox @bind-Checked=""mandatory"">Mandatory</MudCheckBox>
</div>

@code
{
    bool mandatory = true;
    MudChip selected;
}";

        public const string ChipSetDefaultChipsExample = @"<MudChipSet @bind-SelectedChips=""selected"" MultiSelection=""true"" Filter=""true"">
    <MudChip Text=""Milk"" Default=""true""></MudChip>
    <MudChip Text=""Eggs""></MudChip>
    <MudChip Text=""Soap""></MudChip>
    <MudChip Text=""Cornflakes"" Default=""true""></MudChip>
    <MudChip Text=""Salad""></MudChip>
    <MudChip Text=""Apples""></MudChip>
    <MudChip Text=""Red wine""></MudChip>
</MudChipSet>

<div class=""d-flex justify-center"">
    @if (selected != null && selected.Length>0)
    {
        <MudText>You selected @string.Join("", "", selected.Select(chip=>chip.Text)).</MudText>
    }
    else
    {
        <MudText>Nothing selected.</MudText>
    }
</div>

@code
{
    MudChip[] selected;
}";

        public const string ChipSetMultiselectionExample = @"<MudChipSet @bind-SelectedChips=""selected"" MultiSelection=""true"" Filter=""filter"">
    <MudChip Text=""Milk""></MudChip>
    <MudChip Text=""Eggs""></MudChip>
    <MudChip Text=""Soap""></MudChip>
    <MudChip Text=""Cornflakes""></MudChip>
    <MudChip Text=""Salad""></MudChip>
    <MudChip Text=""Apples""></MudChip>
    <MudChip Text=""Red wine""></MudChip>
</MudChipSet>

<div class=""d-flex flex-column align-center"">
    @if (selected != null && selected.Length>0)
    {
        <MudText>You selected @string.Join("", "", selected.Select(chip=>chip.Text)).</MudText>
    }
    else
    {
        <MudText>Nothing selected.</MudText>
    }
    <MudCheckBox @bind-Checked=""filter"">Filter</MudCheckBox>
</div>

@code
{
    bool filter = true;
    MudChip[] selected;
}";

        public const string ChipSetSelectedColorExample = @"<MudChipSet MultiSelection=""true"" Filter=""filter"">
    <MudChip Text=""Brunsås"" Variant=""Variant.Text"" Color=""Color.Default"" SelectedColor=""Color.Primary""></MudChip>
    <MudChip Text=""Eggs"" Variant=""Variant.Text"" Color=""Color.Primary"" SelectedColor=""Color.Secondary""></MudChip>
    <MudChip Text=""Cornflakes"" Variant=""Variant.Text"" Color=""Color.Dark"" SelectedColor=""Color.Warning""></MudChip>
    <MudChip Text=""Salad"" Variant=""Variant.Text"" Color=""Color.Info"" SelectedColor=""Color.Error""></MudChip>
    <MudChip Text=""Apples"" Variant=""Variant.Text"" Color=""Color.Success"" SelectedColor=""Color.Error""></MudChip>
</MudChipSet>
<MudChipSet MultiSelection=""true"" Filter=""filter"">
    <MudChip Text=""Brunsås"" Variant=""Variant.Outlined"" Color=""Color.Default"" SelectedColor=""Color.Primary""></MudChip>
    <MudChip Text=""Eggs"" Variant=""Variant.Outlined"" Color=""Color.Primary"" SelectedColor=""Color.Secondary""></MudChip>
    <MudChip Text=""Cornflakes"" Variant=""Variant.Outlined"" Color=""Color.Dark"" SelectedColor=""Color.Warning""></MudChip>
    <MudChip Text=""Salad"" Variant=""Variant.Outlined"" Color=""Color.Info"" SelectedColor=""Color.Error""></MudChip>
    <MudChip Text=""Apples"" Variant=""Variant.Outlined"" Color=""Color.Success"" SelectedColor=""Color.Error""></MudChip>
</MudChipSet>
<MudChipSet MultiSelection=""true"" Filter=""filter"">
    <MudChip Text=""Brunsås"" Variant=""Variant.Filled"" Color=""Color.Default"" SelectedColor=""Color.Primary""></MudChip>
    <MudChip Text=""Eggs"" Variant=""Variant.Filled"" Color=""Color.Primary"" SelectedColor=""Color.Secondary""></MudChip>
    <MudChip Text=""Cornflakes"" Variant=""Variant.Filled"" Color=""Color.Dark"" SelectedColor=""Color.Warning""></MudChip>
    <MudChip Text=""Salad"" Variant=""Variant.Filled"" Color=""Color.Info"" SelectedColor=""Color.Error""></MudChip>
    <MudChip Text=""Apples"" Variant=""Variant.Filled"" Color=""Color.Success"" SelectedColor=""Color.Error""></MudChip>
</MudChipSet>
<MudCheckBox @bind-Checked=""filter"">Filter</MudCheckBox>


@code
{
    bool filter = true;
}";

        public const string ChipSetVariantsExample = @"<MudChipSet MultiSelection=""true"" Filter=""filter"">
    <MudChip Text=""grey"" Variant=""Variant.Text"" Color=""Color.Default"">Default</MudChip>
    <MudChip Text=""purple"" Variant=""Variant.Text"" Color=""Color.Primary"">Primary</MudChip>
    <MudChip Text=""pink"" Variant=""Variant.Text"" Color=""Color.Secondary"">Secondary</MudChip>
    <MudChip Text=""blue"" Variant=""Variant.Text"" Color=""Color.Info"">Info</MudChip>
    <MudChip Text=""green"" Variant=""Variant.Text"" Color=""Color.Success"">Success</MudChip>
    <MudChip Text=""orange"" Variant=""Variant.Text"" Color=""Color.Warning"">Warning</MudChip>
    <MudChip Text=""red"" Variant=""Variant.Text"" Color=""Color.Error"">Error</MudChip>
    <MudChip Text=""black"" Variant=""Variant.Text"" Color=""Color.Dark"">Dark</MudChip>
</MudChipSet>
<MudChipSet MultiSelection=""true"" Filter=""filter"">
    <MudChip Text=""grey"" Variant=""Variant.Outlined"" Color=""Color.Default"">Default</MudChip>
    <MudChip Text=""purple"" Variant=""Variant.Outlined"" Color=""Color.Primary"">Primary</MudChip>
    <MudChip Text=""pink"" Variant=""Variant.Outlined"" Color=""Color.Secondary"">Secondary</MudChip>
    <MudChip Text=""blue"" Variant=""Variant.Outlined"" Color=""Color.Info"">Info</MudChip>
    <MudChip Text=""green"" Variant=""Variant.Outlined"" Color=""Color.Success"">Success</MudChip>
    <MudChip Text=""orange"" Variant=""Variant.Outlined"" Color=""Color.Warning"">Warning</MudChip>
    <MudChip Text=""red"" Variant=""Variant.Outlined"" Color=""Color.Error"">Error</MudChip>
    <MudChip Text=""black"" Variant=""Variant.Outlined"" Color=""Color.Dark"">Dark</MudChip>
</MudChipSet>
<MudChipSet MultiSelection=""true"" Filter=""filter"">
    <MudChip Text=""grey"" Variant=""Variant.Filled"" Color=""Color.Default"">Default</MudChip>
    <MudChip Text=""purple"" Variant=""Variant.Filled"" Color=""Color.Primary"">Primary</MudChip>
    <MudChip Text=""pink"" Variant=""Variant.Filled"" Color=""Color.Secondary"">Secondary</MudChip>
    <MudChip Text=""blue"" Variant=""Variant.Filled"" Color=""Color.Info"">Info</MudChip>
    <MudChip Text=""green"" Variant=""Variant.Filled"" Color=""Color.Success"">Success</MudChip>
    <MudChip Text=""orange"" Variant=""Variant.Filled"" Color=""Color.Warning"">Warning</MudChip>
    <MudChip Text=""red"" Variant=""Variant.Filled"" Color=""Color.Error"">Error</MudChip>
    <MudChip Text=""black"" Variant=""Variant.Filled"" Color=""Color.Dark"">Dark</MudChip>
</MudChipSet>
<MudCheckBox @bind-Checked=""filter"">Filter</MudCheckBox>


@code
{
    bool filter = true;
}";

        public const string ColorPickerAlphaExample = @"<MudColorPicker Label=""Disabled Alpha"" DisableAlpha=""true"" />";

        public const string ColorPickerBasicExample = @"<MudColorPicker Label=""Basic Color Picker"" @bind-Text=""_colorValue"" Style=""@($""color: {_colorValue};"")"" Placeholder=""Select Color"" />

@code {
    private string _colorValue;
}";

        public const string ColorPickerColorModeExample = @"<MudColorPicker Label=""HSL"" ColorPickerMode=""ColorPickerMode.HSL"" DisableModeSwitch=""true"" />";

        public const string ColorPickerDialogExample = @"<MudColorPicker DisableToolbar=""false"" Label=""Dialog Picker"" PickerVariant=""PickerVariant.Dialog"" />";

        public const string ColorPickerDragEffectDisabledExample = @"<MudColorPicker DisableDragEffect=""true"" PickerVariant=""PickerVariant.Static"" />";

        public const string ColorPickerElevationExample = @"<MudColorPicker PickerVariant=""PickerVariant.Static"" Rounded=""true"" Elevation=""1""/>
<MudColorPicker PickerVariant=""PickerVariant.Static"" Rounded=""true"" Elevation=""12"" />";

        public const string ColorPickerExampleUsageExample = @"@using MudBlazor.Utilities


<MudPaper Elevation=""0"" Class=""mud-width-full mud-height-full d-flex justify-center align-end pb-8"" MinHeight=""600px"" Style=""@($""background-image:linear-gradient({degrees}deg, {_gradientPrimary.ToString(MudColorOutputFormats.RGBA)} 0%, {_gradientSecondary.ToString(MudColorOutputFormats.RGBA)} 100%);"")"">
    <MudPaper Class=""d-flex"">
        <MudColorPicker Rounded=""true"" Class=""rounded-tr-0"" PickerVariant=""PickerVariant.Static"" DisableModeSwitch=""true"" Value=""_pickerColor"" ValueChanged=""UpdateSelectedColor"" />
        <div class=""pa-2"">
            <MudText Typo=""Typo.h6"" Class=""mx-1"">Gradient Colors</MudText>

            <MudList Clickable=""true"" SelectedItemChanged=""ChangeSelectedColor"">
                <MudListItem Text=""1"">
                    <div class=""mud-width-full rounded py-4"" style=""@($""background-color:{_gradientPrimary};"")""></div>
                </MudListItem>
                <MudListItem Text=""2"">
                    <div class=""mud-width-full rounded py-4"" style=""@($""background-color:{_gradientSecondary};"")""></div>
                </MudListItem>
            </MudList>
            <MudSlider Min=""0"" Max=""360"" Step=""1"" @bind-Value=""@degrees"" Class=""px-2"">Degrees</MudSlider>
        </div>
    </MudPaper>
</MudPaper>


@code {
    public MudColor _gradientPrimary = ""#594AE2"";
    public MudColor _gradientSecondary = ""#FF4081"";
    public MudColor _pickerColor = ""#594AE2"";

    int degrees = 90;

    bool _isFirstColor = true;

    public void ChangeSelectedColor(MudListItem item)
    {
        if (item.Text == ""1"")
        {
            _isFirstColor = true;
            _pickerColor = _gradientPrimary;
            UpdateSelectedColor(_gradientPrimary);
        }
        else if (item.Text == ""2"")
        {
            _isFirstColor = false;
            _pickerColor = _gradientSecondary;
            UpdateSelectedColor(_gradientSecondary);
        }
    }

    public void UpdateSelectedColor(MudColor value)
    {
        _pickerColor = value;

        if (_isFirstColor)
        {
            _gradientPrimary = value;
        }
        else
        {
            _gradientSecondary = value;
        }
    }
}";

        public const string ColorPickerInlineExample = @"<MudColorPicker DisableToolbar=""false"" Label=""Dialog Picker"" PickerVariant=""PickerVariant.Inline"" />";

        public const string ColorPickerPaletteExample = @"@using MudBlazor.Utilities

<MudColorPicker PickerVariant=""PickerVariant.Static"" ColorPickerView=""ColorPickerView.Palette"" Palette=""CustomPalette"" />

@code {
    public IEnumerable<MudColor> CustomPalette { get; set; } = new MudColor[]
    {
        ""#F44336"", ""#E91E63"", ""#9C27B0"", ""#673AB7"", ""#3F51B5"",
        ""#FFEBEE"", ""#FCE4EC"", ""#F3E5F5"", ""#EDE7F6"", ""#E8EAF6"",
        ""#FFCDD2"", ""#F8BBD0"", ""#E1BEE7"", ""#D1C4E9"", ""#C5CAE9"",
        ""#EF9A9A"", ""#F48FB1"", ""#CE93D8"", ""#B39DDB"", ""#9FA8DA"",
        ""#E57373"", ""#F06292"", ""#BA68C8"", ""#9575CD"", ""#7986CB"",
        ""#EF5350"", ""#EC407A"", ""#AB47BC"", ""#7E57C2"", ""#5C6BC0"",
        ""#E53935"", ""#D81B60"", ""#8E24AA"", ""#5E35B1"", ""#3949AB""
    };
}";

        public const string ColorPickerPlaygroundExample = @"<MudGrid>
    <MudItem md=""8"" Class=""d-flex justify-center"">
        <MudColorPicker DisableToolbar=""DisableToolbar"" DisableAlpha=""DisableAlpha"" DisableColorField=""DisableColorField"" DisablePreview=""DisablePreview"" DisableSliders=""DisableSliders"" DisableInputs=""DisableInputs"" DisableModeSwitch=""DisableModeSwitch"" ColorPickerMode=""ColorPickerMode"" PickerVariant=""PickerVariant.Static"" />
    </MudItem>
    <MudItem md=""4"">
        <MudPaper Height=""400px"" Class=""px-4 pt-2 pb-4"">
            <MudText Typo=""Typo.h6"">Options</MudText>
            <MudCheckBox @bind-Checked=""@DisableToolbar"" Label=""Disable Toolbar"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Checked=""@DisableAlpha"" Label=""Disable Alpha"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Checked=""@DisableColorField"" Label=""Disable Color Field"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Checked=""@DisablePreview"" Label=""Disable Preview"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Checked=""@DisableSliders"" Label=""Disable Sliders"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Checked=""@DisableInputs"" Label=""Disable Inputs"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Checked=""@DisableModeSwitch"" Label=""Disable Mode Switch"" Color=""Color.Primary"" Dense=""true"" />
            <MudSelect Label=""Color Picker Mode"" Variant=""Variant.Outlined"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""ColorPickerMode"" Class=""mt-4"">
                <MudSelectItem T=""ColorPickerMode"" Value=""ColorPickerMode.RGB"">RGB</MudSelectItem>
                <MudSelectItem T=""ColorPickerMode"" Value=""ColorPickerMode.HSL"">HSL</MudSelectItem>
                <MudSelectItem T=""ColorPickerMode"" Value=""ColorPickerMode.HEX"">HEX</MudSelectItem>
            </MudSelect>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public bool DisableToolbar { get; set; } = true;
    public bool DisableAlpha { get; set; }
    public bool DisableColorField { get; set; }
    public bool DisablePreview { get; set; }
    public bool DisableSliders { get; set; }
    public bool DisableInputs { get; set; }
    public bool DisableModeSwitch { get; set; }

    public ColorPickerMode ColorPickerMode { get; set; }
}";

        public const string ColorPickerStaticExample = @"<MudColorPicker PickerVariant=""PickerVariant.Static"" />";

        public const string ColorPickerSwitchModeExample = @"<MudColorPicker Label=""Switch Disabled"" DisableModeSwitch=""true"" />";

        public const string ColorPickerViewModeExample = @"<MudColorPicker Label=""Spectrum"" ColorPickerView=""ColorPickerView.Spectrum"" />
<MudColorPicker Label=""Palette"" ColorPickerView=""ColorPickerView.Palette"" />
<MudColorPicker Label=""Grid"" ColorPickerView=""ColorPickerView.Grid"" />
<MudColorPicker Label=""Compact Grid"" ColorPickerView=""ColorPickerView.GridCompact"" />";

        public const string ContainedFixedExample = @"<MudPaper Height=""400px"" Width=""100%"">
    <MudContainer Fixed=""true"">
        <MudPaper Height=""400px"" Width=""100%"" Square=""true"" Class=""mud-theme-primary""></MudPaper>
    </MudContainer>
</MudPaper>";

        public const string ContainerFluidExample = @"<MudPaper Height=""400px"" Width=""100%"">
    <MudContainer MaxWidth=""MaxWidth.Small"">
        <MudPaper Height=""400px"" Width=""100%"" Square=""true"" Class=""mud-theme-primary""></MudPaper>
    </MudContainer>
</MudPaper>";

        public const string DataGridAdvancedExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" MultiSelection=""true"" Items=""@Elements"" SortMode=""SortMode.Multiple"" Filterable=""true"" QuickFilter=""@_quickFilter""
    Hideable=""true"" RowClick=""@RowClicked"" SelectedItemsChanged=""@SelectedItemsChanged"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value=""_searchString"" Placeholder=""Search"" Adornment=""Adornment.Start"" Immediate=""true""
            AdornmentIcon=""@Icons.Material.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T=""Element"" />
        <SelectColumn T=""Element"" />
        <Column T=""Element"" Field=""Number"" Title=""Nr"" Sortable=""false"" Filterable=""false"" />
        <Column T=""Element"" Field=""Sign"" />
        <Column T=""Element"" Field=""Name"" SortBy=""@_sortBy"" />
        <Column T=""Element"" Field=""Position"" />
        <Column T=""Element"" Field=""Molar"" Title=""Molar mass"" />
        <Column T=""Element"" Field=""Group"" Title=""Category"" />
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo=""Typo.h6"">@context.Item.Name</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>This element is number @context.Item.Number</MudText>
                <MudText>This element has a molar mass of @context.Item.Molar</MudText>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Checked=""@_sortNameByLength"" Color=""Color.Primary"">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style=""flex:1"">
    <MudExpansionPanel Text=""Show Events"">
        @foreach (var message in _events)
        {
            <MudText Typo=""@Typo.body2"">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class=""d-flex"">
                <MudSpacer/>
                <MudButton Class=""mt-3"" ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" OnClick=""@(() => _events.Clear())"">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<Element, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<Element, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Sign.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($""{x.Number} {x.Position} {x.Molar}"".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<Element> args)
    {
        _events.Insert(0, $""Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}"");
    }

    void SelectedItemsChanged(HashSet<Element> items)
    {
        _events.Insert(0, $""Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}"");
    }
}";

        public const string DataGridAdvancedFilteringExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" Items=""@Elements"" Filterable=""true"" FilterMode=""@DataGridFilterMode.ColumnFilterRow"">
    <Columns>
        <Column T=""Element"" Field=""Number"" Title=""Nr"" Filterable=""false"" />
        <Column T=""Element"" Field=""Sign"">
            <FilterTemplate>
                <MudIconButton OnClick=""@OpenFilter"" Icon=""@_icon"" Size=""@Size.Small"" />
                <MudOverlay Visible=""@_filterOpen"" OnClick=""@(() => _filterOpen = false)"" />
                <MudPopover Open=""@_filterOpen"" AnchorOrigin=""Origin.BottomCenter"" TransformOrigin=""Origin.TopCenter""
                    Style=""width:150px"">
		           <MudStack Spacing=""0"">
                       <MudCheckBox T=""bool"" Label=""Select All"" Size=""@Size.Small"" Checked=""@_selectAll"" CheckedChanged=""@SelectAll"" />
                       <MudStack Spacing=""0"" Style=""overflow-y:auto;max-height:250px"">
                           @foreach (var item in context.Items)
                           {
                               <MudCheckBox T=""bool"" Label=""@($""{item.Sign}"")"" Size=""@Size.Small"" Checked=""@(_selectedItems.Contains(item))""
                                   CheckedChanged=""@((value) => SelectedChanged(value, item))"" />
                           }
                       </MudStack>
                       <MudStack Row=""true"">
                            <MudButton OnClick=""@(() => ClearFilter(context))"">Clear</MudButton>
                            <MudButton Color=""@Color.Primary"" OnClick=""@(() => ApplyFilter(context))"">Filter</MudButton>
                       </MudStack>
                   </MudStack>
	            </MudPopover>
            </FilterTemplate>
        </Column>
        <Column T=""Element"" Field=""Name"" />
        <Column T=""Element"" Field=""Position"" />
        <Column T=""Element"" Field=""Molar"" Title=""Molar mass"" />
        <Column T=""Element"" Field=""Group"" Title=""Category"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

@code {
    IEnumerable<Element> Elements = new List<Element>();
    HashSet<Element> _selectedItems = new();
    HashSet<Element> _filterItems = new();
    FilterDefinition<Element> _filterDefinition;
    bool _selectAll = true;
    string _icon = Icons.Outlined.FilterAlt;

    bool _filterOpen = false;

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
        _selectedItems = Elements.ToHashSet();
        _filterItems = Elements.ToHashSet();
        _filterDefinition = new FilterDefinition<Element>
        {
            FilterFunction = x => _filterItems.Contains(x)
        };
    }

    void OpenFilter()
    {
        _filterOpen = true;
    }

    void SelectedChanged(bool value, Element item)
    {
        if (value)
            _selectedItems.Add(item);
        else
            _selectedItems.Remove(item);

        if (_selectedItems.Count == Elements.Count())
            _selectAll = true;
        else
            _selectAll = false;
    }

    void ClearFilter(FilterContext<Element> context)
    {
        _selectedItems = Elements.ToHashSet();
        _filterItems = Elements.ToHashSet();
        _icon = Icons.Outlined.FilterAlt;
        context.Actions.ClearFilter(_filterDefinition);
        _filterOpen = false;
    }

    void ApplyFilter(FilterContext<Element> context)
    {
        _filterItems = _selectedItems.ToHashSet();
        _icon = _filterItems.Count == Elements.Count() ? Icons.Outlined.FilterAlt : Icons.Filled.FilterAlt;
        context.Actions.ApplyFilter(_filterDefinition);
        _filterOpen = false;
    }

    void SelectAll(bool value)
    {
        _selectAll = value;

        if (value)
        {
            _selectedItems = Elements.ToHashSet();
        }
        else
        {
            _selectedItems.Clear();
        }
    }
}";

        public const string DataGridAdvancedIDictionaryExample = @"@using System.Text.Json
@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""IDictionary<string, object>"" MultiSelection=""true"" Items=""@Elements"" Sortable=""true"" Filterable=""true"" QuickFilter=""@_quickFilter""
    Hideable=""true"" RowClick=""@RowClicked"" SelectedItemsChanged=""@SelectedItemsChanged"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value=""_searchString"" Placeholder=""Search"" Adornment=""Adornment.Start"" Immediate=""true""
            AdornmentIcon=""@Icons.Material.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T=""IDictionary<string, object>"" />
        <Column T=""IDictionary<string, object>"" FieldType=""@typeof(int)"" Field=""Number"" Title=""Nr"" Sortable=""false"" Filterable=""false"" />
        <Column T=""IDictionary<string, object>"" FieldType=""@typeof(string)"" Field=""small"" Title=""Sign"" />
        <Column T=""IDictionary<string, object>"" FieldType=""@typeof(string)"" Field=""Name"" SortBy=""@_sortBy"" />
        <Column T=""IDictionary<string, object>"" FieldType=""@typeof(int)"" Field=""Position"" />
        <Column T=""IDictionary<string, object>"" FieldType=""@typeof(decimal)"" Field=""Molar"" Title=""Molar mass"" />
        <Column T=""IDictionary<string, object>"" FieldType=""@typeof(string)"" Field=""Group"" Title=""Category"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""IDictionary<string, object>"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Checked=""@_sortNameByLength"" Color=""Color.Primary"">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style=""flex:1"">
    <MudExpansionPanel Text=""Show Events"">
        @foreach (var message in _events)
        {
            <MudText Typo=""@Typo.body2"">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class=""d-flex"">
                <MudSpacer/>
                <MudButton Class=""mt-3"" ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" OnClick=""@(() => _events.Clear())"">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<IDictionary<string, object>> Elements = new List<IDictionary<string, object>>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<IDictionary<string, object>, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x[""Name""].ToString().Length;
        else
            return x[""Name""].ToString();
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<IDictionary<string, object>, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x[""small""].ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x[""Name""].ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($""{x[""Number""]} {x[""Position""]} {x[""Molar""]}"".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        var elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
        var serialized = JsonSerializer.Serialize(elements);
        Elements = JsonSerializer.Deserialize<List<IDictionary<string, object>>>(serialized);
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<IDictionary<string, object>> args)
    {
        _events.Insert(0, $""Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}"");
    }

    void SelectedItemsChanged(HashSet<IDictionary<string, object>> items)
    {
        _events.Insert(0, $""Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}"");
    }
}";

        public const string DataGridAggregationExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid Items=""@_items"" Groupable=""true"" Filterable=""true"">
    <Columns>
        <Column T=""Model"" Field=""@nameof(Model.Name)"">
            <FooterTemplate>
                @{ int index = 1, count = @context.Items.Count(); }
                People: 
                @foreach (var person in @context.Items)
                {
                    <MudAvatar Color=""@((Color)index)"" Variant=""Variant.Outlined"" Size=""Size.Small"" Class=""mr-1"">@person.Name.First()</MudAvatar>@person.Name.Substring(1)
                    if (index < count)
                    {
                        @("", "")
                    }
                    index++;
                }
            </FooterTemplate>
        </Column>
        <Column T=""Model"" Field=""@nameof(Model.Age)"" AggregateDefinition=""_ageAggregation"" />
        <Column T=""Model"" Field=""@nameof(Model.Status)"" ></Column>
        <Column T=""Model"" Field=""@nameof(Model.Salary)"" AggregateDefinition=""_salaryAggregation"" />
        <Column T=""Model"" Field=""HireDate"" Title=""Hired"">
            <CellTemplate>
                @context.Item.HireDate.ToString(""d"")
            </CellTemplate>
        </Column>
        <Column T=""Model"" Field=""IsManager"" Title=""Manager"" />
    </Columns>
</MudDataGrid>

@code { 
    public record Model (string Name, int Age, Severity Status, decimal Salary, DateTime HireDate, bool IsManager);

    IEnumerable<Model> _items = new List<Model>()
    {
        new Model(""Sam"", 56, Severity.Normal, 50_000.00M, new DateTime(2005, 3, 5), false), 
        new Model(""Alicia"", 54, Severity.Info, 75_000.00M, new DateTime(2010, 1, 17), false), 
        new Model(""Ira"", 27, Severity.Success, 102_000.00M, new DateTime(2017, 6, 15), true),
        new Model(""John"", 32, Severity.Warning, 132_000.00M, new DateTime(2021, 12, 23), true),
        new Model(""Fred"", 65, Severity.Warning, 87_000.00M, new DateTime(2003, 7, 3), false), 
        new Model(""Tabitha"", 33, Severity.Info, 157_000.00M, new DateTime(2015, 2, 12), true), 
        new Model(""Hunter"", 22, Severity.Success, 43_000.00M, new DateTime(2017, 9, 20), false),
        new Model(""Esme"", 55, Severity.Warning, 149_000.00M, new DateTime(2017, 8, 1), true)
    };

    AggregateDefinition<Model> _ageAggregation = new AggregateDefinition<Model>
    {
        Type = AggregateType.Avg,
        DisplayFormat = ""Average age is {value}""
    };

    AggregateDefinition<Model> _salaryAggregation = new AggregateDefinition<Model>
    {
        Type = AggregateType.Custom,
        CustomAggregate = x =>
        {
            var highestSalary = x.Max(z => z.Salary);
            var countOver100Grand = x.Count(z => z.Salary > 100_000);
            return $""Highest: {highestSalary.ToString(""C0"")} | {countOver100Grand} Over {100000:C0}"";
        }
    };
}";

        public const string DataGridBasicExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid Items=""@Elements.Take(4)"">
    <Columns>
        <Column T=""Element"" Field=""Number"" Title=""Nr"" />
        <Column T=""Element"" Field=""Sign"" />
        <Column T=""Element"" Field=""Name"" />
        <Column T=""Element"" Field=""Position"" />
        <Column T=""Element"" Field=""Molar"" Title=""Molar mass"" />
    </Columns>
</MudDataGrid>

@code { 
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DataGridColumnCultureExample = @"@using System.Globalization

<MudDataGrid Items=""@_items"" Filterable=""true"">
    <Columns>
        <Column T=""Model"" Field=""@nameof(Model.Name)"" />
        <Column T=""Model"" Field=""@nameof(Model.Age)"" />
        <Column T=""Model""
            Field=""@nameof(Model.Amount)""
            Title=""Amount (es-ES culture)""
            Culture=""@(new CultureInfo(""es-ES""))"" />
        <Column T=""Model""
            Field=""@nameof(Model.Total)""
            Title=""Total (invariant culture)""
            Culture=""@CultureInfo.InvariantCulture"" />
    </Columns>
</MudDataGrid>

@code {
    private IEnumerable<Model> _items = new List<Model>()
    {
        new Model(""Sam"", 56, 2.3, 3.2), 
        new Model(""Alicia"", 54, 4.5, 4.9), 
        new Model(""Ira"", 27, 2.1, 2.5),
        new Model(""John"", 32, 5.9, 6.1)
    };

    public record Model(string Name, int? Age, double? Amount, double? Total);
}";

        public const string DataGridEditingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" Items=""@Elements.Take(4)"" ReadOnly=""@_readOnly"" EditMode=""@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)""
    StartedEditingItem=""@StartedEditingItem"" CancelledEditingItem=""@CancelledEditingItem"" CommittedItemChanges=""@CommittedItemChanges""
    Bordered=""true"" Dense=""true"" EditTrigger=""@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"">
    <Columns>
        <Column T=""Element"" Field=""Number"" Title=""Nr"" IsEditable=""false"" />
        <Column T=""Element"" Field=""Sign"" />
        <Column T=""Element"" Field=""Name"" />
        <Column T=""Element"" Field=""Position"">
            <EditTemplate>
                <MudSelect @bind-Value=""context.Item.Position"" Required RequiredError=""You must select a Position!!!"" Margin=""@Margin.Dense"">
                    <MudSelectItem Value=""0"">zero</MudSelectItem>
                    <MudSelectItem Value=""1"">one</MudSelectItem>
                    <MudSelectItem Value=""17"">seventeen</MudSelectItem>
                </MudSelect>
            </EditTemplate>
        </Column>
        <Column T=""Element"" Field=""Molar"" Title=""Molar mass"" />
        <Column T=""Element"" Hidden=""@(_isCellEditMode || _readOnly || _editTriggerRowClick)"" CellClass=""d-flex justify-end"">
            <CellTemplate>
                <MudIconButton Size=""@Size.Small"" Icon=""@Icons.Outlined.Edit"" OnClick=""@context.Actions.StartEditingItem"" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Checked=""@_readOnly"" Color=""Color.Primary"">Read Only</MudSwitch>
    <div class=""d-flex justify-start align-center"">
        <p class=""mud-typography mud-typography-body1 mud-inherit-text mr-2"">Form</p>
        <MudSwitch @bind-Checked=""@_isCellEditMode"">Cell</MudSwitch>
    </div>
    <div class=""d-flex justify-start align-center"">
        <p class=""mud-typography mud-typography-body1 mud-inherit-text mr-2"">Manual</p>
        <MudSwitch @bind-Checked=""@_editTriggerRowClick"">On Row Click</MudSwitch>
    </div>
</div>

<MudExpansionPanels Style=""flex:1"">
    <MudExpansionPanel Text=""Show Events"">
        @foreach (var message in _events)
        {
            <MudText Typo=""@Typo.body2"">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class=""d-flex"">
                <MudSpacer/>
                <MudButton Class=""mt-3"" ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" OnClick=""@(() => _events.Clear())"">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    // events
    void StartedEditingItem(Element item)
    {
        _events.Insert(0, $""Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}"");
    }

    void CancelledEditingItem(Element item)
    {
        _events.Insert(0, $""Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}"");
    }

    void CommittedItemChanges(Element item)
    {
        _events.Insert(0, $""Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}"");
    }
}";

        public const string DataGridFilteringExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" Items=""@Elements"" Filterable=""true"" FilterMode=""@_filterMode"" FilterCaseSensitivity=""@_caseSensitivity"">
    <Columns>
        <Column T=""Element"" Field=""Number"" Title=""Nr"" Filterable=""false"" />
        <Column T=""Element"" Field=""Sign"" />
        <Column T=""Element"" Field=""Name"" />
        <Column T=""Element"" Field=""Position"" />
        <Column T=""Element"" Field=""Molar"" Title=""Molar mass"" />
        <Column T=""Element"" Field=""Group"" Title=""Category"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudRadioGroup T=""DataGridFilterMode"" @bind-SelectedOption=""@_filterMode"">
        <MudRadio Dense=""true"" Option=""@DataGridFilterMode.Simple"" Color=""Color.Primary"">Simple</MudRadio>
        <MudRadio Dense=""true"" Option=""@DataGridFilterMode.ColumnFilterMenu"" Color=""Color.Tertiary"">Column Menu</MudRadio>
        <MudRadio Dense=""true"" Option=""@DataGridFilterMode.ColumnFilterRow"">Column Row</MudRadio>
    </MudRadioGroup>
</div>

<div class=""d-flex flex-wrap mt-4"">
    <MudRadioGroup T=""DataGridFilterCaseSensitivity"" @bind-SelectedOption=""@_caseSensitivity"">
        <MudRadio Dense=""true"" Option=""@DataGridFilterCaseSensitivity.Default"" Color=""Color.Primary"">Default Case Sensitivity</MudRadio>
        <MudRadio Dense=""true"" Option=""@DataGridFilterCaseSensitivity.CaseInsensitive"" Color=""Color.Tertiary"">Case Insensitive</MudRadio>
    </MudRadioGroup>
</div>


@code {
    IEnumerable<Element> Elements = new List<Element>();
    DataGridFilterMode _filterMode = DataGridFilterMode.Simple;
    DataGridFilterCaseSensitivity _caseSensitivity = DataGridFilterCaseSensitivity.Default;

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DataGridGroupingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid @ref=""dataGrid"" MultiSelection=""true"" Items=""@Elements"" Sortable=""true"" Filterable=""true""
    Hideable=""true"" Groupable=""true"" GroupExpanded=""false"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
    </ToolBarContent>
    <Columns>
        <Column T=""Element"" Field=""Number"" Title=""Nr"" Filterable=""false"" Groupable=""false"" />
        <Column T=""Element"" Field=""Sign"" />
        <Column T=""Element"" Field=""Name"" />
        <Column T=""Element"" Field=""Position"" />
        <Column T=""Element"" Field=""Molar"" Title=""Molar mass"" />
        <Column T=""Element"" Field=""Group"" Title=""Category"" Grouping=""true"" GroupBy=""@_groupBy"">
            <GroupTemplate>
                @if (_customizeGroupTemplate)
                {
                    <span style=""font-weight:bold"">Group: @context.Grouping.Key <MudChip Variant=""Variant.Outlined"" Color=""Color.Primary"" Size=""Size.Small"">total @context.Grouping.Count()</MudChip></span>
                }
                else
                {
                    <span style=""font-weight:bold"">Category: @context.Grouping.Key</span>
                }
            </GroupTemplate>
        </Column>
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Checked=""_customizeGroupTemplate"" Color=""@Color.Primary"">Customize Group Template</MudSwitch>
    <MudSwitch T=""bool"" Checked=""@_customizeGroupBy"" Color=""@Color.Primary"" CheckedChanged=""@CustomizeByGroupChanged"">Customize Group By</MudSwitch>
    <MudButton OnClick=""@ExpandAllGroups"" Color=""@Color.Primary"">Expand All</MudButton>
    <MudButton OnClick=""@CollapseAllGroups"" Color=""@Color.Primary"">Collapse All</MudButton>
</div>

@code {
    IEnumerable<Element> Elements = new List<Element>();
    MudDataGrid<Element> dataGrid;
    bool _customizeGroupTemplate;
    static bool _customizeGroupBy;
    static string[] _nonmetals = new string[] { ""H"", ""He"",""N"", ""O"", ""F"", ""Ne"", ""Cl"", ""Ar"", ""Kr"", ""Xe"", ""Rn"", ""Br"", ""C"", ""P"", ""Se"", ""Se"", ""I"" };
    Func<Element, object> _groupBy = x => 
    {
        if (_customizeGroupBy)
        {
            if (_nonmetals.Contains(x.Sign))
                return ""Nonmetal"";

            return ""Metal"";
        }

        return x.Group;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    void ExpandAllGroups()
    {
        dataGrid?.ExpandAllGroups();
    }

    void CollapseAllGroups()
    {
        dataGrid?.CollapseAllGroups();
    }

    void CustomizeByGroupChanged(bool isChecked)
    {
        _customizeGroupBy = isChecked;
        dataGrid.GroupItems();
    }
}";

        public const string DataGridObservabilityExample = @"@using System.Net.Http.Json
@using System.Collections.ObjectModel
@inject HttpClient httpClient

<MudButton OnClick=""@AddItem"" Color=""@Color.Success"" Class=""add-item-btn"">Add Item</MudButton>
<MudButton OnClick=""@RemoveItem"" Color=""@Color.Error"" Class=""remove-item-btn"">Remove Item</MudButton>

<MudDataGrid Items=""@_items"">
    <Columns>
        <Column T=""Model"" Field=""@nameof(Model.Name)"" />
        <Column T=""Model"" Field=""@nameof(Model.Age)"" />
        <Column T=""Model"" Field=""@nameof(Model.Status)"" />
        <Column T=""Model"" Field=""@nameof(Model.Salary)"" />
        <Column T=""Model"" Field=""HireDate"" Title=""Hired"" />
        <Column T=""Model"" Field=""IsManager"" Title=""Manager"" />
    </Columns>
</MudDataGrid>

@code {

    public record Model (string Name, int Age, Severity Status, decimal Salary, DateTime HireDate, bool IsManager);

    ObservableCollection<Model> _items = new ObservableCollection<Model>()
    {
        new Model(""Sam"", 56, Severity.Normal, 50_000.00M, new DateTime(2005, 3, 5), false), 
        new Model(""Alicia"", 54, Severity.Info, 75_000.00M, new DateTime(2010, 1, 17), false), 
        new Model(""Ira"", 27, Severity.Success, 102_000.00M, new DateTime(2017, 6, 15), true),
        new Model(""John"", 32, Severity.Warning, 132_000.00M, new DateTime(2021, 12, 23), true),
        new Model(""Fred"", 65, Severity.Warning, 87_000.00M, new DateTime(2003, 7, 3), false), 
        new Model(""Tabitha"", 33, Severity.Info, 157_000.00M, new DateTime(2015, 2, 12), true), 
        new Model(""Hunter"", 22, Severity.Success, 43_000.00M, new DateTime(2017, 9, 20), false),
        new Model(""Esme"", 55, Severity.Warning, 149_000.00M, new DateTime(2017, 8, 1), true)
    };

    void AddItem()
    {
        _items.Add(new Model(""New Person"", 44, Severity.Warning, 85_000.00M, new DateTime(2022, 1, 1), true));
    }

    void RemoveItem()
    {
        _items.RemoveAt(0);
    }
}";

        public const string DataGridResizeExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" Items=""@Elements"" ColumnResizeMode=""@(_resizeColumn ? ResizeMode.Column : ResizeMode.Container)"" RowsPerPage=""5"">
    <Columns>
        <Column T=""Element"" Field=""Number"" Title=""Nr"" Resizable=""false"" />
        <Column T=""Element"" Field=""Sign"" />
        <Column T=""Element"" Field=""Name"" />
        <Column T=""Element"" Field=""Position"" />
        <Column T=""Element"" Field=""Molar"" Title=""Molar mass"" />
        <Column T=""Element"" Field=""Group"" Title=""Category"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" PageSizeOptions=@(new int[] {5, 10, 20}) />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <div class=""d-flex justify-start align-center"">
        <p class=""mud-typography mud-typography-body1 mud-inherit-text mr-2"">ResizeMode.Container</p>
        <MudSwitch @bind-Checked=""@_resizeColumn"">ResizeMode.Column</MudSwitch>
    </div>
</div>

@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private bool _resizeColumn;

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DataGridSelectionExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid Items=""@Elements.Take(4)"">
    <Columns>
        <Column T=""Element"" Field=""Number"" Title=""Nr"" />
        <Column T=""Element"" Field=""Sign"" />
        <Column T=""Element"" Field=""Name"" />
        <Column T=""Element"" Field=""Position"" />
        <Column T=""Element"" Field=""Molar"" Title=""Molar mass"" />
    </Columns>
</MudDataGrid>

@code { 
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DataGridSortingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" Items=""@Elements"" SortMode=""@_sortMode"">
    <Columns>
        <Column T=""Element"" Field=""Number"" Title=""Nr"" Sortable=""false"" />
        <Column T=""Element"" Field=""Sign"" />
        <Column T=""Element"" Field=""Name"" SortBy=""@_sortBy"" />
        <Column T=""Element"" Field=""Position"" />
        <Column T=""Element"" Field=""Molar"" Title=""Molar mass"" />
        <Column T=""Element"" Field=""Group"" Title=""Category"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Checked=""@_sortNameByLength"" Color=""Color.Primary"">Sort Name Column By Length</MudSwitch>
    <MudRadioGroup T=SortMode @bind-SelectedOption=""@_sortMode"">
        <MudRadio Dense=true Option=@SortMode.Multiple Color=""Color.Primary"">Multiple</MudRadio>
        <MudRadio Dense=true Option=@SortMode.Single Color=""Color.Tertiary"">Single</MudRadio>
        <MudRadio Dense=true Option=@SortMode.None >None</MudRadio>
    </MudRadioGroup>
</div>


@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private bool _sortNameByLength;
    private SortMode _sortMode = SortMode.Multiple;

    // custom sort by name length
    private Func<Element, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DataGridStickyColumnsExample = @"@using System.Net.Http.Json

<MudDataGrid Items=""@_users"" HorizontalScrollbar=""true"" Bordered=""true"" Dense=""true"">
    <Columns>
        <Column T=""User"" Field=""Name"" StickyLeft=""true"" />
        <Column T=""User"" Field=""Age"" />
        <Column T=""User"" Field=""FillerColumn"" HeaderStyle=""white-space:nowrap"">
            <HeaderTemplate>
                @((MarkupString)$""This is a really long column{string.Join("""", Enumerable.Repeat(""&nbsp;"", 1000))}..."")
            </HeaderTemplate>
        </Column>
        <Column T=""User"" Field=""Salary"" />
        <Column T=""User"" StickyRight=""true"">
            <CellTemplate>
                <MudIconButton Icon=""@Icons.Material.Outlined.Edit"" Size=""@Size.Small"" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>

@code {
    public record User(string Name, int Age, string FillerColumn, decimal Salary);

    private IEnumerable<User> _users = new List<User>
    {
        new User(""Sam"", 56, ""..."", 50_000.00M), 
        new User(""Alicia"", 54, ""..."", 75_000.00M), 
        new User(""Ira"", 27, ""..."", 102_000.00M),
        new User(""John"", 32, ""..."", 132_000.00M),

    };
}";

        public const string DataGridVirtualizationExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models

<MudDataGrid Items=""@_items"" Virtualize=""true"" FixedHeader=""true"" Height=""350px"">
    <Columns>
        <Column T=""Model"" Field=""Column1"" />
        <Column T=""Model"" Field=""Column2"" />
        <Column T=""Model"" Field=""Column3"" />
        <Column T=""Model"" Field=""Column4"" />
        <Column T=""Model"" Field=""Column5"" />
    </Columns>
</MudDataGrid>

@code {
    public record Model(string Column1, string Column2, string Column3, string Column4, string Column5);

    private List<Model> _items = new List<Model>();

    protected override void OnInitialized()
    {
        for (var i = 0; i < 20000; i++)
            _items.Add(new Model($""Value_{i}"", $""Value_{i}"", $""Value_{i}"", $""Value_{i}"", $""Value_{i}""));
    }
}";

        public const string DataGridVisualStylingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid Items=""@Elements.Take(4)"" Hover=""@_hover"" Dense=""@_dense"" Striped=""@_striped"" Bordered=""@_bordered""
    RowStyleFunc=""@_rowStyleFunc"">
    <Columns>
        <Column T=""Element"" Field=""Number"" Title=""Nr"" />
        <Column T=""Element"" Field=""Sign"" />
        <Column T=""Element"" Field=""Name"" CellStyleFunc=""@_cellStyleFunc"" />
        <Column T=""Element"" Field=""Position"" />
        <Column T=""Element"" Field=""Molar"" Title=""Molar mass"" />
    </Columns>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Checked=""@_hover"" Color=""Color.Primary"">Hover</MudSwitch>
    <MudSwitch @bind-Checked=""@_dense"" Color=""Color.Secondary"">Dense</MudSwitch>
    <MudSwitch @bind-Checked=""@_striped"" Color=""Color.Tertiary"">Striped</MudSwitch>
    <MudSwitch @bind-Checked=""@_bordered"" Color=""Color.Warning"">Bordered</MudSwitch>
</div>

@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private bool _hover;
    private bool _dense;
    private bool _striped;
    private bool _bordered;
    // style the rows where the Element.Position == 0 to have italic text.
    private Func<Element, int, string> _rowStyleFunc => (x, i) =>
    {
        if (x.Position == 0)
            return ""font-style:italic"";

        return """";
    };
    // style the cells according to the element's physical classification and the molar mass.
    private Func<Element, string> _cellStyleFunc => x =>
    {
        string style = """";

        if (x.Number == 1)
            style += ""background-color:#8CED8C"";

        else if (x.Number == 2)
            style += ""background-color:#E5BDE5"";

        else if (x.Number == 3)
            style += ""background-color:#EACE5D"";

        else if (x.Number == 4)
            style += ""background-color:#F1F165"";

        if (x.Molar > 5)
            style += "";font-weight:bold"";

        return style;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DatePickerActionButtonsExample = @"<MudDatePicker @ref=""_picker"" Label=""With action buttons"" @bind-Date=""date"" AutoClose=""@autoClose"">
    <PickerActions>
        <MudButton Class=""mr-auto align-self-start"" OnClick=""@(() => _picker.Clear())"">Clear</MudButton>
        <MudButton OnClick=""@(() => _picker.Close(false))"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""@(() => _picker.Close())"">Ok</MudButton>
    </PickerActions>
</MudDatePicker>
<MudSwitch @bind-Checked=""@autoClose"" Color=""Color.Secondary"">AutoClose</MudSwitch>

@code {
    MudDatePicker _picker;
    DateTime? date = DateTime.Today;
    private bool autoClose;
}";

        public const string DatePickerBasicUsageExample = @"<MudDatePicker Label=""Basic example"" @bind-Date=""date""/>
<MudDatePicker Label=""Editable with Placeholder"" Editable=""true"" @bind-Date=""date"" Placeholder=""Select Date"" />
<MudDatePicker Label=""Only Calendar"" @bind-Date=""date"" DisableToolbar=""true"" />
<MudDatePicker Label=""Date Format"" @bind-Date=""date"" DateFormat=""dd.MM.yyyy"" />
<MudDatePicker Label=""Show week number"" ShowWeekNumbers=""true"" @bind-Date=""date"" />
<MudDatePicker Label=""Display two months"" DisplayMonths=""2"" TitleDateFormat=""dddd, dd MMMM"" @bind-Date=""date"" />

@code {
    DateTime? date = DateTime.Today;
}";

        public const string DatePickerColorExample = @"<MudDatePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Success"" Rounded=""true"" Date=""@(DateTime.Today.AddDays(1))"" />
<MudDatePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Secondary"" Rounded=""true"" Date=""@(DateTime.Today.AddDays(1))"" />";

        public const string DatePickerDialogExample = @"<MudDatePicker PickerVariant=""PickerVariant.Dialog"" Label=""Picker example"" Text=""2020-10-19"" />
<MudDatePicker PickerVariant=""PickerVariant.Dialog"" Label=""Only Calendar"" Text=""2020-10-19"" DisableToolbar=""true"" HelperText=""No header"" />
<MudDatePicker PickerVariant=""PickerVariant.Dialog"" Label=""Date Format"" HelperText=""For custom cultures"" DateFormat=""dd/MM/yyyy"" Date=""@(new System.DateTime(2020,10,19))"" />";

        public const string DatePickerElevationExample = @"<MudDatePicker PickerVariant=""PickerVariant.Static"" Rounded=""true"" Elevation=""1"" Date=""@(DateTime.Today.AddDays(1))"" />
<MudDatePicker PickerVariant=""PickerVariant.Static"" Rounded=""true"" Elevation=""12"" Date=""@(DateTime.Today.AddDays(1))"" />";

        public const string DatePickerFixedValuesExample = @"<MudDatePicker Label=""Year-Month Picker (Fixed Day)"" HelperText=""@_yearMonth?.ToShortDateString()"" @bind-Date=""_yearMonth"" OpenTo=""OpenTo.Year"" FixDay=""1"" DateFormat=""yyyy/MM"" />
<MudDatePicker Label=""Month-Day Picker (Fixed Year)"" HelperText=""@_monthDay?.ToShortDateString()"" @bind-Date=""_monthDay"" OpenTo=""OpenTo.Month"" FixYear=""2021"" DateFormat=""MM/dd"" />
<MudDatePicker Label=""Year-Day Picker (Fixed Month)"" HelperText=""@_yearDay?.ToShortDateString()"" @bind-Date=""_yearDay"" OpenTo=""OpenTo.Year"" FixMonth=""10"" />
<MudDatePicker Label=""Year Picker (Fixed Month and Day)"" HelperText=""@_year?.ToShortDateString()"" @bind-Date=""_year"" OpenTo=""OpenTo.Year"" FixMonth=""@DateTime.Today.Month"" FixDay=""@DateTime.Today.Day"" DateFormat=""yyyy"" />
<MudDatePicker Label=""Month Picker (Fixed Year and Day)"" HelperText=""@_month?.ToShortDateString()"" @bind-Date=""_month"" OpenTo=""OpenTo.Month"" FixYear=""@DateTime.Today.Year"" FixDay=""@DateTime.Today.Day"" DateFormat=""MMM"" />
<MudDatePicker Label=""Day Picker (Fixed Year and Month)"" HelperText=""@_day?.ToShortDateString()"" @bind-Date=""_day"" FixYear=""@DateTime.Today.Year"" FixMonth=""@DateTime.Today.Month"" DateFormat=""dd"" />

@code { 
    DateTime? _yearMonth;
    DateTime? _monthDay;
    DateTime? _yearDay;
    DateTime? _year;
    DateTime? _month;
    DateTime? _day;
}";

        public const string DatePickerGoToDateExample = @"<MudDatePicker @ref=""_picker"" @bind-Date=""date"" PickerVariant=""PickerVariant.Static"" MaxDate=""maxDate"">
    <PickerActions>
        <MudButton Class=""mr-auto align-self-start"" OnClick=""Today"">Today</MudButton>
    </PickerActions>
</MudDatePicker>

<div class=""d-flex flex-column gap-4"">
    <MudButton Color=""Color.Primary"" Variant=""Variant.Filled"" OnClick=""CurrentDate"">Move To Current Date</MudButton>
    <MudButton Color=""Color.Primary"" Variant=""Variant.Filled"" OnClick=""MudRelease"">When First Mud Released?</MudButton>
    <MudButton Color=""Color.Primary"" Variant=""Variant.Filled"" OnClick=""GoMaxDateWithoutSubmit"">Go To Max Date Without Submit</MudButton>
</div>

@code {
    MudDatePicker _picker;
    DateTime? date = DateTime.Today.AddDays(210);
    DateTime? maxDate = new DateTime(2050, 12, 31);

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _picker.GoToDate();
        }
    }

    private async Task Today()
    {
        await _picker.GoToDate(DateTime.Today);
    }

    private void CurrentDate()
    {
        _picker.GoToDate();
    }

    private async Task MudRelease()
    {
        await _picker.GoToDate(new DateTime(2020, 10, 18));
    }

    private async Task GoMaxDateWithoutSubmit()
    {
        await _picker.GoToDate(maxDate.Value, false);
    }
}";

        public const string DatePickerInternationalizationExample = @"@using System.Globalization
@using System.Reflection

<MudDatePicker Label=""Current UI Culture"" @bind-Date=""date"" />
<MudDatePicker Label=""Persian"" @bind-Date=""date"" Culture=""@GetPersianCulture()"" UseShortNames=""false"" TitleDateFormat=""dddd, dd MMMM""/>
<MudDatePicker Label=""Chinese"" @bind-Date=""date"" Culture=""@CultureInfo.GetCultureInfo(""zh-Hans"")"" TitleDateFormat=""dddd, dd MMMM""/>

@code {
    DateTime? date = new DateTime(2021, 02, 14); // 1399-11-26 in Persian calendar

    public CultureInfo GetPersianCulture()
    {
        var culture = new CultureInfo(""fa-IR"");
        DateTimeFormatInfo formatInfo = culture.DateTimeFormat;
        formatInfo.AbbreviatedDayNames = new[] { ""ی"", ""د"", ""س"", ""چ"", ""پ"", ""ج"", ""ش"" };
        formatInfo.DayNames = new[] { ""یکشنبه"", ""دوشنبه"", ""سه شنبه"", ""چهار شنبه"", ""پنجشنبه"", ""جمعه"", ""شنبه"" };
        var monthNames = new[]
        {
            ""فروردین"", ""اردیبهشت"", ""خرداد"", ""تیر"", ""مرداد"", ""شهریور"", ""مهر"", ""آبان"", ""آذر"", ""دی"", ""بهمن"",
            ""اسفند"",
            """",
        };
        formatInfo.AbbreviatedMonthNames =
            formatInfo.MonthNames =
                formatInfo.MonthGenitiveNames = formatInfo.AbbreviatedMonthGenitiveNames = monthNames;
        formatInfo.AMDesignator = ""ق.ظ"";
        formatInfo.PMDesignator = ""ب.ظ"";
        formatInfo.ShortDatePattern = ""yyyy/MM/dd"";
        formatInfo.LongDatePattern = ""dddd, dd MMMM,yyyy"";
        formatInfo.FirstDayOfWeek = DayOfWeek.Saturday;
        System.Globalization.Calendar cal = new PersianCalendar();
        FieldInfo fieldInfo = culture.GetType().GetField(""calendar"", BindingFlags.NonPublic | BindingFlags.Instance);
        if (fieldInfo != null)
            fieldInfo.SetValue(culture, cal);
        FieldInfo info = formatInfo.GetType().GetField(""calendar"", BindingFlags.NonPublic | BindingFlags.Instance);
        if (info != null)
            info.SetValue(formatInfo, cal);
        culture.NumberFormat.NumberDecimalSeparator = ""/"";
        culture.NumberFormat.DigitSubstitution = DigitShapes.NativeNational;
        culture.NumberFormat.NumberNegativePattern = 0;
        return culture;
    }
}";

        public const string DatePickerMaskExample = @"<MudDatePicker Label=""dd.MM.yyyy"" Editable=""true"" @bind-Date=""date1"" Mask=""@(new DateMask(""dd.MM.yyyy""))"" DateFormat=""dd.MM.yyyy"" Placeholder=""de-AT Date"" />
<MudDatePicker Label=""MM/dd/yyyy"" Editable=""true"" @bind-Date=""date2"" Mask=""@(new DateMask(""MM/dd/yyyy""))"" DateFormat=""MM/dd/yyyy"" Placeholder=""en-US Date"" />
<MudDatePicker Label=""yyyy-MM-dd"" Editable=""true"" @bind-Date=""date3"" Mask=""@(new DateMask(""0000-00-00""))"" DateFormat=""yyyy-MM-dd"" Placeholder=""ISO Date"" />

@code {
    DateTime? date1 = null;
    DateTime? date2 = DateTime.Today;
    DateTime? date3 = null;
}";

        public const string DatePickerReadOnlyExample = @"<MudDatePicker Label=""Read only"" @bind-Date=""date"" ReadOnly=""true""/>

@code {
    DateTime? date = DateTime.Today;
}";

        public const string DatePickerStaticExample = @"<MudDatePicker PickerVariant=""PickerVariant.Static"" Date=""@(DateTime.Today.AddDays(1))"" />
<MudHidden Breakpoint=""@Breakpoint.Xs"">
    <MudDatePicker PickerVariant=""PickerVariant.Static"" Orientation=""Orientation.Landscape"" Date=""@(DateTime.Today.AddDays(1))"" />
</MudHidden>";

        public const string DatePickerViewsExample = @"<MudDatePicker Label=""Year"" OpenTo=""OpenTo.Year"" Text=""2020-10-19"" />
<MudDatePicker Label=""Month"" OpenTo=""OpenTo.Month"" Text=""2020-10-19"" />
<MudDatePicker Label=""Date"" Text=""2020-10-19"" />";

        public const string DateRangePickerUsageExample = @"<MudDateRangePicker Label=""Basic range picker"" @bind-DateRange=""_dateRange"" />
<MudDateRangePicker Label=""Basic range picker (editable)"" Editable=""true"" @bind-DateRange=""_dateRange"" />
<MudDateRangePicker Label=""Range picker format"" HelperText=""For custom cultures"" DateFormat=""dd/MM/yyyy"" TitleDateFormat=""dddd, dd. MMMM"" @bind-DateRange=""_dateRange"" />
<MudDateRangePicker Label=""Custom start month"" StartMonth=""@DateTime.Now.AddMonths(-1)"" @bind-DateRange=""_dateRange"" />
<MudDateRangePicker @ref=""_picker"" Label=""With action buttons"" @bind-DateRange=""_dateRange"" AutoClose=""@_autoClose"">
    <PickerActions>
        <MudButton Class=""mr-auto align-self-start"" OnClick=""@(() => _picker.Clear())"">Clear</MudButton>
        <MudButton OnClick=""@(() => _picker.Close(false))"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""@(() => _picker.Close())"">Ok</MudButton>
    </PickerActions>
</MudDateRangePicker>
<MudSwitch @bind-Checked=""@_autoClose"" Color=""Color.Secondary"">AutoClose</MudSwitch>

@code { 
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private bool _autoClose;
}";

        public const string DialogConfigurationExample = @"<MudDialogProvider
    FullWidth=""true""
    MaxWidth=""MaxWidth.ExtraSmall""
    CloseButton=""true""
    DisableBackdropClick=""true""
    NoHeader=""true""
    Position=""DialogPosition.Center""
    CloseOnEscapeKey=""true""
/>";

        public const string DialogFocusExample = @"@inject IDialogService DialogService


<MudButton @onclick=""OpenDialog"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Dialog
</MudButton>


@code {

    private void OpenDialog()
    {
		var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<DialogFocusExample_Dialog>(""Last element focused"", options);
    }
}";

        public const string DialogFocusExample_Dialog = @"<MudDialog DefaultFocus=""DefaultFocus.LastChild"">
    <DialogContent>
        Dialog content
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""Submit"">Ok</MudButton>
        <MudButton Color=""Color.Success"" >Focused Button</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}";

        public const string DialogInlineExample = @"<div class=""d-flex"">
    <MudButton OnClick=""OpenDialog"" Variant=""Variant.Filled"" Color=""Color.Primary"">
        Edit rating
    </MudButton>
    <MudRating SelectedValue=""rating"" Disabled=""true"" Class=""mt-1 ml-3"" />
</div>

<MudDialog @bind-IsVisible=""visible"" Options=""dialogOptions"">
    <TitleContent>
        <MudText Typo=""Typo.h6"">
            <MudIcon Icon=""@Icons.Material.Filled.Edit"" Class=""mr-3""/> Edit rating
        </MudText>
    </TitleContent>
    <DialogContent>
        <p>How awesome are inline dialogs?</p>
        <MudRating @bind-SelectedValue=""rating"" Class=""mt-3""/>
    </DialogContent>
    <DialogActions>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""Submit"" Class=""px-10"">Close</MudButton>
    </DialogActions>
</MudDialog>

@code { 
    private bool visible;
    private int rating;
    private void OpenDialog() => visible = true;
    void Submit() => visible = false;

    private DialogOptions dialogOptions = new() { FullWidth = true };
}";

        public const string DialogKeyboardNavigationExample = @"@inject IDialogService DialogService


<MudButton @onclick=""OpenDialog"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Dialog
</MudButton>


@code {

    private void OpenDialog()
    {    
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        DialogService.Show<DialogKeyboardNavigationExample_Dialog>(""Simple Dialog"", closeOnEscapeKey);
    }
}";

        public const string DialogKeyboardNavigationExample_Dialog = @"<MudDialog>
    <DialogContent>
        <MudTextField T=""string"" Label=""Name""></MudTextField>
        <MudSelect T=""string"" Label=""Favorite Coffee"" AnchorOrigin=""Origin.BottomCenter"">
            <MudSelectItem Value=""@(""Cappuccino"")"" />
            <MudSelectItem Value=""@(""Cafe Latte"")"" />
            <MudSelectItem Value=""@(""Espresso"")"" />
            <MudSelectItem Value=""@(""Irish Coffee"")"" />
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""Submit"">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}";

        public const string DialogNestedExample = @"@inject IDialogService DialogService

<MudButton @onclick=""OpenDialog"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Simple Dialog
</MudButton>

@code {
    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<DialogNestedExample_Dialog>(""First Level Dialog"", options);
    }
}";

        public const string DialogNestedExample_Dialog = @"@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        Dialog Content
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""OpenSecondDialog"">Open Second Dialog</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Cancel() => MudDialog.Cancel();

    private void OpenSecondDialog()
    {
        DialogService.Show<DialogNestedExample_Dialog2>(""Second Level Dialog"");
    }
}";

        public const string DialogNestedExample_Dialog2 = @"<MudDialog>
    <DialogContent>
        Dialog Content
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""CancelAll"">Close All</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private void CancelAll()
    {
        MudDialog.CancelAll();
    }
}";

        public const string DialogOptionsExample = @"@inject IDialogService Dialog

<MudButton OnClick=""@((e) => OpenDialog(maxWidth))"">Open MaxWidth Dialog</MudButton>
<MudButton OnClick=""@((e) => OpenDialog(closeButton))"" Color=""Color.Primary"">Close Button Dialog</MudButton>
<MudButton OnClick=""@((e) => OpenDialog(noHeader))"" Color=""Color.Secondary"">No header Dialog</MudButton>
<MudButton OnClick=""@((e) => OpenDialog(disableBackdropClick))"" Color=""Color.Tertiary"">Disable backdrop dialog</MudButton>
<MudButton OnClick=""@((e) => OpenDialog(fullScreen))"" Color=""Color.Info"">Full Screen Dialog</MudButton>
<MudButton OnClick=""@((e) => OpenDialog(topCenter))"" Color=""Color.Success"">Top Center Dialog</MudButton>


@code {
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    DialogOptions closeButton = new DialogOptions() { CloseButton = true };
    DialogOptions noHeader = new DialogOptions() {  NoHeader = true };
    DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };
    DialogOptions fullScreen = new DialogOptions() { FullScreen = true, CloseButton = true };
    DialogOptions topCenter = new DialogOptions() { Position = DialogPosition.TopCenter };

    private void OpenDialog(DialogOptions options)
    {
        Dialog.Show<DialogUsageExample_Dialog>(""Custom Options Dialog"", options);
    }
}";

        public const string DialogOptionsExample_Dialog = @"<MudDialog>
    <DialogContent>
        Dialog Content
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""Submit"">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}";

        public const string DialogPassingDataExample = @"@using MudBlazor.Examples.Data.Models

@inject IDialogService DialogService

<div class=""d-flex flex-wrap"">
    @foreach (var item in Servers)
    {
        <MudPaper Class=""d-flex align-center pa-2 mx-2 my-2"">
            <MudText>@item.Name</MudText>
            <MudButton Variant=""Variant.Text"" Color=""Color.Error"" OnClick=""@((e) => DeleteServer(item))"">Delete</MudButton>
        </MudPaper>
    }
</div>

@code {

    async Task DeleteServer(Server server)
    {
        var parameters = new DialogParameters { [""server""]=server };

        var dialog = DialogService.Show<DialogPassingDataExample_Dialog>(""Delete Server"", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            //In a real world scenario we would reload the data from the source here since we ""removed"" it in the dialog already.
            Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            Servers.RemoveAll(item => item.Id == deletedServer);
        }
    }

    //Pretend we are loading this data from a database or API
    public List<Server> Servers { get; } = new List<Server>
    {
        new Server{ Id = Guid.NewGuid(), Name = ""Server1"", Location = ""Denmark"", IpAddress = ""193.254.123.1"" },
        new Server{ Id = Guid.NewGuid(), Name = ""Server2"", Location = ""Sweden"", IpAddress = ""127.0.0.1"" },
        new Server{ Id = Guid.NewGuid(), Name = ""Server3"", Location = ""Russia"", IpAddress = ""173.164.2.1"" },
        new Server{ Id = Guid.NewGuid(), Name = ""Server4"", Location = ""Germany"", IpAddress = ""193.168.1.1"" },
    };
}";

        public const string DialogPassingDataExample_Dialog = @"@using MudBlazor.Examples.Data.Models

@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo=""Typo.h6"">
            <MudIcon Icon=""@Icons.Material.Filled.DeleteForever"" Class=""mr-3 mb-n1""/>
            Delete server?
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Value=""@server.Id.ToString()"" Label=""Server ID"" ReadOnly=""true""/>
        <MudTextField Value=""@server.Name"" Label=""Server Name"" ReadOnly=""true""/>
        <MudTextField Value=""@server.Location"" Label=""Location"" ReadOnly=""true""/>
        <MudTextField Value=""@server.IpAddress"" Label=""IP Address"" ReadOnly=""true""/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Error"" OnClick=""DeleteServer"">Delete Server</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Server server { get; set; } = new Server();

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void DeleteServer()
    {
        //In a real world scenario this bool would probably be a service to delete the item from api/database
        Snackbar.Add(""Server Deleted"", Severity.Success);
        MudDialog.Close(DialogResult.Ok(server.Id));
    }
}";

        public const string DialogScrollableExample = @"@inject IDialogService DialogService

<MudButton OnClick=""OpenDialog"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Scrollable Dialog
</MudButton>

@code {
    bool license_accepted = false;

    async Task OpenDialog()
    {
        var result = await DialogService.Show<DialogScrollableExample_Dialog>(""MudBlazor License"").Result;

        if (!result.Cancelled)
        {
            license_accepted = (bool)(result.Data ?? false);
        }
    }
}";

        public const string DialogScrollableExample_Dialog = @"@using System.Net
@using System.Text

<MudDialog DisableSidePadding=""true"">
    <DialogContent>
        <MudContainer Style=""max-height: 300px; overflow-y: scroll"">
            @if (Loading)
            {
                <MudProgressCircular Indeterminate=""true""></MudProgressCircular>
            }
            else
            {
                <MudText Style=""white-space: pre-wrap;"">@LicenseText</MudText>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Color=""Color.Primary"" OnClick=""Ok"">Accept</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Inject] HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Loading = true;
        var response = await HttpClient.GetAsync(""https://raw.githubusercontent.com/MudBlazor/MudBlazor/master/LICENSE"");
        LicenseText = await response.Content.ReadAsStringAsync();
        Loading = false;
    }

    private string LicenseText;
    private bool Loading = false;

    private void Ok()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
}";

        public const string DialogSetOptionsExample = @"@inject IDialogService DialogService

<MudButton OnClick=""OpenDialog"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Options Dialog
</MudButton>

@code {

    private void OpenDialog()
    {
        DialogService.Show<DialogSetOptionsExample_Dialog>(""Options Dialog"");
    }
}";

        public const string DialogSetOptionsExample_Dialog = @"<MudDialog>
    <DialogContent>
        <div class=""d-flex flex-column py-1"">
            <MudButton OnClick=""ChangeTitle"">Change Title</MudButton>
            <MudButton OnClick=""ToggleCloseButton"">Toggle Close Button</MudButton>
            <MudButton OnClick=""ToggleFullWidth"">Toggle Full Width</MudButton>
            <MudButton OnClick=""ToggleHeader"">Toggle Header</MudButton>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color=""Color.Primary"" OnClick=""Close"">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Close() => MudDialog.Close(DialogResult.Ok(true));

    void ChangeTitle()
    {
        MudDialog.SetTitle(""Current time is: "" + DateTime.Now);
    }

    void ToggleCloseButton()
    {
        MudDialog.Options.CloseButton = !(MudDialog.Options.CloseButton ?? false);
        MudDialog.SetOptions(MudDialog.Options);
    }

    void ToggleFullWidth()
    {
        MudDialog.Options.FullWidth = !(MudDialog.Options.FullWidth ?? true);
        MudDialog.SetOptions(MudDialog.Options);
    }

    void ToggleHeader()
    {
        MudDialog.Options.NoHeader = !(MudDialog.Options.NoHeader ?? false);
        MudDialog.SetOptions(MudDialog.Options);
    }
}";

        public const string DialogTemplateExample = @"@inject IDialogService DialogService


<MudButton @onclick=""DeleteUser"" Variant=""Variant.Filled"" Color=""Color.Error"">Delete Records</MudButton>
<MudButton @onclick=""Confirm"" Variant=""Variant.Filled"" Color=""Color.Success"">Remove Email</MudButton>
<MudButton @onclick=""Download"" Variant=""Variant.Filled"" Color=""Color.Warning"">Slow Computer</MudButton>

@code {

    private void DeleteUser()
    {
        var parameters = new DialogParameters();
        parameters.Add(""ContentText"", ""Do you really want to delete these records? This process cannot be undone."");
        parameters.Add(""ButtonText"", ""Delete"");
        parameters.Add(""Color"", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<DialogTemplateExample_Dialog>(""Delete"", parameters, options);
    }

    private void Confirm()
    {
        var parameters = new DialogParameters();
        parameters.Add(""ContentText"", ""Are you sure you want to remove thisguy@emailz.com from this account?"");
        parameters.Add(""ButtonText"", ""Yes"");
        parameters.Add(""Color"", Color.Success);

        DialogService.Show<DialogTemplateExample_Dialog>(""Confirm"", parameters);
    }

    private void Download()
    {
        var parameters = new DialogParameters();
        parameters.Add(""ContentText"", ""Your computer seems very slow, click the download button to download free RAM."");
        parameters.Add(""ButtonText"", ""Download"");
        parameters.Add(""Color"", Color.Info);

        DialogService.Show<DialogTemplateExample_Dialog>(""Slow Computer Detected"", parameters);
    }
}";

        public const string DialogTemplateExample_Dialog = @"<MudDialog>
    <DialogContent>
        <MudText>@ContentText</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""@Color"" Variant=""Variant.Filled"" OnClick=""Submit"">@ButtonText</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string ContentText { get; set; }

    [Parameter] public string ButtonText { get; set; }

    [Parameter] public Color Color { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}";

        public const string DialogUsageExample = @"@inject IDialogService DialogService


<MudButton @onclick=""OpenDialog"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Simple Dialog
</MudButton>


@code {

    private void OpenDialog()
    {
		var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<DialogUsageExample_Dialog>(""Simple Dialog"", options);
    }
}";

        public const string DialogUsageExample_Dialog = @"<MudDialog>
    <DialogContent>
        Dialog Content
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""Submit"">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}";

        public const string DividerInsertExample = @"<MudPaper Width=""300px"" Square=""true"">
    <MudList>
        <MudListItem Avatar=""@Icons.Material.Filled.TrendingUp"">
            Trending
        </MudListItem>
        <MudDivider DividerType=""DividerType.Inset"" />
        <MudListItem Avatar=""@Icons.Material.Filled.StarRate"">
            Most Stars
        </MudListItem>
        <MudDivider DividerType=""DividerType.Inset"" />
        <MudListItem Avatar=""@Icons.Material.Filled.History"">
            History
        </MudListItem>
    </MudList>
</MudPaper>";

        public const string DividerListExample = @"<MudPaper Width=""300px"" Square=""true"">
    <MudList Clickable=""true"">
        <MudListItem>Inbox</MudListItem>
        <MudDivider />
        <MudListItem>Sent</MudListItem>
        <MudDivider />
        <MudListItem>Drafts</MudListItem>
        <MudDivider />
        <MudListItem>Spam</MudListItem>
    </MudList>
</MudPaper>";

        public const string DividerMiddleExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo=""Typo.h5"">Uranium-235</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText>This is the type of uranium used in the RBMK reactors.</MudText>
        <MudDivider DividerType=""DividerType.Middle"" Class=""my-6""/>
        <MudText GutterBottom=""true"">Select Reactor Type</MudText>
        <MudChip Color=""Color.Secondary"">RBMK-1000</MudChip><MudChip>RBMK-1500</MudChip><MudChip>RBMKP-2400</MudChip>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Read More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string DividerVerticalExample = @"<MudPaper Square=""true"" Class=""d-flex justify-space-around"">
    <MudIconButton Icon=""@Icons.Material.Filled.FormatAlignRight"" Color=""Color.Dark"" Class=""rounded-0"" />
    <MudIconButton Icon=""@Icons.Material.Filled.FormatAlignCenter"" Color=""Color.Dark"" Class=""rounded-0"" />
    <MudIconButton Icon=""@Icons.Material.Filled.FormatAlignLeft"" Color=""Color.Dark"" Class=""rounded-0"" />

    <MudDivider Vertical=""true"" FlexItem=""true"" />

    <MudIconButton Icon=""@Icons.Material.Filled.FormatBold"" Color=""Color.Dark"" Class=""rounded-0"" />
    <MudIconButton Icon=""@Icons.Material.Filled.FormatItalic"" Color=""Color.Dark"" Class=""rounded-0"" />
    <MudIconButton Icon=""@Icons.Material.Filled.FormatUnderlined"" Color=""Color.Dark"" Class=""rounded-0"" />
</MudPaper>";

        public const string DrawerAnchorExample = @"<MudPaper Height=""200px"" Class=""mud-theme-primary"" Style=""overflow:hidden; position:relative;"">
    <MudDrawerContainer Class=""mud-height-full"">
        <MudDrawer @bind-Open=""@openStart"" Anchor=""Anchor.Start"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">My App</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Store"">Store</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.LocalLibrary"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Forum"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <MudDrawer @bind-Open=""@openEnd"" Fixed=""false"" Anchor=""Anchor.End"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">Settings</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.AccountBox"">Profile</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.ShoppingCart"">Orders</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.History"">Order History</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <div class=""d-flex justify-center align-center mud-height-full"">
            <MudButton Color=""Color.Inherit"" OnClick=""@ToggleStartDrawer"" StartIcon=""@(Rtl ? Icons.Filled.East : Icons.Filled.West)"" Class=""mx-2"">Toggle start</MudButton>
            <MudButton Color=""Color.Inherit"" OnClick=""@ToggleEndDrawer"" EndIcon=""@(Rtl ? Icons.Filled.West : Icons.Filled.East)"" Class=""mx-2"">Toggle end</MudButton>
        </div>
    </MudDrawerContainer>
</MudPaper>

@code
{
    [CascadingParameter]
    public bool Rtl { get; set; }

    bool openStart = false;
    bool openEnd = false;

    void ToggleStartDrawer()
    {
        openStart = !openStart;
    }

    void ToggleEndDrawer()
    {
        openEnd = !openEnd;
    }
}";

        public const string DrawerBreakpointExample = @"<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawer"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" Link=""https://github.com/MudBlazor/MudBlazor"" Target=""_blank"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""@open"" Breakpoint=""@breakpoint"" Elevation=""1"" Variant=""@DrawerVariant.Responsive"" PreserveOpenState=""@preserveOpenState"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer Class=""mt-6"">
            <MudSelect Label=""Select breakpoint"" @bind-Value=""breakpoint"">
                <MudSelectItem Value=""@Breakpoint.Sm"">Breakpoint.Sm</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Md"">Breakpoint.Md</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Lg"">Breakpoint.Lg</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Xl"">Breakpoint.Xl</MudSelectItem>
            </MudSelect>
            <MudSwitch @bind-Checked=""@preserveOpenState"" Label=""Preserve open state"" Color=""Color.Primary"" Style=""width:100%;"" />
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code{
    bool open = false;
    bool preserveOpenState = false;
    Breakpoint breakpoint = Breakpoint.Lg;

    void ToggleDrawer()
    {
        open = !open;
    }
}";

        public const string DrawerClippingExample = @"<MudLayout>
    <MudAppBar Elevation=""1"" Dense=""@dense"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawer"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" Link=""https://github.com/MudBlazor/MudBlazor"" Target=""_blank"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""@open"" ClipMode=""clipMode"" Elevation=""1"" Variant=""@DrawerVariant.Responsive"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer Class=""mt-6"">
            <MudSelect Label=""Select clip mode"" @bind-Value=""clipMode"">
                <MudSelectItem Value=""@DrawerClipMode.Never"">Not clipped (DrawerClipMode.Never)</MudSelectItem>
                <MudSelectItem Value=""@DrawerClipMode.Docked"">Drawer is docked (DrawerClipMode.Docked)</MudSelectItem>
                <MudSelectItem Value=""@DrawerClipMode.Always"">Always (DrawerClipMode.Always)</MudSelectItem>
            </MudSelect>
            <MudSwitch @bind-Checked=""@dense"" Label=""Dense appbar"" Color=""Color.Primary"" Style=""width:100%;"" />
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code{
    bool open = false;
    bool dense = false;
    DrawerClipMode clipMode = DrawerClipMode.Never;

    void ToggleDrawer()
    {
        open = !open;
    }
}";

        public const string DrawerLeftRightExample = @"<MudPaper Height=""200px"" Class=""mud-theme-primary"" Style=""overflow:hidden; position:relative;"">
    <MudDrawerContainer Class=""mud-height-full"">
        <MudDrawer @bind-Open=""@openLeft"" Anchor=""Anchor.Left"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">My App</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Store"">Store</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.LocalLibrary"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Forum"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <MudDrawer @bind-Open=""@openRight"" Fixed=""false"" Anchor=""Anchor.Right"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">Settings</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.AccountBox"">Profile</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.ShoppingCart"">Orders</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.History"">Order History</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <div class=""d-flex justify-center align-center mud-height-full"">
            @if (Rtl)
            {
                <MudButton Color=""Color.Inherit"" OnClick=""@ToggleRightDrawer"" StartIcon=""@Icons.Filled.East"" Class=""mx-2"">Toggle right</MudButton>
                <MudButton Color=""Color.Inherit"" OnClick=""@ToggleLeftDrawer"" EndIcon=""@Icons.Filled.West"" Class=""mx-2"">Toggle left</MudButton>
            }
            else
            {
                <MudButton Color=""Color.Inherit"" OnClick=""@ToggleLeftDrawer"" StartIcon=""@Icons.Filled.West"" Class=""mx-2"">Toggle left</MudButton>
                <MudButton Color=""Color.Inherit"" OnClick=""@ToggleRightDrawer"" EndIcon=""@Icons.Filled.East"" Class=""mx-2"">Toggle right</MudButton>
            }
        </div>
    </MudDrawerContainer>
</MudPaper>

@code
{
    [CascadingParameter]
    public bool Rtl { get; set; }

    bool openLeft = false;
    bool openRight = false;

    void ToggleLeftDrawer()
    {
        openLeft = !openLeft;
    }

    void ToggleRightDrawer()
    {
        openRight = !openRight;
    }
}";

        public const string DrawerMiniCustomExample = @"<MudLayout>
    <MudAppBar Elevation=""1"" Dense=""@dense"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawer"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" Link=""https://github.com/MudBlazor/MudBlazor"" Target=""_blank"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""@open"" ClipMode=""clipMode"" Breakpoint=""@breakpoint"" PreserveOpenState=""@preserveOpenState"" Elevation=""1"" Variant=""@DrawerVariant.Mini"">
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Store"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.LibraryBooks"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Group"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer Class=""mt-6"">
            <MudSelect Label=""Select clip mode"" @bind-Value=""clipMode"">
                <MudSelectItem Value=""@DrawerClipMode.Never"">Not clipped (DrawerClipMode.Never)</MudSelectItem>
                <MudSelectItem Value=""@DrawerClipMode.Docked"">Drawer is docked (DrawerClipMode.Docked)</MudSelectItem>
                <MudSelectItem Value=""@DrawerClipMode.Always"">Always (DrawerClipMode.Always)</MudSelectItem>
            </MudSelect>
            <MudSelect Label=""Select breakpoint"" @bind-Value=""breakpoint"">
                <MudSelectItem Value=""@Breakpoint.Sm"">Breakpoint.Sm</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Md"">Breakpoint.Md</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Lg"">Breakpoint.Lg</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Xl"">Breakpoint.Xl</MudSelectItem>
            </MudSelect>
            <MudSwitch @bind-Checked=""@preserveOpenState"" Label=""Preserve open state"" Color=""Color.Primary"" Style=""width:100%;"" />
            <MudSwitch @bind-Checked=""@dense"" Label=""Dense appbar"" Color=""Color.Primary"" Style=""width:100%;"" />
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code{
    bool open = false;
    bool dense = false;
    bool preserveOpenState = false;
    Breakpoint breakpoint = Breakpoint.Lg;
    DrawerClipMode clipMode = DrawerClipMode.Never;

    void ToggleDrawer()
    {
        open = !open;
    }
}";

        public const string DrawerMiniExample = @"<MudPaper Height=""200px"" Style=""overflow:hidden; position:relative;"">
    <MudDrawerContainer Class=""mud-height-full"">
        <MudDrawer @bind-Open=""@open"" Fixed=""false"" Elevation=""1"" Variant=""@DrawerVariant.Mini"" OpenMiniOnHover=""true"">
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Store"">Store</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.LibraryBooks"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Group"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <div class=""d-flex justify-center align-center mud-height-full"">
            <MudButton OnClick=""@ToggleDrawer"" Color=""Color.Primary"">Toggle</MudButton>
        </div>
    </MudDrawerContainer>
</MudPaper>

@code
{ 
    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    } 
}";

        public const string DrawerOverlayExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@(() => ToggleDrawer())"">Toggle drawer</MudButton>

<MudDrawer @bind-Open=""@open"" DisableOverlay=""true"" Elevation=""1"" Variant=""@DrawerVariant.Temporary"">
    <MudDrawerHeader>
        <MudText Typo=""Typo.h6"">My App</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
    </MudNavMenu>
</MudDrawer>

@code{ 
    bool open;
    
    void ToggleDrawer()
    {
        open = !open;
    }
}";

        public const string DrawerPersistentExample = @"<MudPaper Height=""200px"" Style=""overflow:hidden; position:relative;"">
    <MudDrawerContainer Class=""mud-height-full"">
        <MudDrawer @bind-Open=""@open"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"" Color=""Color.Primary"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">My App</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Dashboard"" IconColor=""Color.Inherit"">Dashboard</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.LocalLibrary"" IconColor=""Color.Inherit"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.People"" IconColor=""Color.Inherit"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <div class=""d-flex justify-center align-center mud-height-full"">
            <MudButton Variant=""Variant.Filled"" Color=""Color.Secondary"" OnClick=""@ToggleDrawer"">Persistent drawer</MudButton>
        </div>
    </MudDrawerContainer>
</MudPaper>

@code
{
    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    }
}";

        public const string DrawerResponsiveExample = @"<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawer"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" Link=""https://github.com/MudBlazor/MudBlazor"" Target=""_blank"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""@open"" Elevation=""1"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer Class=""mt-6"">
            <MudAlert Severity=""Severity.Success"" Class=""mt-16"">Text inside MudContainer</MudAlert>
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code{
    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    }
}";

        public const string DrawerSizeContainerExample = @"<MudPaper Height=""200px"" Class=""mud-theme-primary"" Style=""overflow:hidden; position:relative;"">
    <MudDrawerContainer Class=""mud-height-full"">
        <MudDrawer @bind-Open=""@openStart"" Width=""150px"" Fixed=""false"" Anchor=""Anchor.Start"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">My App</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Store"">Store</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.LocalLibrary"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Forum"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <MudDrawer @bind-Open=""@openEnd"" Width=""300px"" Fixed=""false"" Anchor=""Anchor.End"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">Settings</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.AccountBox"">Profile</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.ShoppingCart"">Orders</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.History"">Order History</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <div class=""d-flex justify-center align-center mud-height-full"">
            <MudButton Color=""Color.Inherit"" OnClick=""@ToggleStartDrawer"" StartIcon=""@(Rtl ? Icons.Filled.East : Icons.Filled.West)"" Class=""mx-2"">Toggle start</MudButton>
            <MudButton Color=""Color.Inherit"" OnClick=""@ToggleEndDrawer"" EndIcon=""@(Rtl ? Icons.Filled.West : Icons.Filled.East)"" Class=""mx-2"">Toggle end</MudButton>
        </div>
    </MudDrawerContainer>
</MudPaper>

@code
{ 
    [CascadingParameter]
    public bool Rtl { get; set; }

    bool openStart = false;
    bool openEnd = false;

    void ToggleStartDrawer()
    {
        openStart = !openStart;
    }

    void ToggleEndDrawer()
    {
        openEnd = !openEnd;
    } 
}";

        public const string DrawerSizeTemporaryExample = @"<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Start))"">Start</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.End))"">End</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Top))"">Top</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Bottom))"">Bottom</MudButton>

<MudDrawer @bind-Open=""@open"" Width=""@width"" Height=""@height"" Anchor=""@anchor"" Elevation=""1"" Variant=""@DrawerVariant.Temporary"">
    <MudDrawerHeader>
        <MudText Typo=""Typo.h6"">My App</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
    </MudNavMenu>
</MudDrawer>

@code{ 
    bool open;
    Anchor anchor;
    string width, height;

    void OpenDrawer(Anchor anchor)
    {
        open = true;
        this.anchor = anchor;

        switch (anchor)
        {
            case Anchor.Start:
                width = ""300px"";
                height = ""100%"";
                break;
            case Anchor.End:
                width = ""400px"";
                height = ""100%"";
                break;
            case Anchor.Bottom:
                width = ""100%"";
                height = ""200px"";
                break;
            case Anchor.Top:
                width = ""100%"";
                height = ""350px"";
                break;
        }
    }
}";

        public const string DrawerTemporaryExample = @"<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Start))"">Start</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.End))"">End</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Top))"">Top</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Bottom))"">Bottom</MudButton>

<MudDrawer @bind-Open=""@open"" Anchor=""@anchor"" Elevation=""1"" Variant=""@DrawerVariant.Temporary"">
    <MudDrawerHeader>
        <MudText Typo=""Typo.h6"">My App</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
    </MudNavMenu>
</MudDrawer>

@code{ 
    bool open;
    Anchor anchor;
    
    void OpenDrawer(Anchor anchor)
    {
        open = true;
        this.anchor = anchor;
    }
}";

        public const string DropZoneCanDropStylesExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ApplyDropClassesOnDragStarted=""_applyDropClassesOnDragStarted"" ItemsSelector=""@((item,dropzone) => item.Place == dropzone)"" CanDropClass=""mud-border-success"" NoDropClass=""mud-border-error"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-column flex-grow-1"">
    <ChildContent>
        <div class=""d-flex flex-wrap justify-space-between"">
            <MudDropZone T=""DropItem"" Identifier=""Fridge"" CanDrop=""@((item) => false)"" Class=""rounded-lg border-2 border-solid mud-border-lines-default pa-6 ma-8"">
                <MudText Typo=""Typo.h6"" Class=""mb-4"">Fridge</MudText>
            </MudDropZone>
            <MudDropZone T=""DropItem"" Identifier=""Dinner"" CanDrop=""@((item) => item.IsPicked == false && item.IsRotten == false)"" Class=""rounded-lg border-2 border-solid mud-border-lines-default pa-6 ma-8 flex-grow-1"">
                <MudText Typo=""Typo.h6"" Class=""mb-4"">Soup</MudText>
            </MudDropZone>
            <MudDropZone T=""DropItem"" Identifier=""Trash"" CanDrop=""@((item) => item.IsPicked == false && item.IsRotten == true)"" Class=""rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8 flex-grow-1"">
                <MudText Typo=""Typo.h6"" Class=""mb-4"">Trash</MudText>
            </MudDropZone>
        </div>
        <MudToolBar>
            <MudCheckBox @bind-Checked=""_applyDropClassesOnDragStarted"" Label=""Apply Drop Classes On Drag Started"" />
            <MudSpacer/>
            <MudButton OnClick=""Reset"">Reset</MudButton>
        </MudToolBar>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Height=""54px"" Width=""54px"" Class=""pa-2"" Elevation=""0"">
            <MudBadge Visible=""@(context.IsRotten ? true : false)"" Overlap=""true"" Icon=""@Icons.Custom.Uncategorized.Bacteria"" Color=""Color.Dark"">
                <MudIcon Icon=""@context.Icon"" Color=""@context.Color"" Size=""Size.Large""/>
            </MudBadge>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>

@code {
	private bool _applyDropClassesOnDragStarted = false;

	private void Reset()
	{
		foreach (var item in _items)
		{
			item.Place = ""Fridge"";
			item.IsPicked = false;
		}
	}

	private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
	{
		dropItem.Item.IsPicked = true;
		dropItem.Item.Place = dropItem.DropzoneIdentifier;
	}

	private List<DropItem> _items = new()
		{
			new DropItem() { Icon = @Icons.Custom.Uncategorized.FoodApple, Color = Color.Error, IsRotten = false, Place = ""Fridge"" },
		    new DropItem() { Icon = @Icons.Custom.Uncategorized.Baguette, Color = Color.Warning, IsRotten = false, Place = ""Fridge"" },
		    new DropItem() { Icon = @Icons.Custom.Uncategorized.Sausage, Color = Color.Secondary, IsRotten = true, Place = ""Fridge"" },
		    new DropItem() { Icon = @Icons.Custom.Uncategorized.WaterMelon, Color = Color.Success, IsRotten = false, Place = ""Fridge"" },
		    new DropItem() { Icon = @Icons.Custom.Uncategorized.Fish, Color = Color.Info, IsRotten = true, Place = ""Fridge"" },
		};

	public class DropItem
	{
		public string Icon { get; init; }
	    public Color Color { get; init; }
	    public bool IsRotten { get; set; }
		public bool IsPicked { get; set; }
		public string Place { get; set; }
	}
}";

        public const string DropZoneChessBoardExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" CanDropClass=""mud-border-info"" NoDropClass=""mud-border-error"" CanDrop=""@( (item,identifier ) => _items.Count(x => x.Identifier == identifier ) == 0)"" ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" ItemDropped=""ItemUpdated"" Class=""border-2 border-solid mud-border-lines-default"">
    <ChildContent>
        @for(int r = 0; r < 8; r++)
        {
            var row = r.ToString();
            <div class=""d-flex"">
                @for (int c = 0; c < 8; c++)
                {
                    var col = c.ToString();
                    <MudDropZone T=""DropItem"" Identifier=""@($""{row}{col}"")"" DraggingClass=""mud-theme-success"" Class=""d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default"" Style=""height:64px;width:64px;""/>
                }
            </div>
        }
    </ChildContent>
    <ItemRenderer>
        <div class=""d-flex justify-center align-center flex-grow-1"">
            <MudIcon Icon=""@context.Icon"" Color=""@context.Color"" Size=""Size.Large"" />
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessRook, Color = Color.Primary, Identifier = ""00"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKnight, Color = Color.Primary, Identifier = ""01"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessBishop, Color = Color.Primary, Identifier = ""02"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessQueen, Color = Color.Primary, Identifier = ""03"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKing, Color = Color.Primary, Identifier = ""04"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessBishop, Color = Color.Primary, Identifier = ""05"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKnight, Color = Color.Primary, Identifier = ""06"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessRook, Color = Color.Primary, Identifier = ""07"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""10"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""11"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""12"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""13"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""14"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""15"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""16"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""17"" },
        
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""60"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""61"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""62"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""63"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""64"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""65"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""66"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""67"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessRook, Color = Color.Secondary, Identifier = ""70"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKnight, Color = Color.Secondary, Identifier = ""71"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessBishop, Color = Color.Secondary, Identifier = ""72"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessQueen, Color = Color.Secondary, Identifier = ""73"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKing, Color = Color.Secondary, Identifier = ""74"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessBishop, Color = Color.Secondary, Identifier = ""75"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKnight, Color = Color.Secondary, Identifier = ""76"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessRook, Color = Color.Secondary, Identifier = ""77"" },
    };

    public class DropItem
    {
        public string Icon { get; init; }
        public Color Color { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string DropZoneDisabledExample = @"<MudDropContainer T=""FileItem"" ItemIsDisabled=""@( (item) => item.IsLocked == true)""  Items=""_items"" ItemsSelector=""@((item,dropzone) => item.TransferSlot == dropzone)""  ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap"">
    <ChildContent>
        <MudPaper Class=""ma-4"" Height=""400px"" Width=""300px"">
            <MudList Clickable=""true"" Class=""mud-height-full"">
                <MudDropZone T=""FileItem"" Identifier=""Company"" Class=""mud-height-full"">
                    <MudListSubheader>Company Files</MudListSubheader>
                </MudDropZone>
            </MudList>
        </MudPaper>
        <MudPaper Class=""ma-4"" Height=""400px"" Width=""300px"">
            <MudList Clickable=""true"" Class=""mud-height-full"">
                <MudDropZone T=""FileItem"" Identifier=""External"" Class=""mud-height-full"">
                    <MudListSubheader>External USB</MudListSubheader>
                </MudDropZone>
            </MudList>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudListItem Disabled=""@(context.IsLocked ? true : false)"" Icon=""@Icons.Custom.FileFormats.FileDocument"">
            @context.Name
        </MudListItem>
    </ItemRenderer>
</MudDropContainer>

@code {

	private void ItemUpdated(MudItemDropInfo<FileItem> dropItem)
	{
		dropItem.Item.TransferSlot = dropItem.DropzoneIdentifier;
	}

	private List<FileItem> _items = new()
		{
			new FileItem() { Name = ""File1.txt"", IsLocked = false, TransferSlot = ""Company"" },
			new FileItem() { Name = ""File2.txt"", IsLocked = false, TransferSlot = ""External"" },
			new FileItem() { Name = ""File3.txt"", IsLocked = true, TransferSlot = ""Company"" },
		    new FileItem() { Name = ""File4.txt"", IsLocked = true, TransferSlot = ""Company"" },
		    new FileItem() { Name = ""File5.txt"", IsLocked = false, TransferSlot = ""External"" },
		    new FileItem() { Name = ""File6.txt"", IsLocked = true, TransferSlot = ""Company"" },
		};

	public class FileItem
	{
		public string Name { get; init; }
		public bool IsLocked { get; set; }
		public string TransferSlot { get; set; }
	}
}";

        public const string DropZoneDraggingStyleExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" Item ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-column flex-grow-1"">
    <ChildContent>
        <div class=""d-flex flex-column flex-grow-1"">
            <MudListSubheader Class=""mt-4 pb-2"">Folders</MudListSubheader>
            <MudDropZone T=""DropItem"" ItemDraggingClass=""mud-info-text"" Identifier=""Folders"" Class=""d-flex flex-wrap flex-grow-1 pa-2 rounded"" />
        </div>
        <div class=""d-flex flex-column flex-grow-1"">
            <MudListSubheader Class=""mt-4 pb-2"">Files</MudListSubheader>
            <MudDropZone T=""DropItem"" DraggingClass=""mud-alert-text-normal"" Identifier=""Files"" Class=""d-flex flex-wrap flex-grow-1 pa-2 rounded"" />
        </div>
        <div class=""d-flex flex-column flex-grow-1"">
            <MudListSubheader Class=""mt-4 pb-2"">MudBlazor Secrets</MudListSubheader>
            <MudDropZone T=""DropItem"" DraggingClass=""mud-alert-text-error"" ItemDraggingClass=""mud-error-text"" Identifier=""MudBlazor"" Class=""d-flex flex-wrap flex-grow-1 pa-2 rounded"" />
        </div>
    </ChildContent>
    <ItemRenderer>
        <div Class=""rounded mud-paper-outlined d-flex align-center pa-3 ma-2"">
            <MudIcon Icon=""@(context.Identifier == ""Folders"" ? Icons.Custom.Uncategorized.Folder : Icons.Custom.FileFormats.FileDocument)"" Color=""Color.Inherit"" Class=""mr-2""/>
            @context.Name
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Wallpapers"", Identifier = ""Folders"" },
        new DropItem(){ Name = ""Propaganda"", Identifier = ""Folders"" },
        new DropItem(){ Name = ""Funny, Dank, Meme"", Identifier = ""Folders"" },
        new DropItem(){ Name = ""Work"", Identifier = ""Folders"" },
        new DropItem(){ Name = ""Photos"", Identifier = ""Folders"" },
        new DropItem(){ Name = ""Untitled spreadsheet"", Identifier = ""Files"" },
        new DropItem(){ Name = ""LoseLips.txt"", Identifier = ""Files"" },
        new DropItem(){ Name = ""Untitled document"", Identifier = ""Files"" },
        new DropItem(){ Name = ""GoonSwarmBestSwarm.png"", Identifier = ""Files"" },
        new DropItem(){ Name = ""co2traitors.txt"", Identifier = ""Files"" },
        new DropItem(){ Name = ""import.csv"", Identifier = ""Files"" },
        new DropItem(){ Name = ""planned_components_2022-2023.txt"", Identifier = ""MudBlazor"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string DropZoneDropRulesExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Place == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-column flex-grow-1"">
    <ChildContent>
        <div class=""d-flex flex-wrap justify-space-between"">
            <MudDropZone T=""DropItem"" Identifier=""Compost"" CanDrop=""@((item) => item.Type == ItemType.Compost)"" Class=""rounded-lg mud-alert-text-success pa-4 ma-4 flex-grow-1"">
                <MudText Typo=""Typo.button"" Class=""ma-2"">Compost Bin</MudText>
            </MudDropZone>
            <MudDropZone T=""DropItem"" Identifier=""Recycle"" CanDrop=""@((item) => item.Type == ItemType.Recycle)"" Class=""rounded-lg mud-alert-text-warning pa-4 ma-4 flex-grow-1"">
                <MudText Typo=""Typo.button"" Class=""ma-2"">Recycle Bin</MudText>
            </MudDropZone>
            <MudDropZone T=""DropItem"" Identifier=""Trash"" CanDrop=""@((item) => item.Type == ItemType.Trash)"" Class=""rounded-lg mud-alert-text-info pa-4 ma-4 flex-grow-1"">
                <MudText Typo=""Typo.button"" Class=""ma-2"">Trash Bin</MudText>
            </MudDropZone>
        </div>
        <MudDropZone T=""DropItem"" Identifier=""Street"" CanDrop=""@((item) => false)"" Class=""rounded-lg mud-alert-text-normal pa-4 mt-6 mx-4 flex-grow-1 d-flex flex-wrap""/>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation=""25"" Class=""pa-4 ma-2"">@context.Name</MudPaper>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Place = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Apple Core"", Type = ItemType.Compost, Place = ""Street"" },
        new DropItem(){ Name = ""Banana Peel"", Type = ItemType.Compost, Place = ""Street"" },
        new DropItem(){ Name = ""Old Battery"", Type = ItemType.Trash, Place = ""Street"" },
        new DropItem(){ Name = ""Pizza Box"", Type = ItemType.Recycle, Place = ""Street"" },
        new DropItem(){ Name = ""Moldy Bread"", Type = ItemType.Compost, Place = ""Street"" },
        new DropItem(){ Name = ""Paper Bag"", Type = ItemType.Recycle, Place = ""Street"" },
        new DropItem(){ Name = ""Uranium-235"", Type = ItemType.Trash, Place = ""Street"" },
    };
    
    public class DropItem
    {
        public string Name { get; set; }
        public ItemType Type { get; set; }
        public string Place { get; set; }
    }

    public enum ItemType
    {
        Compost,
        Recycle,
        Trash
    }
}";

        public const string DropZoneItemSelectorExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Selector == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap flex-grow-1"">
    <ChildContent>
        @for (int i = 1; i < 4; i++) 
         {
             var dropzone = i.ToString();
             <MudPaper Class=""ma-4 flex-grow-1"">
                 <MudList Clickable=""true"" Class=""d-flex flex-column mud-height-full"">
                     <MudListSubheader>Drop Zone @dropzone</MudListSubheader>
                     <MudDropZone T=""DropItem"" Identifier=""@dropzone"" Class=""flex-grow-1"" />
                 </MudList>
             </MudPaper>
         }
    </ChildContent>
    <ItemRenderer>
        <MudListItem Text=""@context.Name""/>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Item 1"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 2"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 3"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 4"", Selector = ""2"" },
        new DropItem(){ Name = ""Item 5"", Selector = ""2"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Selector { get; set; }
    }
}";

        public const string DropZoneItemSelectorOnlyZoneExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" Item ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-column flex-grow-1"">
    <ChildContent>
        <MudListSubheader Class=""mt-4 pb-2"">Folders</MudListSubheader>
        <div class=""d-flex gap-4 mx-4"">
            <MudDropZone T=""DropItem"" OnlyZone=""true"" Identifier=""Propaganda"">
                <MudPaper Outlined=""true"" Class=""d-flex align-center pa-3 gap-2"">
                    <MudIcon Icon=""@Icons.Custom.Uncategorized.Folder"" Color=""Color.Inherit"" />Propaganda
                </MudPaper>
            </MudDropZone>
           <MudDropZone T=""DropItem"" OnlyZone=""true"" Identifier=""Work"">
                <MudPaper Outlined=""true"" Class=""d-flex align-center pa-3 gap-2"">
                    <MudIcon Icon=""@Icons.Custom.Uncategorized.Folder"" Color=""Color.Inherit"" />Work
                </MudPaper>
            </MudDropZone>
        </div>
        <MudListSubheader Class=""mt-4 pb-2"">Files</MudListSubheader>
        <MudDropZone T=""DropItem"" Identifier=""Files"" Class=""d-flex flex-wrap flex-grow-1 pa-2 rounded"" />
    </ChildContent>
    <ItemRenderer>
        <div Class=""rounded mud-paper-outlined d-flex align-center pa-3 ma-2"">
            <MudIcon Icon=""@(context.Identifier == ""Folders"" ? Icons.Custom.Uncategorized.Folder : Icons.Custom.FileFormats.FileDocument)"" Color=""Color.Inherit"" Class=""mr-2""/>
            @context.Name
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Untitled document"", Identifier = ""Files"" },
        new DropItem(){ Name = ""GoonSwarmBestSwarm.png"", Identifier = ""Files"" },
        new DropItem(){ Name = ""co2traitors.txt"", Identifier = ""Files"" },
        new DropItem(){ Name = ""import.csv"", Identifier = ""Files"" },
        new DropItem(){ Name = ""planned_components_2022-2023.txt"", Identifier = ""Files"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string DropZoneItemSelectorReorderingExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Selector == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap flex-grow-1"">
    <ChildContent>
        @for (int i = 1; i < 4; i++) 
         {
             var dropzone = i.ToString();
             <MudPaper Class=""ma-4 flex-grow-1"">
                 <MudList Clickable=""true"" Class=""d-flex flex-column mud-height-full"">
                     <MudListSubheader>Drop Zone @dropzone</MudListSubheader>
                     <MudDropZone T=""DropItem"" Identifier=""@dropzone"" Class=""flex-grow-1"" AllowReorder=""true"" />
                 </MudList>
             </MudPaper>
         }
    </ChildContent>
    <ItemRenderer>
        <MudListItem Text=""@context.Name""/>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Item 1"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 2"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 3"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 4"", Selector = ""2"" },
        new DropItem(){ Name = ""Item 5"", Selector = ""2"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Selector { get; set; }
    }
}";

        public const string DropZoneKanbanExample = @"@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

<MudDropContainer T=""KanbanTaskItem"" @ref=""_dropContainer"" Items=""@_tasks"" ItemsSelector=""@((item,column) => item.Status == column)"" ItemDropped=""TaskUpdated"" Class=""d-flex flex-row"">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation=""0"" Width=""224px"" MinHeight=""400px"" Class=""pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg"">
				<MudToolBar DisableGutters=""true"">
					<MudText Typo=""Typo.subtitle1""><b>@item.Name</b></MudText>
					<MudSpacer />
					<MudMenu Icon=""@Icons.Material.Rounded.MoreHoriz"" AnchorOrigin=""Origin.BottomRight"" TransformOrigin=""Origin.TopRight"" ListClass=""pa-2 d-flex flex-column"" PopoverClass=""mud-elevation-25"">
						<MudButton Size=""Size.Small"" Color=""Color.Error"" StartIcon=""@Icons.Outlined.Delete"" OnClick=""@( () => DeleteSection(item))"">Delete Section</MudButton>
						<MudButton Size=""Size.Small"" Color=""Color.Default"" StartIcon=""@Icons.Rounded.Edit"">Rename Section</MudButton>
					</MudMenu>
				</MudToolBar>
				<MudDropZone T=""KanbanTaskItem"" Identifier=""@item.Name"" Class=""mud-height-full"" />
				@if (item.NewTaskOpen)
				{
					<MudPaper Elevation=""25"" Class=""pa-2 rounded-lg"">
						<MudTextField @bind-Value=""item.NewTaskName"" Placeholder=""New Task"" DisableUnderLine=""true"" Margin=""Margin.Dense"" Class=""mx-2 mt-n2""></MudTextField>
						<MudButton OnClick=""@(() => AddTask(item))"" Size=""Size.Small"" Color=""Color.Primary"" FullWidth=""true"">Add Task</MudButton>
					</MudPaper>
				}
				else
				{
					<MudButton OnClick=""@(() => item.NewTaskOpen = !item.NewTaskOpen)"" StartIcon=""@Icons.Filled.Add"" FullWidth=""true"" Class=""rounded-lg py-2"">Add Task</MudButton>
				}
			</MudPaper>
		}
		<MudPaper Class=""pa-4"" Elevation=""0"" Width=""224px"">
			@if (_addSectionOpen)
			{
				<MudPaper Elevation=""0"" Width=""224px"" Class=""pa-4 d-flex flex-column mud-background-gray rounded-lg"">
					<EditForm Model=""@newSectionModel"" OnValidSubmit=""OnValidSectionSubmit"">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value=""newSectionModel.Name"" For=""@(() => newSectionModel.Name)"" Placeholder=""New Section"" DisableUnderLine=""true""></MudTextField>
						<MudButton ButtonType=""ButtonType.Submit"" Size=""Size.Small"" Color=""Color.Primary"" FullWidth=""true"">Add Section</MudButton>
					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick=""OpenAddNewSection"" Variant=""Variant.Outlined"" StartIcon=""@Icons.Filled.Add"" Color=""Color.Primary"" Class=""rounded-lg py-2"" FullWidth=""true"">Add Section</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudPaper Elevation=""25"" Class=""pa-4 rounded-lg my-3"">@context.Name</MudPaper>
	</ItemRenderer>
</MudDropContainer>

@code {
	private MudDropContainer<KanbanTaskItem> _dropContainer;

	private bool _addSectionOpen;
	/* handling board events */
	private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
	{
		info.Item.Status = info.DropzoneIdentifier;
	}

	/* Setup for board  */
	private List<KanBanSections> _sections = new()
		{
			new KanBanSections(""To Do"", false, String.Empty),
			new KanBanSections(""In Process"", false, String.Empty),
			new KanBanSections(""Done"", false, String.Empty),
		};

	public class KanBanSections
	{
		public string Name { get; init; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }

		public KanBanSections(string name, bool newTaskOpen, string newTaskName)
		{
			Name = name;
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
		}
	}
	public class KanbanTaskItem
	{
		public string Name { get; init; }
		public string Status { get; set; }

		public KanbanTaskItem(string name, string status)
		{
			Name = name;
			Status = status;
		}
	}

	private List<KanbanTaskItem> _tasks = new()
		{
			new KanbanTaskItem(""Write unit test"", ""To Do""),
			new KanbanTaskItem(""Some docu stuff"", ""To Do""),
			new KanbanTaskItem(""Walking the dog"", ""To Do""),
		};

	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = ""Name length can't be more than 10."")]
		public string Name { get; set; }
	}

	private void OnValidSectionSubmit(EditContext context)
	{
		_sections.Add(new KanBanSections(newSectionModel.Name, false, String.Empty));
		newSectionModel.Name = string.Empty;
		_addSectionOpen = false;
	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}

	private void AddTask(KanBanSections section)
	{
		_tasks.Add(new KanbanTaskItem(section.NewTaskName, section.Name));
		section.NewTaskName = string.Empty;
		section.NewTaskOpen = false;
		_dropContainer.Refresh();
	}

	private void DeleteSection(KanBanSections section)
	{
		if (_sections.Count == 1)
		{
			_tasks.Clear();
			_sections.Clear();
		}
		else
		{
			int newIndex = _sections.IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections.Remove(section);

			var tasks = _tasks.Where(x => x.Status == section.Name);
			foreach (var item in tasks)
			{
				item.Status = _sections[newIndex].Name;
			}
		}
	}
}";

        public const string DropZoneMailExample = @"@using Microsoft.AspNetCore.Components

<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" ItemDropped=""ItemUpdated"">
    <ChildContent>
        <MudPaper MinHeight=""500px"" Class=""d-flex flex-1"">
            <MudList Clickable=""true"" Dense=""true"" @bind-SelectedValue=""_selectedFolder"">
                <MudListSubheader>MailBox</MudListSubheader>
                <MudDropZone T=""DropItem"" Identifier=""Inbox"" OnlyZone=""true"">
                    <MudListItem Text=""Inbox"" Value=""@(""Inbox"")"" Icon=""@Icons.Filled.Inbox""/>
                </MudDropZone>
                <MudDropZone T=""DropItem"" Identifier=""Sent"" OnlyZone=""true"">
                    <MudListItem Text=""Sent"" Value=""@(""Sent"")"" Icon=""@Icons.Filled.Send""/>
                </MudDropZone>
                <MudDropZone T=""DropItem"" Identifier=""Drafts"" OnlyZone=""true"">
                    <MudListItem Text=""Drafts"" Value=""@(""Drafts"")"" Icon=""@Icons.Filled.Drafts""/>
                </MudDropZone>
                <MudListItem Icon=""@Icons.Material.Filled.Label"" Text=""Categories"" InitiallyExpanded=""true"">
                    <NestedList>
                        <MudDropZone T=""DropItem"" Identifier=""Social"" OnlyZone=""true"">
                            <MudListItem Dense=""true"" Text=""Social"" Value=""@(""Social"")"" Icon=""@Icons.Filled.Group"" Class=""pl-8""/>
                        </MudDropZone>
                        <MudDropZone T=""DropItem"" Identifier=""Forums"" OnlyZone=""true"">
                            <MudListItem Dense=""true"" Text=""Forums"" Value=""@(""Forums"")"" Icon=""@Icons.Filled.Forum"" Class=""pl-8""/>
                        </MudDropZone>
                    </NestedList>
                </MudListItem>
            </MudList>
            <MudDivider Vertical=""true"" FlexItem=""true"" />
            <MudList Dense=""true"" Clickable=""true"" Class=""d-flex flex-column flex-grow-1 py-0"">
                <MudToolBar DisableGutters=""true"" Dense=""true"">
                    <MudCheckBox @bind-Checked=""@ToolbarCheckBox""/>
                    <MudIconButton Icon=""@Icons.Material.Filled.Refresh""/>
                    <MudIconButton Icon=""@Icons.Material.Filled.MoreVert""/>
                    <MudSpacer/>
                    <MudIconButton Icon=""@Icons.Material.Filled.ChevronLeft""/>
                    <MudIconButton Icon=""@Icons.Material.Filled.ChevronRight""/>
                </MudToolBar>
                <MudDivider/>
                <MudDropZone T=""DropItem"" Identifier=""@_selectedFolder.ToString()"" Class=""flex-grow-1""/>
            </MudList>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudListItem Text=""@context.Name""/>
        <MudDivider/>
    </ItemRenderer>
</MudDropContainer>

@code {
    public bool ToolbarCheckBox { get; set; } = false;
    object _selectedFolder = ""Inbox"";
    
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Your exchange rate and Klarna benefits here"", Identifier = ""Inbox"" },
        new DropItem(){ Name = ""IKEA - Betalningsbekräftelse för din order"", Identifier = ""Inbox"" },
        new DropItem(){ Name = ""Leverans beställd till dig​"", Identifier = ""Inbox"" },
        new DropItem(){ Name = ""You’ve Got Sales! Cotton Bureau On Demand Report for Thursday, February 24, 2022"", Identifier = ""Inbox"" },
        new DropItem(){ Name = ""Answer: Offer to buy mudblazor"", Identifier = ""Drafts"" },
        new DropItem(){ Name = ""Inloggningsvarning för Facebook Messenger for Android"", Identifier = ""Social"" },
        new DropItem(){ Name = ""Nya privata meddelanden på SweClockers"", Identifier = ""Forums"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string DropZoneOverrideExample = @"<MudDropContainer T=""DropItem"" DraggingClass=""mud-alert-text-warning"" ItemDraggingClass=""mud-alert-text-warning"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" NoDropClass=""mud-border-error"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap flex-grow-1"">
    <ChildContent>
        <MudDropZone T=""DropItem"" Identifier=""Enterprise"" DraggingClass=""mud-alert-text-info"" ItemDraggingClass=""mud-alert-text-info"" Class=""rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8"" CanDrop=""@((item) => item.Team == ""BLUE"")"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">USS Enterprise</MudText>
         </MudDropZone>
        <MudDropZone T=""DropItem"" Identifier=""Air Zone 1"" Class=""rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8 flex-grow-1"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">Air Zone 1</MudText>
        </MudDropZone>
        <MudDropZone T=""DropItem"" Identifier=""Air Zone 2"" Class=""rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8 flex-grow-1"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">Air Zone 2</MudText>
        </MudDropZone>
        <MudDropZone T=""DropItem"" Identifier=""Danger Zone"" DraggingClass=""mud-alert-text-error"" ItemDraggingClass=""mud-alert-text-error"" CanDrop=""@((item) => item.Team == ""RED"")"" Class=""rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">Danger Zone</MudText>
        </MudDropZone>
    </ChildContent>
    <ItemRenderer>
        <div class=""mud-elevation-25 pa-4 my-4"">@context.Name</div>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Grumman"", Team = ""BLUE"", Identifier = ""Enterprise"" },
        new DropItem(){ Name = ""Tomcat"", Team = ""BLUE"", Identifier = ""Enterprise"" },
        new DropItem(){ Name = ""McDonnell"", Team = ""BLUE"", Identifier = ""Enterprise"" },
        new DropItem(){ Name = ""Frogfoot"", Team = ""RED"", Identifier = ""Danger Zone"" },
        new DropItem(){ Name = ""Fulcrum"", Team = ""RED"", Identifier = ""Danger Zone"" },
        new DropItem(){ Name = ""Fullback"", Team = ""RED"", Identifier = ""Danger Zone"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Team { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string DropZoneReorderSaveExample = @"@using MudBlazor.Utilities

<div class=""d-flex flex-column mud-width-full mud-height-full"">
	<MudToolBar Class=""gap-4"">
		<MudButton OnClick=""LoadServerData"" Variant=""Variant.Filled"" Color=""Color.Default"">Load Data</MudButton>
		<MudButton OnClick=""SaveData"" Variant=""Variant.Filled"" Color=""Color.Primary"">Save Data</MudButton>
		<MudSpacer />
		<MudButton OnClick=""Reset"" Variant=""Variant.Text"" Color=""Color.Error"">Reset Example</MudButton>
	</MudToolBar>

	<MudDropContainer T=""DropItem"" Items=""@_dropzoneItems"" @ref=""_container"" ItemsSelector=""@((item,dropzone) => item.Selector == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap flex-grow-1"">
		<ChildContent>
			@for (int i = 1; i < 3; i++)
			{
				var dropzone = i.ToString();
				<MudPaper Class=""ma-4 flex-grow-1"">
					<MudList Clickable=""true"" Class=""d-flex flex-column mud-height-full"">
						<MudListSubheader>Drop Zone @dropzone</MudListSubheader>
						<MudDropZone T=""DropItem"" Identifier=""@dropzone"" Class=""flex-grow-1"" AllowReorder=""true"" />
					</MudList>
				</MudPaper>
			}
		</ChildContent>
		<ItemRenderer>
			<MudListItem Text=""@($""{context.Name} ({context.Order})"")"" />
		</ItemRenderer>
	</MudDropContainer>
</div>
@code {
	private MudDropContainer<DropItem> _container;

	private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
	{
		dropItem.Item.Selector = dropItem.DropzoneIdentifier;

		var indexOffset = dropItem.DropzoneIdentifier switch
		{
			""2""  => _serverData.Count(x => x.Selector == ""1""),
			_ => 0,
		};

		_serverData.UpdateOrder(dropItem, item => item.Order, indexOffset);
	}

	private List<DropItem> _dropzoneItems = new();

	private List<DropItem> _serverData = new()
		{
			new DropItem() { Order = 0, Name = ""Item 1"", Selector = ""1"" },
			new DropItem() { Order = 1, Name = ""Item 2"", Selector = ""1"" },
			new DropItem() { Order = 2, Name = ""Item 3"", Selector = ""1"" },
			new DropItem() { Order = 3, Name = ""Item 4"", Selector = ""1"" },
			new DropItem() { Order = 4, Name = ""Item 5"", Selector = ""1"" },
			new DropItem() { Order = 5, Name = ""Item 6"", Selector = ""1"" },
			new DropItem() { Order = 6, Name = ""Item 7"", Selector = ""2"" },
			new DropItem() { Order = 7, Name = ""Item 8"", Selector = ""2"" },
			new DropItem() { Order = 8, Name = ""Item 9"", Selector = ""2"" },
			new DropItem() { Order = 9, Name = ""Item 10"", Selector = ""2"" },
		};

	private void RefreshContainer()
	{
		//update the binding to the container
		StateHasChanged();

		//the container refreshes the internal state
		_container.Refresh();
	}

	private void LoadServerData()
	{
		List<DropItem> newdata = new List<DropItem>();

		foreach (var item in _serverData.OrderBy(x => x.Order))
		{
			newdata.Add(item);
		}

		_dropzoneItems = newdata;
		RefreshContainer();
	}

	private void SaveData() => _serverData = _dropzoneItems;

	private void Reset()
	{
		_dropzoneItems = new();
		_serverData = new()
			{
				new DropItem() { Order = 0, Name = ""Item 1"", Selector = ""1"" },
				new DropItem() { Order = 1, Name = ""Item 2"", Selector = ""1"" },
				new DropItem() { Order = 2, Name = ""Item 3"", Selector = ""1"" },
				new DropItem() { Order = 3, Name = ""Item 4"", Selector = ""1"" },
				new DropItem() { Order = 4, Name = ""Item 5"", Selector = ""1"" },
				new DropItem() { Order = 5, Name = ""Item 6"", Selector = ""1"" },
				new DropItem() { Order = 6, Name = ""Item 7"", Selector = ""2"" },
				new DropItem() { Order = 7, Name = ""Item 8"", Selector = ""2"" },
				new DropItem() { Order = 8, Name = ""Item 9"", Selector = ""2"" },
				new DropItem() { Order = 9, Name = ""Item 10"", Selector = ""2"" },
			};

		RefreshContainer();
	}

	public class DropItem
	{
		public string Name { get; init; }
		public string Selector { get; set; }
		public int Order { get; set; }
	}
}";

        public const string DropZoneUsageExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap flex-grow-1"">
    <ChildContent>
        <MudDropZone T=""DropItem"" Identifier=""Drop Zone 1"" Class=""rounded mud-background-gray pa-6 ma-8 flex-grow-1"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">Drop Zone 1</MudText>
         </MudDropZone>
        <MudDropZone T=""DropItem"" Identifier=""Drop Zone 2"" Class=""rounded mud-background-gray pa-6 ma-8 flex-grow-1"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">Drop Zone 2</MudText>
        </MudDropZone>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation=""25"" Class=""pa-4 my-4"">@context.Name</MudPaper>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Drag me!"", Identifier = ""Drop Zone 1"" },
        new DropItem(){ Name = ""Or me!"", Identifier = ""Drop Zone 2"" },
        new DropItem(){ Name = ""Just Mud"", Identifier = ""Drop Zone 1"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string MudElementChangingExample = @"<MudElement HtmlTag=""@htmlTag"">
    This renders an <code style=""color:red;"">@htmlTag</code>  tag
</MudElement>

<MudButton OnClick=""ChangeTag"" Variant=""Variant.Filled"" Color=""Color.Secondary"">Change tag</MudButton>

@code{ 

    private string htmlTag=""h1"";
    private int hNumber = 2;

    private void ChangeTag()
    {
        htmlTag = ""h"" + hNumber;
        hNumber++;
        if (hNumber > 3) hNumber = 1;
    }
}";

        public const string MudElementRefExample = @"<MudElement HtmlTag=""button"" @onclick=""Focus"" Style=""padding: 4px 12px 4px 12px; background-color: #0067b8; color: #fff;"">
    Click to focus
</MudElement>

@*this element is going to be focused through JS and its reference*@

<MudElement @bind-Ref=""myRef"" HtmlTag=""input"" Style=""border: solid 1px #869E9E; padding: 0px 8px; height:28px;""/>

@code{
    ElementReference myRef = new ElementReference();

    async Task Focus()
    {
        //this js snippet does `document.querySelector(myRef).focus();`
       await myRef.FocusAsync();
    }
}";

        public const string MudElementSimpleExample = @"Visit our
<MudElement HtmlTag=""a""
            Class=""ma-0""
            Style=""color:red;font-weight:bold;""
            href=""https://github.com/MudBlazor/MudBlazor""
            target=""blank""
            rel=""noopener noreferrer"">
    Github page
</MudElement>";

        public const string ExpansionPanelAsyncExample = @"<MudExpansionPanels>
    <MudExpansionPanel Text=""Panel with async loaded contents"" MaxHeight=""1000"" IsExpandedChanged=""ExpandedChanged"">
        @_panelContent
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private RenderFragment _panelContent;

    private async Task ExpandedChanged(bool newVal)
    {
        if (newVal)
        {
            await Task.Delay(600);
            _panelContent = _bigAsyncContent;
        }
        else
        {
            // Reset after a while to prevent sudden collapse.
            Task.Delay(350).ContinueWith(t => _panelContent = null).AndForget(); 
        }
    }

    private RenderFragment _bigAsyncContent = __builder =>
    {
        <div>The expansion of the</div>
        <div>inner panel is done after</div>
        <div>IsExpandedChanged</div>
        <div>has completed to allow for</div>
        <div>smooth opening of async data</div>
        <div>of initially unknown height.</div>
    };
}";

        public const string ExpansionPanelDisableBorderExample = @"<MudExpansionPanels DisableBorders=""true"" Elevation=""0"">
    <MudExpansionPanel Text=""Panel One"">
        Panel One Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Two"">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Three"">
        Panel Three Content
    </MudExpansionPanel>
</MudExpansionPanels>";

        public const string ExpansionPanelDisabledExample = @"<MudExpansionPanels>
    <MudExpansionPanel Text=""Panel One"">
        Panel One Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Two"" Disabled=""true"">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Three"">
        Panel Three Content
    </MudExpansionPanel>
</MudExpansionPanels>";

        public const string ExpansionPanelMultiExample = @"<MudExpansionPanels MultiExpansion=""true"">
    <MudExpansionPanel Text=""Panel One"">
        Panel One Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Two"">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Three"">
        Panel Three Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Four"">
        Panel Four Content
    </MudExpansionPanel>
</MudExpansionPanels>";

        public const string ExpansionPanelPaddingExample = @"<MudExpansionPanels>
    <MudExpansionPanel Text=""Dense"" Dense=""true"">
        Dense Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Gutters"" DisableGutters=""true"">
        Gutters Content
    </MudExpansionPanel>
</MudExpansionPanels>
<MudExpansionPanels Dense=""true"" DisableGutters=""true"" Class=""mt-6"">
    <MudExpansionPanel Text=""Dense & Gutters from parent"">
        Dense & Gutters Content
    </MudExpansionPanel>
</MudExpansionPanels>";

        public const string ExpansionPanelSimpleExample = @"<MudExpansionPanels>
    <MudExpansionPanel Text=""Panel One"" MaxHeight=""150"">
        Panel One Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Two"" MaxHeight=""500"">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Three"" MaxHeight=""1000"">
        Panel Three Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Four"">
        Panel Four Content
    </MudExpansionPanel>
</MudExpansionPanels>";

        public const string ExpansionPanelTitleExample = @"<div class=""mx-auto""  style=""max-width: 400px;"">
    <MudExpansionPanels>
        <MudExpansionPanel>
            <TitleContent>
                <div class=""d-flex"">
                    <MudIcon Icon=""@Icons.Material.Filled.Info"" class=""mr-3""></MudIcon>
                    <MudText>Panel header as <strong>RenderFragment</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                Panel Content
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel Text=""The icon of this panel is hidden"" HideIcon=""true"">
            Panel Content
        </MudExpansionPanel>
        <MudExpansionPanel HideIcon=""true"">
            <TitleContent>
                <div class=""d-flex"">
                    <MudText Class=""mt-1"">Inbox</MudText>
                    <MudBadge Content=""3"" Color=""Color.Primary"" Overlap=""true"" Class=""d-flex ml-auto"">
                        <MudIcon Icon=""@Icons.Material.Filled.Email"" Color=""Color.Default"" />
                    </MudBadge>
                </div>
            </TitleContent>
            <ChildContent>
                Panel Content
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel @bind-IsExpanded=""isOpen"" HideIcon=""true"">
            <TitleContent>
                <div class=""d-flex"">
                    <MudText>Overriding standard icon with own icon</MudText>
                    <MudIcon Icon=""@(isOpen ? Icons.Material.Filled.Close : Icons.Material.Filled.Add)"" class=""ml-auto""></MudIcon>
                </div>
            </TitleContent>
            <ChildContent>
                Panel Content
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
</div>

@code
{
    bool isOpen;
}";

        public const string FieldBasicExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Standard"" Variant=""Variant.Text"">Some Content <MudIcon Icon=""@Icons.Material.Filled.Favorite"" Color=""@Color.Warning"" /> follows here</MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Filled"" Variant=""Variant.Filled"">Some Content <MudIcon Icon=""@Icons.Material.Filled.Favorite"" Color=""@Color.Warning"" /> follows here</MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Outlined"" Variant=""Variant.Outlined"">Some Content <MudIcon Icon=""@Icons.Material.Filled.Favorite"" Color=""@Color.Warning"" /> follows here</MudField>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Standard"" Variant=""Variant.Text""></MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Filled"" Variant=""Variant.Filled""></MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Outlined"" Variant=""Variant.Outlined""></MudField>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Standard"" Variant=""Variant.Text"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.CheckCircle"" AdornmentColor=""Color.Success""></MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Filled"" Variant=""Variant.Filled"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Money""></MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Outlined"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.Warning"" AdornmentColor=""Color.Warning""></MudField>
    </MudItem>
</MudGrid>";

        public const string FieldLabelPlaceholderExample = @"<MudGrid>
    <MudItem xs=""12"" md=""6"" lg=""4"">       
        <MudField Label=""What am I?"" ChildContent=""@content""
                  Variant=""Variant.Outlined"">            
        </MudField>
        <br/>
        <MudSwitch T=""bool"" Color=""Color.Primary"" CheckedChanged=""@((b) => content=b?rf1:null)""/> Switch between Label and Placeholder
    </MudItem>
    <MudItem xs=""12"" md=""6"" lg=""4"">       
        <MudField Label=""Pick a color"" Variant=""Variant.Outlined"">
            <input type=""color"" @bind-value=""color""/><span class=""ml-3"">@color</span>
        </MudField>
    </MudItem>
</MudGrid>

@code {
    RenderFragment content = null;
    RenderFragment rf1 = @<MudText Typo=""@Typo.h6"">I Am Field</MudText>;
    string color=""#6cf014"";
}";

        public const string FieldMinimizePaddingExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudField Label=""Example with RadioGroup"" Variant=""Variant.Text"" InnerPadding=""false"">
            <MudRadioGroup T=""string"">
                <MudRadio T=""string"">Option 1</MudRadio>
                <MudRadio T=""string"">Option 2</MudRadio>
                <MudRadio T=""string"">Option 3</MudRadio>
            </MudRadioGroup>
        </MudField>
    </MudItem>
    <MudItem xs=""12"">
        <MudField Label=""Example with RadioGroup"" Variant=""Variant.Filled"" InnerPadding=""false"">
            <MudRadioGroup T=""string"">
                <MudRadio T=""string"">Option 1</MudRadio>
                <MudRadio T=""string"">Option 2</MudRadio>
                <MudRadio T=""string"">Option 3</MudRadio>
            </MudRadioGroup>
        </MudField>
    </MudItem>
    <MudItem xs=""12"">
        <MudField Label=""Example with RadioGroup"" Variant=""Variant.Outlined"" InnerPadding=""false"">
            <MudRadioGroup T=""string"">
                <MudRadio T=""string"">Option 1</MudRadio>
                <MudRadio T=""string"">Option 2</MudRadio>
                <MudRadio T=""string"">Option 3</MudRadio>
            </MudRadioGroup>
        </MudField>
    </MudItem>
</MudGrid>";

        public const string DragAndDropFileUploadExample = @"@inject ISnackbar Snackbar

<MudPaper @ondragenter=""@SetDragClass"" @ondragleave=""@ClearDragClass"" @ondragend=""@ClearDragClass"" Height=""300px"" Outlined=""true"" Class=""@DragClass"">
    @if (!Clearing)
    {
        <InputFile OnChange=""OnInputFileChanged"" multiple  class=""absolute mud-width-full mud-height-full overflow-hidden z-2"" style=""opacity:0;"" />
    }
    <MudText Typo=""Typo.h6"">Drag and drop files here or click</MudText>
    @foreach (var file in fileNames)
    {
        <MudChip Color=""Color.Dark"" Text=""@file"" />
    }
</MudPaper>
<MudToolBar DisableGutters=""true"" Class=""gap-4"">
    <MudButton OnClick=""Upload"" Disabled=""@(!fileNames.Any())"" Color=""Color.Primary"" Variant=""Variant.Filled"">Upload</MudButton>
    <MudButton OnClick=""Clear"" Disabled=""@(!fileNames.Any())"" Color=""Color.Error"" Variant=""Variant.Filled"">Clear</MudButton>
</MudToolBar>

@code {
    private bool Clearing = false;
    private static string DefaultDragClass = ""relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full"";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach(var file in files)
        {
            fileNames.Add(file.Name);
        }
    }

    private async Task Clear()
    {
        Clearing = true;
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
        Clearing = false;
    }
    private void Upload()
    {
        //Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add(""TODO: Upload your files!"", Severity.Normal);
    }

    private void SetDragClass()
    {
        DragClass = $""{DefaultDragClass} mud-border-primary"";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}";

        public const string FileUploadButtonExample = @"<InputFile id=""fileInput"" OnChange=""UploadFiles"" hidden multiple />

<MudButton HtmlTag=""label""
           Variant=""Variant.Filled""
           Color=""Color.Primary""
           StartIcon=""@Icons.Filled.CloudUpload""
           for=""fileInput"">
    Upload Files
</MudButton>

<MudFab HtmlTag=""label""
        Color=""Color.Secondary""
        Icon=""@Icons.Filled.Image""
        Label=""Load picture""
        for=""fileInput"" />

<MudFab HtmlTag=""label""
        Color=""Color.Success""
        Icon=""@Icons.Filled.AttachFile""
        for=""fileInput"" />

<MudIconButton HtmlTag=""label""
               Color=""Color.Info""
               Icon=""@Icons.Filled.PhotoCamera""
               for=""fileInput"">
</MudIconButton>

@if (files != null)
{
    <MudText Typo=""@Typo.h6"">@files.Count() File@(files.Count() == 1 ? """" : ""s""):</MudText>
    <MudList>
    @foreach (var file in files)
    {
     <MudListItem Icon=""@Icons.Filled.AttachFile"" @key=""@file"">
         @file.Name <code>@file.Size bytes</code>
     </MudListItem>
    }
    </MudList>
}

@code
{
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        //TODO upload the files to the server
    }
}";

        public const string FileUploadIconButtonExample = @"<label  style=""
        box-shadow: 0 2px 7px #4caf50;
        display: inline-flex;
        width: 150px;
        justify-content: space-around;
        border-radius: 2em;
        color: white;
        border:2px solid;
        cursor: pointer;
        align-items: center;
        padding:16px;
        background-color: #4caf50;""         
       for=""fileInput2"">
    Upload <MudIcon Icon=""@Icons.Filled.CloudUpload""/>
</label>

<InputFile id=""fileInput2"" OnChange=""UploadFiles"" hidden multiple />

@if (files != null)
{
    <MudList>
        @foreach (var file in files)
        {
            <MudListItem Icon=""@Icons.Filled.AttachFile"">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}

@code
{
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        //TODO upload the files to the server
    }
}";

        public const string FileUploadValidationExample = @"@inject ISnackbar Snackbar
<InputFile id=""fileInput112"" OnChange=""UploadFiles"" hidden multiple accept="".jpg, .jpeg, .png"" />

<MudButton HtmlTag=""label""
           Variant=""Variant.Filled""
           Color=""Color.Primary""
           StartIcon=""@Icons.Filled.CloudUpload""
           for=""fileInput112"">
    Upload your images
</MudButton>


@code
{
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        var entries = e.GetMultipleFiles();
        //Do your validations here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add($""Files with {entries.FirstOrDefault().Size} bytes size are not allowed"", Severity.Error);
        Snackbar.Add($""Files starting with letter {entries.FirstOrDefault().Name.Substring(0, 1)} are not recommended"", Severity.Warning);
        Snackbar.Add($""This file has the extension {entries.FirstOrDefault().Name.Split(""."").Last()}"", Severity.Info);

        //TODO upload the files to the server
    }
}";

        public const string FocusTrapUsageExample = @"<div class=""d-flex mb-4"">
    <MudCheckBox @bind-Checked=""Disabled"" Label=""Disabled""></MudCheckBox>
    <MudSelect @bind-Value=""DefaultFocus"" Label=""Default Focus"" Dense=""true"" Class=""ml-4"">
        <MudSelectItem Value=""DefaultFocus.None"">None</MudSelectItem>
        <MudSelectItem Value=""DefaultFocus.Element"">Element</MudSelectItem>
        <MudSelectItem Value=""DefaultFocus.FirstChild"">FirstChild</MudSelectItem>
        <MudSelectItem Value=""DefaultFocus.LastChild"">LastChild</MudSelectItem>
    </MudSelect>
</div>

<MudTextField T=""string"" Variant=""Variant.Outlined""></MudTextField>

<MudPaper Class=""pa-4"">
    <MudFocusTrap Disabled=""Disabled"" DefaultFocus=""DefaultFocus"">
        <MudTextField T=""string"" Variant=""Variant.Outlined""></MudTextField>
        <MudTextField T=""string"" Variant=""Variant.Outlined""></MudTextField>
        <MudTextField T=""string"" Variant=""Variant.Outlined""></MudTextField>
    </MudFocusTrap>
</MudPaper>

<MudTextField T=""string"" Variant=""Variant.Outlined""></MudTextField>

@code {

    bool Disabled { get; set; }

    DefaultFocus DefaultFocus { get; set; } = DefaultFocus.FirstChild;
 }";

        public const string EditFormExample = @"@using System.ComponentModel.DataAnnotations

<EditForm Model=""@model"" OnValidSubmit=""OnValidSubmit"">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs=""12"" sm=""7"">
        <MudCard>
            <MudCardContent>
                <MudTextField Label=""First name"" HelperText=""Max. 8 characters""
                              @bind-Value=""model.Username"" For=""@(() => model.Username)""/>
                <MudTextField Label=""Email"" Class=""mt-3""
                              @bind-Value=""model.Email"" For=""@(() => model.Email)""/>
                <MudTextField Label=""Password"" HelperText=""Choose a strong password"" Class=""mt-3""
                              @bind-Value=""model.Password"" For=""@(() => model.Password)"" InputType=""InputType.Password""/>
                <MudTextField Label=""Password"" HelperText=""Repeat the password"" Class=""mt-3""
                              @bind-Value=""model.Password2"" For=""@(() => model.Password2)"" InputType=""InputType.Password""/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType=""ButtonType.Submit"" Variant=""Variant.Filled"" Color=""Color.Primary"" Class=""ml-auto"">Register</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs=""12"" sm=""5"">
        <MudPaper Class=""pa-4 mud-height-full"">
            <MudText Typo=""Typo.subtitle2"">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color=""Color.Success"">Success</MudText>
            }
            else
            {
                <MudText Color=""@Color.Error"">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"">
        <MudText Typo=""Typo.body2"" Align=""Align.Center"">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>


@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = ""Name length can't be more than 8."")]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = ""Password must be at least 8 characters long."", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

}";

        public const string FluentValidationComplexExample = @"@using FluentValidation

<MudCard>
	<MudForm Model=""@model"" @ref=""@form"" Validation=""@(orderValidator.ValidateValue)"" ValidationDelay=""0"">
		<MudCardContent>
				<MudTextField @bind-Value=""model.Name""                              
							  For=""@(() => model.Name)""
							  Immediate=""true""
							  Label=""Name"" />

				<MudTextField @bind-Value=""model.Email""
							  For=""@(() => model.Email)""
							  Immediate=""true""
							  Label=""Email"" />

				<MudTextField @bind-Value=""model.CCNumber""
							  For=""@(() => model.CCNumber)""
							  Immediate=""true""
							  Label=""Credit card nr"" />

				<MudTextField @bind-Value=""model.Address.Address""
							  For=""@(() => model.Address.Address)""
							  Immediate=""true""
							  Label=""Address"" />

				<MudTextField @bind-Value=""model.Address.City""
							  For=""@(() => model.Address.City)""
							  Immediate=""true""
							  Label=""City"" />

				<MudTextField @bind-Value=""model.Address.Country""
							  For=""@(() => model.Address.Country)""
							  Immediate=""true""
							  Label=""Country"" />
        </MudCardContent>
		<MudCardContent Class=""pa-0"">

			<MudTable Items=""@model.OrderDetails"" Hover=""true"" Breakpoint=""Breakpoint.None"" Dense=""@true"" Elevation=""0"">
				<HeaderContent>
					<MudTh>Description</MudTh>
					<MudTh>Offer</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel=""Description"">
						<MudForm Model=""@context"" Validation=@(orderDetailsValidator.ValidateValue)>
  							<MudTextField Label=""Enter Description"" 
                              @bind-Value=""context.Description"" 
                              For=""(() => context.Description)"" />
  						</MudForm>
					</MudTd>
					<MudTd DataLabel=""Offer"">
						<MudForm Model=""@context"">
  							<MudNumericField Label=""Enter Offer"" 
                                               @bind-Value=""context.Offer"" 
                                               Validation=@(orderDetailsValidator.ValidateValue)
                                               For=""(() => context.Offer)"" />
  						</MudForm>
					</MudTd>
				</RowTemplate>
			</MudTable>

		</MudCardContent>
	</MudForm>
    <MudCardActions>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Class=""ml-auto"" OnClick=""@(async () => await Submit())"">Order</MudButton>
    </MudCardActions>
</MudCard>

@code {
	[Inject] ISnackbar Snackbar { get; set; }

    MudForm form;

    OrderModelFluentValidator orderValidator = new OrderModelFluentValidator();

	OrderDetailsModelFluentValidator orderDetailsValidator = new OrderDetailsModelFluentValidator();

    OrderModel model = new OrderModel();

    public class OrderModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string CCNumber { get; set; } = ""4012 8888 8888 1881"";
        public AddressModel Address { get; set; } = new AddressModel();
		public List<OrderDetailsModel> OrderDetails = new List<OrderDetailsModel>()
		{
			new OrderDetailsModel()
				{
					Description = ""Perform Work order 1"",
					Offer = 100
				},
			new OrderDetailsModel()
		};
	}

    public class AddressModel
    {
        public string Address { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
    }

	public class OrderDetailsModel
	{
		public string Description { get; set; }
		public decimal Offer { get; set; }
	}

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Snackbar.Add(""Submited!"");
        }
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name=""OrderModel""></typeparam>
    public class OrderModelFluentValidator : AbstractValidator<OrderModel>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1,100);

            RuleFor(x => x.Email)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .EmailAddress()
                .MustAsync(async (value, cancellationToken) => await IsUniqueAsync(value));

            RuleFor(x => x.CCNumber)
                .NotEmpty()
                .Length(1,100)
                .CreditCard();

            RuleFor(x => x.Address.Address)
                .NotEmpty()
                .Length(1,100);

            RuleFor(x => x.Address.City)
                .NotEmpty()
                .Length(1,100);

            RuleFor(x => x.Address.Country)
                .NotEmpty()
                .Length(1,100);

			RuleForEach(x => x.OrderDetails)
				.SetValidator(new OrderDetailsModelFluentValidator());
		}

        private async Task<bool> IsUniqueAsync(string email)
        {
            // Simulates a long running http call
            await Task.Delay(2000);
            return email.ToLower() != ""test@test.com"";
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<OrderModel>.CreateWithOptions((OrderModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

	/// <summary>
    /// A standard AbstractValidator for the Collection Object
    /// </summary>
    /// <typeparam name=""OrderDetailsModel""></typeparam>
    public class OrderDetailsModelFluentValidator : AbstractValidator<OrderDetailsModel>
    {
        public OrderDetailsModelFluentValidator()
        {
            RuleFor(x => x.Description)
                .NotEmpty()
                .Length(1,100);

			RuleFor(x => x.Offer)
				.GreaterThan(0)
				.LessThan(999);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<OrderDetailsModel>.CreateWithOptions((OrderDetailsModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}";

        public const string FluentValidationExample = @"@using FluentValidation

<MudPaper Class=""pa-4"">
    <MudForm>
        <MudTextField @bind-Value=""creditCardNr"" Validation=""@ccValidator.Validation"" Immediate=""true"" Label=""Credit card nr"" />
    </MudForm>
</MudPaper>

@code { 
    // This is a valid Visa test card number
    string creditCardNr = ""4012 8888 8888 1881"";

    // The validation rules (overkill, I know, but very fluent):
    FluentValueValidator<string> ccValidator = new FluentValueValidator<string>(x => x
        .NotEmpty()
        .Length(1,100)
        .CreditCard());

    /// <summary>
    /// A glue class to make it easy to define validation rules for single values using FluentValidation
    /// You can reuse this class for all your fields, like for the credit card rules above.
    /// </summary>
    /// <typeparam name=""T""></typeparam>
    public class FluentValueValidator<T> : AbstractValidator<T>
    {
        public FluentValueValidator(Action<IRuleBuilderInitial<T, T>> rule)
        {
            rule(RuleFor(x => x));
        }

        private IEnumerable<string> ValidateValue(T arg)
        {
            var result = Validate(arg);
            if (result.IsValid)
                return new string[0];
            return result.Errors.Select(e => e.ErrorMessage);
        }

        public Func<T, IEnumerable<string>> Validation => ValidateValue;
    }
}";

        public const string LabelAttributeExample = @"@using System.ComponentModel.DataAnnotations

<MudCard>
    <MudForm>
        <MudCardContent>
            <MudDatePicker For=""@(() => model.Date)"" />
            <MudDatePicker For=""@(() => model.Date)"" Label=""Parameter Label"" />
            <MudSwitch For=""@(() => model.Boolean)"" />
            <MudSwitch For=""@(() => model.Boolean)"" Label=""Parameter Label"" />
            <MudTextField For=""@(() => model.String)"" />
            <MudTextField For=""@(() => model.String)"" Label=""Parameter Label"" />
        </MudCardContent>
    </MudForm>
</MudCard>

@code {
    DisplayNameLabelClass model = new();

    public class DisplayNameLabelClass
    {
        [Label(""Date LabelAttribute"")]
        public DateTime? Date { get; set; }
        [Label(""Boolean LabelAttribute"")]
        public bool Boolean { get; set; }
        [Label(""String LabelAttribute"")]
        public string String { get; set; }
    }
}";

        public const string MudFormExample = @"@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>
    <MudItem xs=""12"" sm=""7"">
        <MudPaper Class=""pa-4"">
            <MudForm @ref=""form"" @bind-IsValid=""@success"" @bind-Errors=""@errors"">
                    <MudTextField T=""string"" Label=""Username"" Required=""true"" RequiredError=""User name is required!""/>
                    <MudTextField T=""string"" Label=""Email"" Required=""true"" RequiredError=""Email is required!""
                                  Validation=""@(new EmailAddressAttribute() {ErrorMessage = ""The email address is invalid""})""/>
                    <MudTextField T=""string"" Label=""Password"" HelperText=""Choose a strong password"" @ref=""pwField1""
                                  InputType=""InputType.Password""
                                  Validation=""@(new Func<string, IEnumerable<string>>(PasswordStrength))"" Required=""true""
                                  RequiredError=""Password is required!""/>
                    <MudTextField T=""string""
                                  Label=""Password"" HelperText=""Repeat the password"" InputType=""InputType.Password""
                                  Validation=""@(new Func<string, string>(PasswordMatch))""/>
                    <div class=""d-flex"">
                        <MudRadioGroup T=""string"" Required=""true"" RequiredError=""Account type is required!"">
                            <MudRadio Option=""@(""Personal"")"">Personal</MudRadio>
                            <MudRadio Option=""@(""Professional"")"">Professional</MudRadio>
                        </MudRadioGroup>
                    </div>
                    <div class=""d-flex align-center justify-space-between"">
                        <MudCheckBox T=""bool"" Required=""true"" RequiredError=""You must agree"" Label=""I agree!""  />
                        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Disabled=""@(!success)"" Class=""ml-auto"">Register</MudButton>
                    </div>
            </MudForm>   
        </MudPaper>
        <MudPaper Class=""pa-4 mt-4"">
            <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" DisableElevation=""true"" OnClick=""@(()=>form.Validate())"">Validate</MudButton>
            <MudButton Variant=""Variant.Filled"" Color=""Color.Secondary"" DisableElevation=""true"" OnClick=""@(()=>form.Reset())"" Class=""mx-2"">Reset</MudButton>
            <MudButton Variant=""Variant.Filled"" DisableElevation=""true"" OnClick=""@(()=>form.ResetValidation())"">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" sm=""5"">
        <MudPaper Class=""pa-4 mud-height-full"">
            <MudText Typo=""Typo.subtitle2"">@($""Errors ({errors.Length})"")</MudText>
                @foreach (var error in errors)
                {
                    <MudText Color=""@Color.Error"">@error</MudText>
                }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return ""Password is required!"";
            yield break;
        }
        if (pw.Length < 8)
            yield return ""Password must be at least of length 8"";
        if (!Regex.IsMatch(pw, @""[A-Z]""))
            yield return ""Password must contain at least one capital letter"";
        if (!Regex.IsMatch(pw, @""[a-z]""))
            yield return ""Password must contain at least one lowercase letter"";
        if (!Regex.IsMatch(pw, @""[0-9]""))
            yield return ""Password must contain at least one digit"";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return ""Passwords don't match"";
        return null;
    }

}";

        public const string ValidateIfDirtyExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""pa-4"">
            <MudText><CodeInline>OnlyValidateIfDirty=""false""</CodeInline> (default behavior)</MudText>
            <MudForm >
                <MudTextField T=""string"" Label=""Username"" Required=""true"" RequiredError=""User name is required!""/>
            </MudForm>
        </MudPaper>
    </MudItem>
    
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""pa-4"">
            <MudText><CodeInline>OnlyValidateIfDirty=""true""</CodeInline></MudText>
            <MudForm >
                <MudTextField T=""string"" Label=""Username"" Required=""true"" RequiredError=""User name is required!"" OnlyValidateIfDirty=""true""/>
            </MudForm>
        </MudPaper>
    </MudItem>

</MudGrid>";

        public const string GridBasicExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=12</MudPaper>
    </MudItem>
    <MudItem xs=""6"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6</MudPaper>
    </MudItem>
    <MudItem xs=""6"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=3</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=3</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=3</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=3</MudPaper>
    </MudItem>
</MudGrid>";

        public const string GridBuilderExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudSlider Min=""1"" Max=""20"" Immediate=""true"" Step=""1"" @bind-Value=""papers""></MudSlider>
    </MudItem>
    <MudItem xs=""12"">
        <MudSelect Label=""Justify"" T=""Justify"" @bind-Value=""justification"">
            <MudSelectItem Value=""Justify.FlexStart"">Flex Start</MudSelectItem>
            <MudSelectItem Value=""Justify.FlexEnd"">Flex End</MudSelectItem>
            <MudSelectItem Value=""Justify.Center"">Center</MudSelectItem>
            <MudSelectItem Value=""Justify.SpaceAround"">Space Around</MudSelectItem>
            <MudSelectItem Value=""Justify.SpaceBetween"">Space Between</MudSelectItem>
            <MudSelectItem Value=""Justify.SpaceEvenly"">Space Evenly</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"">
        <MudGrid Justify=""justification"">
            @for (int i = 0; i < papers; i++)
            {
                int localindex = i;
                
                <MudItem xs=""@breaks[localindex]"">
                    <MudPaper Class=""d-flex flex-column align-center justify-center mud-width-full py-8"">
                        <MudIconButton Icon=""@Icons.Material.Filled.KeyboardArrowUp"" OnClick=""(()=>UpdateBreaks(localindex,1))"" Size=""Size.Small"" />
                        <MudText Typo=""Typo.h6"" Align=""Align.Center"">@breaks[localindex]</MudText>
                        <MudIconButton Icon=""@Icons.Material.Filled.KeyboardArrowDown"" OnClick=""(()=>UpdateBreaks(localindex,-1))"" Size=""Size.Small"" />
                    </MudPaper>
                </MudItem>
             }
        </MudGrid>
    </MudItem>
</MudGrid>

@code{

    int _papers = 7;
    int papers { get { return _papers; } set { UpdatePapers(value); } }

    int[] breaks = new int[7] { 3, 4, 2, 3, 3, 2, 4 };

    Justify justification = Justify.FlexStart;

    void UpdatePapers(int value)
    {

        int[] newbreaks = Enumerable.Repeat(3, value).ToArray();

        for (int i = 0; i < newbreaks.Length; i++)
        {
            if ( i < breaks.Length)
            {
                newbreaks[i] = breaks[i];
            }
        }

        breaks = newbreaks;

        _papers = value;

        StateHasChanged();
    }

    void UpdateBreaks(int index,int changeamount)
    {
        List<int> newbreaks = breaks.ToList();
        if (newbreaks[index] + changeamount > 12 || newbreaks[index] + changeamount < 1) return; //don't go above 12 or below 1
        newbreaks[index] += changeamount;

        breaks = newbreaks.ToArray();

        StateHasChanged();
    }

}";

        public const string GridSpacingExample = @"<MudSlider @bind-Value=""spacing"" Min=""0"" Max=""10"" Color=""Color.Info"" Class=""mb-6"">Spacing: @spacing.ToString()</MudSlider>

<MudGrid Spacing=""@spacing"" Justify=""Justify.Center"">
    <MudItem>
        <MudPaper Height=""140px"" Width=""140px""/>
    </MudItem>
    <MudItem>
        <MudPaper Height=""140px"" Width=""140px""/>
    </MudItem>
    <MudItem>
        <MudPaper Height=""140px"" Width=""140px"" />
    </MudItem>
</MudGrid>


@code {
    public int spacing { get; set; } = 2;
}";

        public const string GridWithBreakpointsExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=12</MudPaper>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=12 sm=6</MudPaper>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=12 sm=6</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6 sm=3</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6 sm=3</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6 sm=3</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6 sm=3</MudPaper>
    </MudItem>
</MudGrid>";

        public const string BrowserResizeEventExample = @"@using MudBlazor.Services
@implements IAsyncDisposable

<MudAlert Severity=Severity.Warning>
	MudBlazor 5.2 introduced new implementations for handling browser resize events.
	The <strong>IResizeListenerService</strong> can still be used but we strongly encourage you to move to the 
	<strong>IResizeService </strong>
</MudAlert>

<MudCard Class=""pa-5"">
    <MudText>
        Resize the window and see width and height change:<br />
        Browser window is @(width)x@(height)px
    </MudText>
</MudCard>

@code
{
	[Inject] IResizeService ResizeService { get; set; }

    int width = 0;
    int height = 0;

	private Guid _subscriptionId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
			_subscriptionId = await ResizeService.Subscribe((size) =>
			{
				width = size.Width;
				height = size.Height;
				InvokeAsync(StateHasChanged);
			}, new ResizeOptions
			{
				ReportRate = 50,
				NotifyOnBreakpointOnly = false,
			});

            var size = await ResizeService.GetBrowserWindowSize();
            height = size.Height;
            width = size.Width;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await ResizeService.Unsubscribe(_subscriptionId);
}";

        public const string HiddenExample = @"@using MudBlazor.Services

<MudHidden Breakpoint=""Breakpoint.Xl"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>XL</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Lg"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>LG</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Md"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>MD</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Sm"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>SM</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Xs"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>XS</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.LgAndUp"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>LG and Up</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.MdAndUp"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>MD and Up</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.SmAndUp"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>SM and Up</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.LgAndDown"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>LG and Down</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.MdAndDown"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>MD and Down</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.SmAndDown"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>SM and Down</MudText>
	</MudCard>
</MudHidden>


@code {
}";

        public const string HighlighterUntilNextBoundaryExample = @"<MudTextField Style=""max-width:250px"" @bind-Value=""@highlightedText"" Immediate=""true"" Label=""Highlighted Text"" />
<MudPaper Class=""pa-4 mt-4"" Elevation=""0"">
    @foreach (var paragraph in paragraphs)
    {
        <MudText @key=""paragraph"" Class=""ma-2"">
            <MudHighlighter Text=""@paragraph""
                         HighlightedText=""@highlightedText""
                         UntilNextBoundary=""@untilNextBoundary""
                         CaseSensitive=""@caseSensitive""
                         Class=""@(untilNextBoundary ? ""pa-1 mud-elevation-2 mud-theme-primary"":"""")"" />
        </MudText>
    }

</MudPaper>
<MudSwitch @bind-Checked=""@untilNextBoundary"" Label=""UntilNextBoundary"" Color=""Color.Primary"" />
<MudSwitch @bind-Checked=""@caseSensitive"" Label=""CaseSensitive"" Color=""Color.Primary"" />


@code{
    string highlightedText = ""Mud"";
    bool untilNextBoundary;
    bool caseSensitive;
    IEnumerable<string> paragraphs = new List<string>
    {
        ""MudBlazor is an ambitious Material Design component framework for Blazor with an emphasis on ease of use and clear structure."",
        ""MudLists are easily customizable and scrollable lists. Make them suit your needs with avatars, icons, or something like checkboxes."",
        ""Use mud-* classes to customize your MudBlazor components.""
    };
}";

        public const string HighlighterWithCustomStyleExample = @"<MudPaper Elevation=""0"">
    <MudList>
        <MudListSubheader>
            <MudTextField @bind-Value=""@searchTerm"" AdornmentIcon=""@Icons.Filled.Brush""
                          Adornment=""Adornment.End"" Immediate=""true"" Variant=""Variant.Outlined"" />
        </MudListSubheader>

        @foreach (var sentence in sentences)
        {
            <MudListItem @key=""sentence"" Icon=""@Icons.Filled.Folder"">
                <MudHighlighter Class=""mud-primary-text""
                             Style=""background-color:transparent;font-weight:bold""
                             Text=""@sentence""
                             HighlightedText=""@searchTerm"" />
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    string searchTerm = ""it"";
    IEnumerable<string> sentences = new List<string>
    {
        ""This is the first item"", ""This is the second item"", ""This is the third item""
    };
}";

        public const string HighlighterWithListExample = @"<MudPaper Elevation=""0"">
    <MudList>
        <MudListSubheader>
            <MudTextField @bind-Value=""@searchTerm"" AdornmentIcon=""@Icons.Filled.Brush""
                          Adornment=""Adornment.End"" Immediate=""true"" Variant=""Variant.Outlined"" />
        </MudListSubheader>

        @foreach (var sentence in sentences)
        {
            <MudListItem @key=""sentence"" Icon=""@Icons.Filled.Folder"">
                <MudHighlighter Text=""@sentence"" HighlightedText=""@searchTerm"" />
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    string searchTerm = ""item"";
    IEnumerable<string> sentences = new List<string>
    {
        ""This is the first item"", ""This is the second item"", ""This is the third item""
    };
}";

        public const string HighlighterWithListMultipleExample = @"<MudPaper Elevation=""0"">
    <MudList>
        <MudListSubheader>
            <MudTextField @bind-Value=""searchTerm"" AdornmentIcon=""@Icons.Filled.People""
                          Adornment=""Adornment.End"" Immediate=""true"" Variant=""Variant.Outlined""
                          Label=""Names to search""/>
        </MudListSubheader>

        @{
            string[] searchTerms = searchTerm.Split(split);
            for (int i = 0; i < searchTerms.Length; i++)
                searchTerms[i] = searchTerms[i].Trim();
        }
        @foreach (var name in names)
        {
            <MudListItem @key=""name"" Icon=""@Icons.Filled.Person"">
                <MudHighlighter Text=""@name"" HighlightedTexts=""@searchTerms"" />
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    string searchTerm = ""William Jordan, Oliver"";
    IEnumerable<string> names = new List<string>
    {
        ""William Jordan"", ""Oliver Jones"", ""William Johnson"", ""Daniel Williams"", ""Oliver Simpson""
    };
    static readonly char[] split = new char[] { ';', ',', '.' };
}";

        public const string HighlighterWithTableExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@GetElements()"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value=""_searchTerm"" Placeholder=""Search"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0"" Immediate=""true""></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Name</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel=""Name"">
            <MudHighlighter Text=""@context.Name"" HighlightedText=""@_searchTerm"" />
        </MudTd>
    </RowTemplate>

</MudTable>

@code {
    private string _searchTerm = ""H"";
    private IEnumerable<Element> _elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        _elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    private IEnumerable<Element> GetElements() => _elements.Where(e => e.Name.Contains(_searchTerm));
}";

        public const string IconButtonFontIconExample = @"<link href=""https://use.fontawesome.com/releases/v5.14.0/css/all.css"" rel=""stylesheet"">

<MudIconButton Icon=""fas fa-atom"" Color=""Color.Error""></MudIconButton>
<MudIconButton Icon=""fas fa-fighter-jet"" Color=""Color.Dark""></MudIconButton>
<MudIconButton Icon=""fas fa-globe-europe"" Color=""Color.Tertiary""></MudIconButton>
<MudIconButton Icon=""fas fa-bug"" Disabled=""true""></MudIconButton>";

        public const string IconButtonSimpleExample = @"<MudIconButton Icon=""@Icons.Material.Filled.Delete"" aria-label=""delete""></MudIconButton>
<MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Primary"" aria-label=""github""></MudIconButton>
<MudIconButton Icon=""@Icons.Material.Filled.Favorite"" Color=""Color.Secondary"" aria-label=""add to favorite""></MudIconButton>
<MudIconButton Icon=""@Icons.Material.Filled.Share"" Disabled=""true"" aria-label=""share""></MudIconButton>";

        public const string IconButtonStyleExample = @"<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Outlined"" Color=""Color.Primary"" Size=""Size.Small"" />
<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Outlined"" Color=""Color.Primary"" Size=""Size.Medium""/>
<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Outlined"" Color=""Color.Primary"" Size=""Size.Large"" />
<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Large"" />
<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Medium"" />
<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Small"" />";

        public const string ChangeIconByProgrammaticallyExample = @"<MudIcon Icon=""@selectedIcon"" Color=""Color.Primary"" />
<MudButton Variant=""Variant.Filled"" OnClick=""ChangeIcon"" DisableElevation=""true"" Size=""Size.Small"">Change Icon</MudButton>


@code{

    private string selectedIcon = Icons.Custom.Brands.MudBlazor;

    private void ChangeIcon()
    {
        if (selectedIcon == Icons.Custom.Brands.MudBlazor)
        {
            selectedIcon = Icons.Custom.Brands.GitHub;
        }
        else
        {
            selectedIcon = Icons.Custom.Brands.MudBlazor;
        }
    }
}";

        public const string IconsColorExample = @"<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Default"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Primary"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Secondary"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Success"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Info"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Warning"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Error"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Dark"" />";

        public const string IconsFontAwesomeExample = @"<link href=""https://use.fontawesome.com/releases/v5.14.0/css/all.css"" rel=""stylesheet"">

<MudIcon Icon=""fab fa-internet-explorer"" Color=""Color.Primary"" />
<MudIcon Icon=""fab fa-angellist"" Color=""Color.Secondary"" />
<MudIcon Icon=""fas fa-dragon"" Color=""Color.Success"" />
<MudIcon Icon=""fas fa-toilet-paper-slash"" />
<MudIcon Icon=""fas fa-toilet-paper-slash"" Size=""Size.Small"" />
<MudIcon Icon=""fas fa-toilet-paper-slash"" Size=""Size.Large"" />";

        public const string IconsMaterialVariantsExample = @"<MudIcon Icon=""@Icons.Material.Filled.ThumbUp"" Style=""font-size: 4rem;"" />
<MudIcon Icon=""@Icons.Material.Outlined.ThumbUp""  Style=""font-size: 4rem;"" />
<MudIcon Icon=""@Icons.Material.Rounded.ThumbUp""  Style=""font-size: 4rem;"" />
<MudIcon Icon=""@Icons.Material.Sharp.ThumbUp""  Style=""font-size: 4rem;"" />
<MudIcon Icon=""@Icons.Material.TwoTone.ThumbUp""  Style=""font-size: 4rem;"" />";

        public const string IconsSizeExample = @"<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Size=""Size.Small"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Size=""Size.Large"" />";

        public const string IconsUsageExample = @"<MudIcon Icon=""@Icons.Material.Filled.Favorite"" Title=""Favorite"" />
<MudIcon Icon=""@Icons.Material.Filled.Api"" Title=""API"" />
<MudIcon Icon=""@Icons.Material.Filled.AddCircle"" Title=""Add"" />
<MudIcon Icon=""@Icons.Custom.Brands.GitHub"" Title=""GitHub"" />
<MudIcon Icon=""@Icons.Custom.Brands.Google"" Title=""Google"" />
<MudIcon Icon=""@Icons.Custom.Brands.Reddit"" Title=""Reddit"" />";

        public const string ImageFitExample = @"<div class=""d-flex justify-center"">
    <MudImage ObjectFit=""@ImageFit"" Height=""200"" Width=""400"" Src=""images/castle.jpg"" Alt=""Örebro Slott""  Elevation=""25"" Class=""rounded-lg""/>
</div>

<MudChipSet Filter=""true"" Mandatory=""true"" Class=""mt-12"">
    <MudChip Text=""None"" OnClick=""@(() => SetImageFit(ObjectFit.None))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Cover"" OnClick=""@(() => SetImageFit(ObjectFit.Cover))"" SelectedColor=""Color.Primary"" Default=""true""/>
    <MudChip Text=""Contain"" OnClick=""@(() => SetImageFit(ObjectFit.Contain))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Fill"" OnClick=""@(() => SetImageFit(ObjectFit.Fill))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""ScaleDown"" OnClick=""@(() => SetImageFit(ObjectFit.ScaleDown))"" SelectedColor=""Color.Primary"" />
</MudChipSet>

@code {
    ObjectFit ImageFit = ObjectFit.Cover;

    void SetImageFit(ObjectFit value)
    {
        ImageFit = value;
    }
}";

        public const string ImagePlaygroundExample = @"<MudGrid>
    <MudItem xs=""12"" md=""8"" Class=""d-flex justify-center align-center"" Style=""height:500px;"">
        <MudImage ObjectFit=""ImageFit"" Height=""@(SetHeight ? ImageHeight : null)"" Width=""@(SetWidth ? ImageWidth : null)"" Src=""@($""images/{Image}"")"" Alt=""Mony the dog"" Elevation=""25"" Class=""rounded-lg""/>
    </MudItem>
    <MudItem xs=""12"" md=""4"">
        <MudPaper Class=""pa-4 mt-6 mt-lg-16"" Elevation=""0"">
            <MudText Typo=""Typo.h6"">Options</MudText>
            <MudSelect Label=""Image"" AnchorOrigin=""Origin.BottomCenter"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""Image"" Class=""mt-4"">
                <MudSelectItem T=""string"" Value=""@(""tractor.jpg"")"">Tractor</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""door.jpg"")"">Door</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""castle.jpg"")"">Castle</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""iceland.jpg"")"">Iceland</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""pilars.jpg"")"">Pilars</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""sweden.jpg"")"">Sweden</MudSelectItem>
            </MudSelect>
            <MudSelect Label=""Image Fit"" AnchorOrigin=""Origin.BottomCenter"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""ImageFit"" Class=""mt-4"">
                <MudSelectItem T=""ObjectFit"" Value=""ObjectFit.None"">None</MudSelectItem>
                <MudSelectItem T=""ObjectFit"" Value=""ObjectFit.Cover"">Cover</MudSelectItem>
                <MudSelectItem T=""ObjectFit"" Value=""ObjectFit.Contain"">Contain</MudSelectItem>
                <MudSelectItem T=""ObjectFit"" Value=""ObjectFit.Fill"">Fill</MudSelectItem>
                <MudSelectItem T=""ObjectFit"" Value=""ObjectFit.ScaleDown"">ScaleDown</MudSelectItem>
            </MudSelect>
            <div class=""d-flex justify-space-between align-center mt-4"">
                <MudText>Width: @(SetWidth ? $""{ImageWidth}px"" : ""Auto"")</MudText>
                <MudSwitch @bind-Checked=""@SetWidth"" Color=""Color.Primary"" Class=""mr-0"" />
            </div>
            <MudSlider @bind-Value=""@ImageWidth"" Disabled=""@(!SetWidth)"" Max=""400"" Color=""Color.Primary""/>
            <div class=""d-flex justify-space-between align-center mt-4"">
                <MudText>Height: @(SetHeight ? $""{ImageHeight}px"" : ""Auto"")</MudText>
                <MudSwitch @bind-Checked=""@SetHeight"" Color=""Color.Secondary"" Class=""mr-0"" />
            </div>
            <MudSlider @bind-Value=""@ImageHeight"" Disabled=""@(!SetHeight)"" Max=""350"" Color=""Color.Secondary""/>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public string Image { get; set; } = ""tractor.jpg"";
    
    public bool SetHeight { get; set; } = false;
    public bool SetWidth { get; set; } = true;
    
    public int ImageHeight { get; set; } = 300;
    public int ImageWidth { get; set; } = 300;

    public ObjectFit ImageFit { get; set; } = ObjectFit.Cover;

}";

        public const string ImagePositionExample = @"<div class=""d-flex justify-center"">
    <MudImage ObjectFit=""ObjectFit.None"" ObjectPosition=""@ImagePosition"" Height=""200"" Width=""400"" Src=""images/iceland.jpg"" Alt=""Öxarárfoss, Iceland""  Elevation=""25"" Class=""rounded-lg""/>
</div>

<MudChipSet Filter=""true"" Mandatory=""true"" Class=""mt-12"">
    <MudChip Text=""Center"" OnClick=""@(() => SetImagePosition(ObjectPosition.Center))"" SelectedColor=""Color.Primary"" Default=""true"" />
    <MudChip Text=""Top"" OnClick=""@(() => SetImagePosition(ObjectPosition.Top))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Bottom"" OnClick=""@(() => SetImagePosition(ObjectPosition.Bottom))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Left"" OnClick=""@(() => SetImagePosition(ObjectPosition.Left))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Left Top"" OnClick=""@(() => SetImagePosition(ObjectPosition.LeftTop))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Left Bottom"" OnClick=""@(() => SetImagePosition(ObjectPosition.LeftBottom))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Right"" OnClick=""@(() => SetImagePosition(ObjectPosition.Right))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Right Top"" OnClick=""@(() => SetImagePosition(ObjectPosition.RightTop))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Right Bottom"" OnClick=""@(() => SetImagePosition(ObjectPosition.RightBottom))"" SelectedColor=""Color.Primary"" />
</MudChipSet>

@code {
    ObjectPosition ImagePosition = ObjectPosition.Center;

    void SetImagePosition(ObjectPosition value)
    {
        ImagePosition = value;
    }
}";

        public const string ImageResponsiveExample = @"<MudImage Fluid=""true"" Src=""images/iceland.jpg"" Alt=""Swedish Farm House"" Class=""rounded-lg""/>";

        public const string ImageSizeExample = @"<MudImage Src=""images/sweden.jpg"" Width=""200"" Height=""150"" Alt=""Swedish Farm House"" Elevation=""25"" Class=""rounded-lg ma-4""/>
<MudImage Src=""images/sweden.jpg"" Width=""332"" Height=""250"" Alt=""Swedish Farm House"" Elevation=""25"" Class=""rounded-lg ma-4""/>";

        public const string ImageUsageExample = @"<MudImage Src=""images/mony.jpg"" Alt=""Mony the dog"" Elevation=""25"" Class=""rounded-lg""/>";

        public const string LinkSimpleExample = @"<MudLink Href=""#"">Default</MudLink>
<MudLink Href=""#"" Typo=""Typo.body2"">Different Typography</MudLink>
<MudLink Href=""#"" Disabled=""true"">Disabled link</MudLink>";

        public const string LinkUnderlineExample = @"<MudLink Href=""#"">Default</MudLink>
<MudLink Href=""#"" Underline=""Underline.Always"">Always</MudLink>
<MudLink Href=""#"" Underline=""Underline.None"">None</MudLink>";

        public const string ListColorExample = @"<MudStack Row=""true"">
    <MudPaper Width=""300px"">
        <MudList Clickable=""true"" @bind-SelectedItem=""selectedItem"" @bind-SelectedValue=""selectedValue"" Color=""_color"">
            <MudListSubheader>
                Select Your Character:
            </MudListSubheader>
            <MudListItem Text=""Neutral"" Value=""1"" />
            <MudListItem Text=""Good"">
                <NestedList>
                    <MudListItem Text=""Frodo Baggins"" Value=""2"" />
                    <MudListItem Text=""Harry Potter"" Value=""3"" />
                </NestedList>
            </MudListItem>
            <MudListItem Text=""Evil"">
                <NestedList>
                    <MudListItem Text=""Sauron"" Value=""5"" />
                    <MudListItem Text=""Voldemort"" Value=""6"" />
                    <MudListItem Text=""Mckaragoz"" Value=""7"" />
                </NestedList>
            </MudListItem>
            <MudListItem Disabled=""true"" Text=""Im not hero"" Value=""7"" />
        </MudList>
    </MudPaper>
    <MudPaper Class=""pe-4"">
        <MudRadioGroup T=""Color"" @bind-SelectedOption=""_color"" Class=""d-flex flex-column"">
            <MudRadio Option=""Color.Primary"" Color=""Color.Primary"">Primary</MudRadio>
            <MudRadio Option=""Color.Secondary"" Color=""Color.Secondary"">Secondary</MudRadio>
            <MudRadio Option=""Color.Tertiary"" Color=""Color.Tertiary"">Tertiary</MudRadio>
            <MudRadio Option=""Color.Info"" Color=""Color.Info"">Info</MudRadio>
            <MudRadio Option=""Color.Success"" Color=""Color.Success"">Success</MudRadio>
            <MudRadio Option=""Color.Warning"" Color=""Color.Warning"">Warning</MudRadio>
        </MudRadioGroup>
    </MudPaper>
</MudStack>

@code{
    MudListItem selectedItem;
    object selectedValue = 1;
    Color _color = Color.Primary;
}";

        public const string ListFolderExample = @"<MudPaper Width=""300px"">
    <MudList>
        <MudListItem Avatar=""@Icons.Material.Filled.Image"">
            Photos
        </MudListItem>
        <MudListItem Avatar=""@Icons.Material.Filled.Work"">
            Work
        </MudListItem>
        <MudListItem Avatar=""@Icons.Material.Filled.Umbrella"">
            Vacation
        </MudListItem>
    </MudList>
</MudPaper>";

        public const string ListInteractiveExample = @"<MudGrid>
    <MudItem xs=""12"" md=""12"">
        <MudCheckBox @bind-Checked=""@Dense"" Label=""Dense"" Color=""Color.Default"" />
        <MudCheckBox @bind-Checked=""@Clickable"" Label=""Clickable"" Color=""Color.Primary"" />
        <MudCheckBox @bind-Checked=""@Gutters"" Label=""Disable Gutters"" Color=""Color.Secondary"" />
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudText Typo=""Typo.h6"" GutterBottom=""true"">Text only</MudText>
        <MudPaper Width=""100%"">
            <MudList Clickable=""@Clickable"" Dense=""@Dense"" DisableGutters=""@Gutters"">
                <MudListItem Text=""Single List Item"" />
                <MudListItem Text=""Single List Item"" />
                <MudListItem Text=""Single List Item"" />
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudText Typo=""Typo.h6"" GutterBottom=""true"">Icons with text</MudText>
        <MudPaper Width=""100%"">
            <MudList Clickable=""@Clickable"" Dense=""@Dense"" DisableGutters=""@Gutters"">
                <MudListItem Text=""Single List Item"" Icon=""@Icons.Filled.Bookmark"" />
                <MudListItem Text=""Single List Item"" Icon=""@Icons.Filled.Bookmark"" IconColor=""Color.Primary"" />
                <MudListItem Text=""Single List Item"" Icon=""@Icons.Filled.Bookmark"" IconColor=""Color.Secondary"" />
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudText Typo=""Typo.h6"" GutterBottom=""true"">Avatar with text</MudText>
        <MudPaper Width=""100%"">
            <MudList Clickable=""@Clickable"" Dense=""@Dense"" DisableGutters=""@Gutters"">
                <MudListItem Text=""Single List Item"" Avatar=""@Icons.Filled.Image"" />
                <MudListItem Text=""Single List Item"" Avatar=""@Icons.Filled.Image"" IconColor=""Color.Dark"" />
                <MudListItem Text=""Single List Item"" Avatar=""@Icons.Filled.Image"" IconColor=""Color.Error"" />
            </MudList>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    public bool Dense { get; set; }
    public bool Clickable { get; set; }
    public bool Gutters { get; set; }
}";

        public const string ListNestedExample = @"<MudPaper Width=""300px"">
    <MudList Clickable=""true"">
        <MudListSubheader>
            Nested List Items
        </MudListSubheader>
        <MudListItem Icon=""@Icons.Material.Filled.Send"">
            Sent mail
        </MudListItem>
        <MudListItem Icon=""@Icons.Material.Filled.Drafts"">
            Drafts
        </MudListItem>
        <MudListItem Icon=""@Icons.Material.Filled.Inbox"" Text=""Inbox"" InitiallyExpanded=""true"">
            <NestedList>
                <MudListItem Icon=""@Icons.Material.Filled.StarRate"">
                    Starred
                </MudListItem>
                <MudListItem Icon=""@Icons.Material.Filled.WatchLater"">
                    Snoozed
                </MudListItem>
            </NestedList>
        </MudListItem>
    </MudList>
</MudPaper>";

        public const string ListSelectionExample = @"<MudPaper Width=""300px"">
    <MudList Clickable=""true"" @bind-SelectedItem=""selectedItem"" @bind-SelectedValue=""selectedValue"">
        <MudListSubheader>
            Your drink:
            <MudChip Color=""Color.Secondary"">
                @(selectedItem?.Text ?? ""You are dry"") (@(selectedValue?.ToString() ?? ""0""))
            </MudChip>
        </MudListSubheader>
        <MudListItem Text=""Sparkling Water"" Value=""1""/>
        <MudListItem Text=""Teas"">
            <NestedList>
                <MudListItem Text=""Earl Grey"" Value=""2"" />
                <MudListItem Text=""Matcha""  Value=""3""/>
                <MudListItem Text=""Pu'er""  Value=""4""/>
            </NestedList>
        </MudListItem>
        <MudListItem Text=""Coffees"">
            <NestedList>
                <MudListItem Text=""Irish Coffee""  Value=""5""/>
                <MudListItem Text=""Double Espresso""  Value=""6""/>
                <MudListItem Text=""Cafe Latte""  Value=""7""/>
            </NestedList>
        </MudListItem>
    </MudList>
</MudPaper>


@code
{
    MudListItem selectedItem;
    object selectedValue = 1;
}";

        public const string ListSimpleExample = @"<MudPaper Width=""300px"">
    <MudList Clickable=""true"">
        <MudListItem Text=""Inbox"" Icon=""@Icons.Material.Filled.Inbox"" />
        <MudListItem Text=""Sent"" Icon=""@Icons.Material.Filled.Send"" />
        <MudDivider />
        <MudListItem Text=""Trash"" />
        <MudListItem Text=""Spam"" />
    </MudList>
</MudPaper>";

        public const string MenuActivatorExample1 = @"<MudMenu FullWidth=""true"">
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"">I am a button</MudButton>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem>Profile</MudMenuItem>
        <MudMenuItem>Theme</MudMenuItem>
        <MudMenuItem>Usage</MudMenuItem>
        <MudMenuItem>Sign Out</MudMenuItem>
    </ChildContent>
</MudMenu>

<MudMenu FullWidth=""true"">
    <ActivatorContent>
        <MudChip Icon=""@Icons.Material.Filled.Person"" Color=""Color.Primary"">Account</MudChip>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem>Profile</MudMenuItem>
        <MudMenuItem>Theme</MudMenuItem>
        <MudMenuItem>Usage</MudMenuItem>
        <MudMenuItem>Sign Out</MudMenuItem>
    </ChildContent>
</MudMenu>

<MudMenu FullWidth=""true"" Disabled=""true"">
    <ActivatorContent>
        <MudChip Icon=""@Icons.Material.Filled.Person"" Disabled=""true"" Color=""Color.Primary"">Disabled</MudChip>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem>Profile</MudMenuItem>
        <MudMenuItem>Theme</MudMenuItem>
        <MudMenuItem>Usage</MudMenuItem>
        <MudMenuItem>Sign Out</MudMenuItem>
    </ChildContent>
</MudMenu>

<MudMenu>
    <ActivatorContent>
        <MudAvatar Image=""images/toiletvisit.jpg"" />
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem>Profile</MudMenuItem>
        <MudMenuItem>Theme</MudMenuItem>
        <MudMenuItem>Usage</MudMenuItem>
        <MudMenuItem>Sign Out</MudMenuItem>
    </ChildContent>
</MudMenu>

<MudMenu FullWidth=""true"">
    <ActivatorContent>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" Dense=""true"">Dense Error</MudAlert>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem>Profile</MudMenuItem>
        <MudMenuItem>Theme</MudMenuItem>
        <MudMenuItem>Usage</MudMenuItem>
        <MudMenuItem>Sign Out</MudMenuItem>
    </ChildContent>
</MudMenu>";

        public const string MenuActivatorExample2 = @"<MudMenu FullWidth=""true"" ActivationEvent=""@MouseEvent.LeftClick"">
    <ActivatorContent>
        <MudChip Icon=""@Icons.Material.Filled.Mouse"" Color=""Color.Primary"">Left click</MudChip>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem>Profile</MudMenuItem>
        <MudMenuItem>Theme</MudMenuItem>
        <MudMenuItem>Usage</MudMenuItem>
        <MudMenuItem>Sign Out</MudMenuItem>
    </ChildContent>
</MudMenu>

<MudMenu ActivationEvent=""@MouseEvent.RightClick"">
    <ActivatorContent>
        <MudChip Icon=""@Icons.Material.Filled.Mouse"" Color=""Color.Primary"">Right click</MudChip>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem>Profile</MudMenuItem>
        <MudMenuItem>Theme</MudMenuItem>
        <MudMenuItem>Usage</MudMenuItem>
        <MudMenuItem>Sign Out</MudMenuItem>
    </ChildContent>
</MudMenu>

<MudMenu FullWidth=""true"" ActivationEvent=""@MouseEvent.MouseOver"" AnchorOrigin=""Origin.BottomCenter"" TransformOrigin=""Origin.TopCenter"">
    <ActivatorContent>
        <MudChip Icon=""@Icons.Material.Filled.Mouse"" Color=""Color.Primary"">Mouse over</MudChip>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem>Profile</MudMenuItem>
        <MudMenuItem>Theme</MudMenuItem>
        <MudMenuItem>Usage</MudMenuItem>
        <MudMenuItem>Sign Out</MudMenuItem>
    </ChildContent>
</MudMenu>";

        public const string MenuActivatorOnMouseExample = @"<MudMenu PositionAtCursor=""true"">
    <ActivatorContent>
        <MudCard>
            <MudCardMedia Image=""images/door.jpg"" Height=""200"" />
            <MudCardContent>
                <MudText Typo=""Typo.h5"">Old Paint</MudText>
                <MudText Typo=""Typo.body2"">Old paint found on a stone house door.</MudText>
                <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
            </MudCardContent>
        </MudCard>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem>Cut</MudMenuItem>
        <MudMenuItem>Copy</MudMenuItem>
        <MudMenuItem>Paste</MudMenuItem>
        <MudMenuItem>Delete</MudMenuItem>
    </ChildContent>
</MudMenu>";

        public const string MenuAdvancedPopoverExample = @"<MudGrid>
    <MudItem xs=""3"">
        <MudText Typo=""Typo.h6"">Anchor Origin</MudText>
        <MudRadioGroup @bind-SelectedOption=""@AnchorOrigin"" Class=""d-flex flex-column"">
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopLeft"">Top-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopCenter"">Top-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopRight"">Top-Right</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.CenterLeft"">Center-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.CenterCenter"">Center-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.CenterRight"">Center-Right</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.BottomLeft"">Bottom-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.BottomCenter"">Bottom-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.BottomRight"">Bottom-Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""6"" Class=""d-flex justify-center align-center"">
        <MudBadge Origin=""@AnchorOrigin"" Color=""Color.Primary"" Icon=""@GetIcon()"" Overlap=""true"" Elevation=""4"">
            <MudMenu Label=""Advanced Placement"" Variant=""Variant.Filled"" AnchorOrigin=""@AnchorOrigin"" TransformOrigin=""@TransformOrigin"" Color=""Color.Default"" Size=""Size.Large"">
                <MudMenuItem>Enlist</MudMenuItem>
                <MudMenuItem>Barracks</MudMenuItem>
                <MudMenuItem>Armory</MudMenuItem>
            </MudMenu>
        </MudBadge>
    </MudItem>
    <MudItem xs=""3"">
        <MudText Typo=""Typo.h6"">Transform Origin</MudText>
        <MudRadioGroup @bind-SelectedOption=""@TransformOrigin"" Class=""d-flex flex-column"">
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.TopLeft"">Top-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.TopCenter"">Top-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.TopRight"">Top-Right</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.CenterLeft"">Center-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.CenterCenter"">Center-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.CenterRight"">Center-Right</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.BottomLeft"">Bottom-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.BottomCenter"">Bottom-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.BottomRight"">Bottom-Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
</MudGrid>

@code{ 
    
    public Origin TransformOrigin { get; set; } = Origin.TopLeft;
    public Origin AnchorOrigin { get; set; } = Origin.BottomLeft;

    public string GetIcon()
    {
        string icon = """";

        switch (TransformOrigin)
        {
            case Origin.TopLeft:
                icon = Icons.Filled.SouthEast;
                break;
            case Origin.TopCenter:
                icon = Icons.Filled.South;
                break;
            case Origin.TopRight:
                icon = Icons.Filled.SouthWest;
                break;
            case Origin.CenterLeft:
                icon = Icons.Filled.East;
                break;
            case Origin.CenterCenter:
                icon = Icons.Filled.ZoomOutMap;
                break;
            case Origin.CenterRight:
                icon = Icons.Filled.West;
                break;
            case Origin.BottomLeft:
                icon = Icons.Filled.NorthEast;
                break;
            case Origin.BottomCenter:
                icon = Icons.Filled.North;
                break;
            case Origin.BottomRight:
                icon = Icons.Filled.NorthWest;
                break;
        }
        return icon;
    }

    public string GetLocation()
    {
        string align = """";
        string justify = """";
        string[] pos = TransformOrigin.ToDescriptionString().Split(""-"");

        if (pos[0] == ""center"")
        {
            align = ""align-center"";
        }
        else if (pos[0] == ""top"")
        {
            align = ""align-start"";
        }
        else if (pos[0] == ""bottom"")
        {
            align = ""align-end"";
        }
        if (pos[1] == ""left"")
        {
            justify = ""justify-start"";
        }
        else if (pos[1] == ""right"")
        {
            justify = ""justify-end"";
        }
        else if (pos[1] == ""center"")
        {
            justify = ""justify-center"";
        }

        return $""absolute mud-height-full mud-width-full d-flex ma-n3 {align} {justify}"";
    }
    
}";

        public const string MenuAnchorOriginExample = @"<MudGrid>
    <MudItem xs=""12"" md=""3"">
        <MudText Typo=""Typo.h6"">Anchor Origin</MudText>
        <MudRadioGroup @bind-SelectedOption=""@AnchorOrigin"" Class=""d-flex flex-column my-2"">
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopLeft"">Top-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopRight"">Top-Right</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.BottomLeft"">Bottom-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.BottomRight"">Bottom-Right</MudRadio>
        </MudRadioGroup>
        <MudText Typo=""Typo.h6"">Transform Origin</MudText>
        <MudRadioGroup @bind-SelectedOption=""@TransformOrigin"" Class=""d-flex flex-column  my-2"">
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopCenter"" Disabled=""true"">Top-Center</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""9"" Class=""d-flex align-center justify-center flex-column"">
        <MudMenu Label=""Change Anchor Origin"" Variant=""Variant.Filled"" Color=""Color.Info"" AnchorOrigin=""@AnchorOrigin"" TransformOrigin=""@TransformOrigin"">
            <MudMenuItem>1</MudMenuItem>
            <MudMenuItem>2</MudMenuItem>
            <MudMenuItem>3</MudMenuItem>
        </MudMenu>
        <MudText Typo=""Typo.overline"">Click the button to see effect</MudText>
    </MudItem>
</MudGrid>

@code {
    public Origin AnchorOrigin { get; set; } = Origin.TopLeft;
    public Origin TransformOrigin { get; set; } = Origin.TopCenter;
}";

        public const string MenuClickAndTouchEventsExample = @"@inject ISnackbar Snackbar

<MudMenu Label=""Open Menu"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    <MudMenuItem OnClick=""OnClick"">OnClick Only</MudMenuItem>
    <MudMenuItem OnTouch=""OnTouch"">OnTouch Only</MudMenuItem>
    <MudMenuItem OnClick=""OnClick"" OnTouch=""OnTouch"">Both OnClick and OnTouch</MudMenuItem>
</MudMenu>

@code {
    private void OnClick(MouseEventArgs args) => Snackbar.Add(""OnClick Invoked"");
    private void OnTouch(TouchEventArgs args) => Snackbar.Add(""OnTouch Invoked"");
}";

        public const string MenuCustomizationExample = @"<MudMenu Label=""Open Menu"">
    <MudMenuItem>Enlist</MudMenuItem>
    <MudMenuItem>Barracks</MudMenuItem>
    <MudMenuItem>Armory</MudMenuItem>
</MudMenu>

<MudMenu Label=""Open Menu"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    <MudMenuItem>Enlist</MudMenuItem>
    <MudMenuItem>Barracks</MudMenuItem>
    <MudMenuItem>Armory</MudMenuItem>
</MudMenu>

<MudMenu Label=""Open Menu"" Variant=""Variant.Outlined"" Color=""Color.Secondary"">
    <MudMenuItem>Enlist</MudMenuItem>
    <MudMenuItem>Barracks</MudMenuItem>
    <MudMenuItem>Armory</MudMenuItem>
</MudMenu>

<MudMenu Label=""Open Menu"" Variant=""Variant.Filled"" Disabled=""true"">
    <MudMenuItem>Enlist</MudMenuItem>
    <MudMenuItem>Barracks</MudMenuItem>
    <MudMenuItem>Armory</MudMenuItem>
</MudMenu>

<MudMenu Label=""Icon Color"" Variant=""Variant.Filled"" EndIcon=""@Icons.Filled.KeyboardArrowDown"" IconColor=""Color.Secondary"" >
    <MudMenuItem>Enlist</MudMenuItem>
    <MudMenuItem>Barracks</MudMenuItem>
    <MudMenuItem>Armory</MudMenuItem>
</MudMenu>

<MudMenu StartIcon=""@Icons.Filled.Translate"" EndIcon=""@Icons.Filled.KeyboardArrowDown"" Label=""Swedish"" Color=""Color.Primary"" Variant=""Variant.Filled"">
    <MudMenuItem>Swedish</MudMenuItem>
    <MudMenuItem>Old Norse</MudMenuItem>
</MudMenu>";

        public const string MenuIconButtonsExample = @"<MudMenu Icon=""@Icons.Material.Filled.MoreVert"">
    <MudMenuItem>Profile</MudMenuItem>
    <MudMenuItem>My account</MudMenuItem>
    <MudMenuItem>Logout</MudMenuItem>
</MudMenu>

<MudMenu Icon=""@Icons.Material.Filled.Settings"" Color=""Color.Primary"">
    <MudMenuItem>Profile</MudMenuItem>
    <MudMenuItem>My account</MudMenuItem>
    <MudMenuItem>Logout</MudMenuItem>
</MudMenu>

<MudMenu Icon=""@Icons.Material.Filled.Favorite"" Color=""Color.Secondary"">
    <MudMenuItem>Profile</MudMenuItem>
    <MudMenuItem>My account</MudMenuItem>
    <MudMenuItem>Logout</MudMenuItem>
</MudMenu>

<MudMenu Icon=""@Icons.Material.Filled.Build"" Disabled=""true"">
    <MudMenuItem>Profile</MudMenuItem>
    <MudMenuItem>My account</MudMenuItem>
    <MudMenuItem>Logout</MudMenuItem>
</MudMenu>";

        public const string MenuItemCustomizationExample = @"<MudMenu Label=""Menu with Icons"">
    <MudMenuItem IconSize=""Size.Small"" IconColor=""Color.Primary""   Icon=""@Icons.Material.Filled.Chair"">Chair</MudMenuItem>
    <MudMenuItem                                                   Icon=""@Icons.Material.Filled.DoorFront"">Door</MudMenuItem>
    <MudMenuItem IconSize=""Size.Large"" IconColor=""Color.Secondary"" Icon=""@Icons.Material.Filled.Window"">Window</MudMenuItem>
</MudMenu>";

        public const string MenuMaxHeightExample = @"<MudMenu Label=""Max Height Menu"" MaxHeight=""200"" FullWidth=""true"">
    <MudMenuItem>Long</MudMenuItem>
    <MudMenuItem>List</MudMenuItem>
    <MudMenuItem>Is</MudMenuItem>
    <MudMenuItem>To</MudMenuItem>
    <MudMenuItem>Long</MudMenuItem>
    <MudMenuItem>Lets</MudMenuItem>
    <MudMenuItem>Limit</MudMenuItem>
    <MudMenuItem>Height</MudMenuItem>
</MudMenu>";

        public const string MenuSimpleExample = @"<MudMenu Label=""Open Menu"">
    <MudMenuItem>Enlist</MudMenuItem>
    <MudMenuItem>Barracks</MudMenuItem>
    <MudMenuItem>Armory</MudMenuItem>
</MudMenu>

<MudMenu Label=""Open Dense Menu"" Dense=""true"">
    <MudMenuItem>Dense Stuff</MudMenuItem>
    <MudMenuItem>Stuff is Dense</MudMenuItem>
    <MudMenuItem>Soo Dense</MudMenuItem>
</MudMenu>";

        public const string MenuTransformOriginExample = @"<MudGrid>
    <MudItem xs=""12"" md=""3"">
        <MudText Typo=""Typo.h6"">Anchor Origin</MudText>
        <MudRadioGroup @bind-SelectedOption=""@AnchorOrigin"" Class=""d-flex flex-column  my-2"">
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopLeft"" Disabled=""true"">Top-Left</MudRadio>
        </MudRadioGroup>
        <MudText Typo=""Typo.h6"">Transform Origin</MudText>
        <MudRadioGroup @bind-SelectedOption=""@TransformOrigin"" Class=""d-flex flex-column  my-2"">
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopLeft"">Top-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopRight"">Top-Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""9"" Class=""d-flex align-center justify-center flex-column"">
        <MudMenu Label=""X"" Variant=""Variant.Filled"" Color=""Color.Success"" AnchorOrigin=""@AnchorOrigin"" TransformOrigin=""@TransformOrigin"">
            <MudMenuItem>Profile</MudMenuItem>
            <MudMenuItem>My account</MudMenuItem>
            <MudMenuItem>Logout</MudMenuItem>
        </MudMenu>
        <MudText Typo=""Typo.overline"">Click the button to see effect</MudText>
    </MudItem>
</MudGrid>

@code {
    public Origin AnchorOrigin { get; set; } = Origin.TopLeft;
    public Origin TransformOrigin { get; set; } = Origin.TopRight;
}";

        public const string MenuWithExample = @"<MudMenu Label=""Default Menu Width"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    <MudMenuItem>1</MudMenuItem>
    <MudMenuItem>2</MudMenuItem>
    <MudMenuItem>3</MudMenuItem>
</MudMenu>

<MudMenu Label=""Full Menu Width"" Variant=""Variant.Filled"" Color=""Color.Primary"" FullWidth=""true"">
    <MudMenuItem>1</MudMenuItem>
    <MudMenuItem>2</MudMenuItem>
    <MudMenuItem>3</MudMenuItem>
</MudMenu>";

        public const string MessageBoxInlineExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Error"" OnClick=""OnButtonClicked"" >Delete</MudButton>
<MudChip>@state</MudChip>

<MudMessageBox @ref=""mbox"" Title=""Warning"" CancelText=""Cancel"">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Error"" StartIcon=""@Icons.Material.Filled.DeleteForever"">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code
{
    MudMessageBox mbox { get; set; }
    string state = ""Message box hasn't been opened yet"";

    private async void OnButtonClicked()
    {
        bool? result = await mbox.Show();
        state= result==null ? ""Cancelled"" : ""Deleted!"";
        StateHasChanged();
    }
}";

        public const string MessageBoxMarkupContentExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Info"" OnClick=""OnButtonClicked"">I am Balrog</MudButton>

<MudChip>@state</MudChip>

@code
{
    [Inject] private IDialogService DialogService { get; set; }

    string state = ""Message box hasn't been opened yet"";

    private async void OnButtonClicked()
    {
        bool? result = await DialogService.ShowMessageBox(
            ""Secure The Ring"", 
            (MarkupString) $""You <br /> Shall <br /> not <br /> <b>Pass!<b/>"",
            yesText:""Fire Whip!"", cancelText:""Smash Ground"");
        state= result==null ? ""Returned to Moria"" : ""Fighting With Gandalf!"";
        StateHasChanged();
    }
}";

        public const string MessageBoxSimpleExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Error"" OnClick=""OnButtonClicked"" >Delete</MudButton>

<MudChip>@state</MudChip>

@code
{
    [Inject] private IDialogService DialogService { get; set; }

    string state = ""Message box hasn't been opened yet"";


    private async void OnButtonClicked()
    {
        bool? result = await DialogService.ShowMessageBox(
            ""Warning"", 
            ""Deleting can not be undone!"", 
            yesText:""Delete!"", cancelText:""Cancel"");
        state= result==null ? ""Cancelled"" : ""Deleted!"";
        StateHasChanged();
    }
}";

        public const string NavMenuBorderedExample = @"<MudPaper Width=""250px"" Elevation=""0"" Class=""py-3"">
    <MudNavMenu Bordered=""true"">
        <MudNavLink Href=""/dashboard"">Dashboard</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.Prefix"" Href=""/components/navmenu"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
        <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuColorExample = @"<MudPaper Width=""250px"" Elevation=""0"" Class=""py-3"">
    <MudNavMenu Color=""Color.Info"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Href=""/components/navmenu"" Match=""NavLinkMatch.Prefix"" Icon=""@Icons.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
        <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>
<MudPaper Width=""250px"" Elevation=""0"" Class=""py-3"">
    <MudNavMenu Color=""Color.Success"" Bordered=""true"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Href=""/components/navmenu"" Match=""NavLinkMatch.Prefix"" Icon=""@Icons.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
        <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuDenseExample = @"<MudPaper Width=""250px"" Class=""py-3"" Elevation=""0"">
    <MudNavMenu Dense=""true"" Color=""Color.Info"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Filled.Dashboard"">Dashboard</MudNavLink>
            <MudNavLink Href=""/components/navmenu"" Match=""NavLinkMatch.Prefix"" Icon=""@Icons.Filled.Storage"">Servers</MudNavLink>
            <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
            <MudNavGroup Title=""Settings"" Expanded=""true"">
                <MudNavLink Href=""/users"">Users</MudNavLink>
                <MudNavLink Href=""/security"">Security</MudNavLink>
            </MudNavGroup>
            <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>
<MudPaper Width=""250px"" Class=""py-3"" Elevation=""0"">
    <MudNavMenu Dense=""true"" Rounded=""true"" Margin=""Margin.Dense"" Color=""Color.Secondary"" Class=""pa-2"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Href=""/components/navmenu"" Match=""NavLinkMatch.Prefix"" Icon=""@Icons.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
        <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuExample = @"<MudPaper Width=""250px"" Class=""py-3"" Elevation=""0"">
    <MudNavMenu>
        <MudText Typo=""Typo.h6"" Class=""px-4"">My Application</MudText>
        <MudText Typo=""Typo.body2"" Class=""px-4 mud-text-secondary"">Secondary Text</MudText>
        <MudDivider Class=""my-2""/>
        <MudNavLink Href=""/dashboard"">Dashboard</MudNavLink>
        <MudNavLink Href=""/servers"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
        <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuIconExample = @"<link href=""https://use.fontawesome.com/releases/v5.14.0/css/all.css"" rel=""stylesheet"">


<MudPaper Width=""250px"" Class=""d-inline-flex py-3"" Elevation=""0"">
    <MudNavMenu Class=""mud-width-full"">
        <MudText Typo=""Typo.h6"" Class=""px-4"">Material</MudText>
        <MudText Typo=""Typo.body2"" Class=""px-4 mud-text-secondary"">Icons</MudText>
        <MudDivider Class=""my-2"" />
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Href=""/servers"" Icon=""@Icons.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Icon=""@Icons.Filled.Receipt"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Icon=""@Icons.Filled.Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"" Icon=""@Icons.Filled.People"" IconColor=""Color.Success"">Users</MudNavLink>
            <MudNavLink Href=""/security"" Icon=""@Icons.Filled.Security"" IconColor=""Color.Info"">Security</MudNavLink>
        </MudNavGroup>
    </MudNavMenu>
</MudPaper>
<MudPaper Width=""250px"" Class=""d-inline-flex py-3"" Elevation=""0"">
    <MudNavMenu Class=""mud-width-full"">
        <MudText Typo=""Typo.h6"" Class=""px-4"">Font Awesome</MudText>
        <MudText Typo=""Typo.body2"" Class=""px-4 mud-text-secondary"">Icons</MudText>
        <MudDivider Class=""my-2"" />
        <MudNavLink Href=""/dashboard"" Icon=""fas fa-chart-line"">Dashboard</MudNavLink>
        <MudNavLink Href=""/servers"" Icon=""fas fa-server"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Icon=""fas fa-receipt"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Icon=""fas fa-cogs"" Expanded=""true"">
            <MudNavLink Href=""/users"" Icon=""fas fa-users"" IconColor=""Color.Success"">Users</MudNavLink>
            <MudNavLink Href=""/security"" Icon=""fas fa-user-shield"" IconColor=""Color.Info"">Security</MudNavLink>
        </MudNavGroup>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuMarginExample = @"<MudPaper Width=""250px"" Elevation=""0"" Class=""py-1"">
    <MudNavMenu Margin=""Margin.Dense"" Color=""Color.Warning"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.Prefix"" Href=""/components/navmenu"" Icon=""@Icons.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/thelab"" Icon=""@Icons.Filled.Science"">The Lab</MudNavLink>
    </MudNavMenu>
</MudPaper>
<MudPaper Width=""250px"" Elevation=""0"" Class=""py-1"">
    <MudNavMenu Margin=""Margin.Normal"" Color=""Color.Error"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.Prefix"" Href=""/components/navmenu"" Icon=""@Icons.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/thelab"" Icon=""@Icons.Filled.Science"">The Lab</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuRoundedExample = @"<MudPaper Width=""250px"" Elevation=""0"">
    <MudNavMenu Rounded=""true"" Margin=""Margin.Dense"" Color=""Color.Primary"" Class=""pa-2"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.Prefix"" Href=""/components/navmenu"" Icon=""@Icons.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/thelab"" Icon=""@Icons.Filled.Science"">The Lab</MudNavLink>
    </MudNavMenu>
</MudPaper>
<MudPaper Width=""250px"" Elevation=""0"">
    <MudNavMenu Rounded=""true"" Margin=""Margin.Normal"" Color=""Color.Tertiary"" Class=""pa-2"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.Prefix"" Href=""/components/navmenu"" Icon=""@Icons.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/thelab"" Icon=""@Icons.Filled.Science"">The Lab</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuSubGroupExample = @"<MudPaper Width=""250px"" Class=""d-inline-flex py-3"" Elevation=""0"">
    <MudNavMenu Class=""mud-width-full"">
        <MudText Typo=""Typo.h6"" Class=""px-4"">My Application</MudText>
        <MudText Typo=""Typo.body2"" Class=""px-4 mud-text-secondary"">Secondary Text</MudText>
        <MudDivider Class=""my-2"" />
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavGroup Title=""Level 0"" Icon=""@Icons.Filled.Settings"" Expanded=""true"">
            <MudNavGroup Title=""Level 1"" Icon=""@Icons.Filled.AdminPanelSettings"" Expanded=""true"">
                <MudNavGroup Title=""Level 2"" Icon=""@Icons.Filled.People"" Expanded=""true"">
                    <MudNavGroup Title=""Level 3"" Icon=""@Icons.Filled.Lock"" Expanded=""true"">
                        <MudNavLink Href=""/delete"" Icon=""@Icons.Filled.DeleteForever"">Delete Password</MudNavLink>
                    </MudNavGroup>
                </MudNavGroup>
            </MudNavGroup>
        </MudNavGroup>
        <MudNavLink Href=""/billing"" Icon=""@Icons.Filled.Receipt"">Billing</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuTwoWayBindableExample = @"<MudPaper Width=""250px"" Class=""py-3 mb-4"" Elevation=""0"">
    <MudNavMenu>
        <MudNavGroup Title=""Settings"" @bind-Expanded=_isExpanded>
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
    </MudNavMenu>
</MudPaper>

<MudText>
    The MudNavGroup is
    @if (_isExpanded)
    {
        <b class=""mud-theme-tertiary rounded pa-2 ml-2"">expanded</b>
    }
    else
    {
        <b class=""mud-theme-error rounded pa-2 ml-2"">collapsed</b>
    }
</MudText>

@code{
    bool _isExpanded = true;
}";

        public const string ChangeTheValueWithTheMouseWheelExample = @"<MudNumericField @bind-Value=""@_normal"" InvertMouseWheel=""@_invertMouseWheel"" Label=""Use Shift + Mouse Wheel"" Variant=""Variant.Outlined"" />
<MudCheckBox Class=""mt-3"" @bind-Checked=""@_invertMouseWheel"" Label=""Revert Mouse Wheel"" Color=""Color.Primary"" />

@code {
    double _normal = 0;
    bool _invertMouseWheel = false;
}";

        public const string DebouncedNumericFieldExample = @"<MudNumericField @bind-Value=""@_normal"" Label=""Normal"" HelperText=""@_normal.ToString()"" Variant=""Variant.Outlined"" />
<MudNumericField @bind-Value=""@_immediate"" Immediate=""true"" Label=""Immediate"" HelperText=""@_immediate.ToString()"" Variant=""Variant.Outlined"" />
<MudNumericField @bind-Value=""@_debounced"" DebounceInterval=""500"" OnDebounceIntervalElapsed=""HandleIntervalElapsed"" Label=""Debounced"" HelperText=""@_debounced.ToString()"" Variant=""Variant.Outlined""  />

@code {
    double _normal;
    double _immediate;
    double _debounced;

    void HandleIntervalElapsed(string debouncedText)
    {
        // At this stage, interval has elapsed.
    }
}";

        public const string NumericFieldBasicExample = @"<MudNumericField @bind-Value=""IntValue"" Label=""Standard"" Variant=""Variant.Text"" Min=""0"" Max=""10"" />
<MudNumericField @bind-Value=""DoubleValue"" Label=""Filled"" Variant=""Variant.Filled"" Min=""0.0"" />
<MudNumericField @bind-Value=""DecimalValue"" Label=""Outlined"" Variant=""Variant.Outlined"" Step="".2M"" />

@code {
    public int IntValue { get; set; }
    public double DoubleValue { get; set; }
    public decimal DecimalValue { get; set; }
}";

        public const string NumericFieldBindingValueTypesExample = @"<MudNumericField @bind-Value=""intValue"" Label=""Enter an int"" Variant=""Variant.Outlined"" />
<MudNumericField @bind-Value=""doubleValue"" Label=""Enter a double"" Format=""F1"" Variant=""Variant.Outlined"" />
<MudNumericField @bind-Value=""nullableInt"" Label=""Enter an int"" Variant=""Variant.Outlined"" />
<MudNumericField @bind-Value=""nullableDouble"" Label=""Enter a double"" Format=""F1"" Variant=""Variant.Outlined"" />

@code { 
    int intValue;
    double doubleValue;
    int? nullableInt;
    double? nullableDouble;
}";

        public const string NumericFieldCultureExample = @"@using System.Globalization

<MudNumericField Immediate=""false"" Label=""de-DE"" Format=""N2"" Culture=""@_de"" T=""double?"" @bind-Value=""_valueDe"" HelperText=""@_valueDe.ToString()""/>
<MudNumericField Immediate=""false"" Label=""en-US"" Format=""N2"" Culture=""@_en"" T=""double?"" @bind-Value=""_valueEn"" HelperText=""@_valueEn.ToString()""/>

@code {
    public CultureInfo _de = CultureInfo.GetCultureInfo(""de-DE"");
    public CultureInfo _en = CultureInfo.GetCultureInfo(""en-US"");

    public double? _valueDe = 1234.56;
    public double? _valueEn = 1234.56;
}";

        public const string NumericFieldHideButtonsExample = @"<MudNumericField HideSpinButtons=""true"" @bind-Value=""IntValue"" Label=""Standard"" Variant=""Variant.Text"" Min=""0"" Max=""10"" />
<MudNumericField HideSpinButtons=""true"" @bind-Value=""DoubleValue"" Label=""Filled"" Variant=""Variant.Filled"" Min=""0.0"" />
<MudNumericField HideSpinButtons=""true"" @bind-Value=""DecimalValue"" Label=""Outlined"" Variant=""Variant.Outlined"" Step="".2M"" />

@code {
    public int IntValue { get; set; }
    public double DoubleValue { get; set; }
    public decimal DecimalValue { get; set; }
}";

        public const string OverlayAbsoluteExample = @"<MudPaper Class=""pa-8"" Style=""height: 300px; position: relative;"">
    <MudButton Variant=""Variant.Filled"" Color=""Color.Secondary"" OnClick=""@(e => ToggleOverlay(true))"">Show Overlay</MudButton>

    <MudOverlay Visible=""isVisible"" DarkBackground=""true"" Absolute=""true"">
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary""  OnClick=""@(e => ToggleOverlay(false))"">Hide Overlay</MudButton>
    </MudOverlay>
</MudPaper>



@code {
    private bool isVisible;

    public void ToggleOverlay(bool value)
    {
        isVisible = value;
    }
}";

        public const string OverlayColorsExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""pa-4 my-2"" Style=""position:relative;"">
            <MudOverlay Visible=""lightIsVisible"" LightBackground=""true"" Absolute=""true"" />
            <MudText>
                Det var en gång en spindel, som hette laban. Laban tyckte om kebab pizza, men det gjorde inte hans kompis åke.
                Åke och Laban skulle en dag ut och fiska. På vägen dit skrek Laban till, faaan du åke!!! det luktar kebab!!!
            </MudText>
            <MudButton Variant=""Variant.Filled"" Class=""mt-2"">Action</MudButton>
        </MudPaper>
        <MudSwitch @bind-Checked=""@lightIsVisible"" Label=""Light Overlay"" Color=""Color.Primary""/>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""pa-4 my-2"" Style=""position:relative;"">
            <MudOverlay Visible=""darkIsVisible"" DarkBackground=""true"" Absolute=""true"" />
            <MudText>
                Det var en gång en spindel, som hette laban. Laban tyckte om kebab pizza, men det gjorde inte hans kompis åke.
                Åke och Laban skulle en dag ut och fiska. På vägen dit skrek Laban till, faaan du åke!!! det luktar kebab!!!
            </MudText>
            <MudButton Variant=""Variant.Filled"" Class=""mt-2"">Action</MudButton>
        </MudPaper>
        <MudSwitch @bind-Checked=""@darkIsVisible"" Label=""Dark Overlay"" Color=""Color.Secondary"" />
    </MudItem>
</MudGrid>


@code {
    private bool lightIsVisible;
    private bool darkIsVisible;
}";

        public const string OverlayLoaderExample = @"<MudCard Class=""my-2"" Style=""position:relative;"">
    @if (!dataLoaded)
    {
        <MudSkeleton SkeletonType=""SkeletonType.Rectangle"" Height=""200px"" />
        <MudCardContent>
            <MudSkeleton Width=""30%"" Height=""42px;"" />
            <MudSkeleton Width=""80%"" />
            <MudSkeleton Width=""100%"" />
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton Width=""64px"" Height=""40px"" Class=""ml-2"" />
            <MudSkeleton Width=""105px"" Height=""40px"" Class=""ml-3"" />
        </MudCardActions>
        <MudOverlay Visible=""isVisible"" DarkBackground=""true"" Absolute=""true"">
            <MudProgressCircular Color=""Color.Secondary"" Indeterminate=""true"" />
        </MudOverlay>
    }
    else
    {
        <MudCardMedia Image=""images/door.jpg"" Height=""200"" />
        <MudCardContent>
            <MudText Typo=""Typo.h5"">Old Paint</MudText>
            <MudText Typo=""Typo.body2"">Old paint found on a stone house door.</MudText>
            <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Share</MudButton>
            <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
        </MudCardActions>
    }
</MudCard>

<MudToolBar DisableGutters=""true"">
    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""OpenOverlay"" EndIcon=""@Icons.Material.Filled.Refresh"">Refresh Data</MudButton>
    <MudSpacer/>
    <MudButton Variant=""Variant.Filled"" OnClick=""ResetExample"">Reset Example</MudButton>
</MudToolBar>

@code { 
    private bool isVisible;
    private bool dataLoaded;

    public async void OpenOverlay()
    {
        isVisible = true;
        await Task.Delay(3000);
        isVisible = false;
        dataLoaded = true;
        StateHasChanged();
    }

    public void ResetExample()
    {
        dataLoaded = false;
    }
}";

        public const string OverlayOnClickExample = @"@inject ISnackbar Snackbar


<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""ToggleOverlay"" Class=""mx-1"">On Click Alert</MudButton>

<MudOverlay Visible=""isVisible"" OnClick=""ShowSnackbar"" DarkBackground=""true"" ZIndex=""9999"" />


@code {
    private bool isVisible;

    public void ToggleOverlay()
    {
        isVisible = true;
    }

    public void ShowSnackbar()
    {
        Snackbar.Add(""Random message"", Severity.Normal);
        isVisible = false;
    }
}";

        public const string OverlayUsageExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""OpenOverlay"">Show Overlay</MudButton>

<MudOverlay @bind-Visible=""isVisible"" DarkBackground=""true"" AutoClose=""true""/>

@code {
    private bool isVisible;

    public void OpenOverlay()
    {
        isVisible = true;
        StateHasChanged();
    }
}";

        public const string OverlayZIndexExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Tertiary"" OnClick=""OpenOverlay"">Show Overlay</MudButton>

<MudOverlay @bind-Visible=""isVisible"" DarkBackground=""true"" ZIndex=""9999"" AutoClose=""true""/>


@code {
    private bool isVisible;

    public void OpenOverlay()
    {
        isVisible = true;
        StateHasChanged();
    }
}";

        public const string PaginationControlButtonsExample = @"<div class=""d-flex flex-column align-center"">
    <MudPagination ShowPreviousButton=""false"" ShowNextButton=""false"" Count=""11""/>
    <MudPagination ShowFirstButton=""true"" ShowLastButton=""true"" Count=""11"" Class=""mt-4""/>
</div>";

        public const string PaginationDisabledExample = @"<MudPagination Disabled=""true"" Count=""3"" />";

        public const string PaginationItemCountExample = @"<div class=""d-flex flex-column align-center"">
    <MudPagination BoundaryCount=""1"" MiddleCount=""1"" Count=""22"" @bind-Selected=""@_selected"" />
    <MudPagination BoundaryCount=""2"" MiddleCount=""5"" Count=""22"" @bind-Selected=""@_selected"" Class=""mt-4"" />
</div>

@code {
    private int _selected = 11;
}";

        public const string PaginationRectangularExample = @"<div class=""d-flex flex-column align-center"">
    <MudPagination Rectangular=""true"" Variant=""Variant.Text"" Count=""6"" />
    <MudPagination Rectangular=""true"" Variant=""Variant.Filled"" Count=""6"" Class=""my-4"" />
    <MudPagination Rectangular=""true"" Variant=""Variant.Outlined"" Count=""6"" />
</div>";

        public const string PaginationSimpleExample = @"<MudPagination Color=""Color.Primary"" Count=""4"" @bind-Selected=""@_selected""/>

<MudText Align=""Align.Center"">Selected page: @_selected</MudText>

@code {
    private int _selected = 1;
}";

        public const string PaginationSizesExample = @"<div class=""d-flex flex-column align-center"">
    <MudPagination Size=""Size.Small"" Variant=""Variant.Filled"" Count=""6""/>
    <MudPagination Size=""Size.Medium"" Variant=""Variant.Filled"" Count=""6"" Class=""my-4""/>
    <MudPagination Size=""Size.Large"" Variant=""Variant.Filled"" Count=""6""/>
</div>";

        public const string PaginationTableExample = @"@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient
@using System.Net.Http.Json

<MudTable @ref=""@_table"" Items=""@_elements"" RowsPerPage=""4"" Hover=""true"" Breakpoint=""Breakpoint.Sm"" LoadingProgressColor=""Color.Info"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination SelectedChanged=""PageChanged"" Count=""@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)"" Class=""pa-4""/>
    </PagerContent>
</MudTable>

@code {
    private MudTable<Element> _table;
    private IEnumerable<Element> _elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        _elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
}";

        public const string PaginationVariantsFilledExample = @"<MudPagination Variant=""Variant.Filled"" Count=""4""/>";

        public const string PaginationVariantsOutlinedExample = @"<MudPagination Variant=""Variant.Outlined"" Count=""4"" />";

        public const string PaperComponentExample = @"<MudPaper Class=""pa-16 ma-2"" Elevation=""0""></MudPaper>
<MudPaper Class=""pa-16 ma-2""></MudPaper>
<MudPaper Class=""pa-16 ma-2"" Elevation=""3""></MudPaper>";

        public const string PaperVariantsExample = @"<MudPaper Class=""pa-16 ma-2"" Outlined=""true""></MudPaper>
<MudPaper Class=""pa-16 ma-2"" Outlined=""true"" Square=""true""></MudPaper>
<MudPaper Class=""pa-16 ma-2"" Square=""true""></MudPaper>";

        public const string PopoverComplexContentExample = @"<div class=""d-flex"">
	<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@ToggleOpen"">
		@(_isOpen? ""Close"" : ""Open"")
	</MudButton>
	<MudPopover Open=""@_isOpen"" AnchorOrigin=""Origin.BottomCenter"" TransformOrigin=""Origin.TopCenter"">
		<div class=""d-flex flex-column pa-1"">
			<PopoverDynamicContentExample />
		</div>
	</MudPopover>
</div>

@code {

	public bool _isOpen;

	public void ToggleOpen()
	{
		if (_isOpen)
			_isOpen = false;
		else
			_isOpen = true;
	}
}";

        public const string PopoverDynamicContentExample = @"<MudButton OnClick=""@AddMoreContent"" Color=""Color.Error"">Add another line</MudButton>
@foreach (var item in _content)
{
	<MudText Class=""pa-2"" Align=""Align.Center"">@item</MudText>
}

@code {

	private List<String> _content = new();

	public void AddMoreContent()
	{
		_content.Add(""line of text"");
	}
}";

        public const string PopoverInceptionExampleExample = @"<MudMenu Class="""" Label=""A menu with tooltip"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    <div class=""d-flex align-center"">
        <MudText Class=""ml-4"">1</MudText>
        <MudTooltip Text=""1 is good option"">
            <MudIconButton Class=""mx-2"" Icon=""@Icons.Material.Outlined.Info"" />
        </MudTooltip>
    </div>
    <div class=""d-flex align-center"">
        <MudText Class=""ml-4"">2</MudText>
        <MudMenu Icon=""@Icons.Material.Outlined.Mouse"" ActivationEvent=""@MouseEvent.MouseOver"" Class=""mx-2"">
            <ChildContent>
                <MudMenuItem>Profile</MudMenuItem>
                <MudMenuItem>Theme</MudMenuItem>
                <MudMenuItem>Usage</MudMenuItem>
                <MudMenuItem>Sign Out</MudMenuItem>
            </ChildContent>
        </MudMenu>
        <MudTooltip Text=""2 can be a better option"">
            <MudIconButton Class=""mx-2"" Icon=""@Icons.Material.Outlined.Info"" />
        </MudTooltip>
    </div>
    <div class=""d-flex align-center"">
        <MudText Class=""ml-4"">3</MudText>
        <MudTooltip Text=""3 is one more than 2"">
            <MudIconButton Class=""mx-2"" Icon=""@Icons.Material.Outlined.Info"" />
        </MudTooltip>
    </div>
</MudMenu>


@code {
	private bool _isOpen = false;

	public void ToggleOpen() => _isOpen = !_isOpen;

}";

        public const string PopoverLocationExample = @"<MudGrid>
    <MudItem xs=""3"">
        <MudText Typo=""Typo.h6"">Anchor Origin</MudText>
        <MudRadioGroup @bind-SelectedOption=""@AnchorOrigin"" Class=""d-flex flex-column"">
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopLeft"">Top-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopCenter"">Top-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.TopRight"">Top-Right</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.CenterLeft"">Center-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.CenterCenter"">Center-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.CenterRight"">Center-Right</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.BottomLeft"">Bottom-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.BottomCenter"">Bottom-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Option=""Origin.BottomRight"">Bottom-Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""6"" Class=""d-flex justify-center align-center"">
            <MudBadge Origin=""@AnchorOrigin"" Color=""Color.Primary"" Dot=""true"" Overlap=""true"" Elevation=""4"" BadgeClass=""ma-2"">
                <MudPaper Elevation=""0"" Outlined=""true"" Class=""pa-12"">
                    <MudPopover OverflowBehavior=""OverflowBehavior.FlipNever"" Open=""true"" AnchorOrigin=""@AnchorOrigin"" TransformOrigin=""@TransformOrigin"" Class=""pa-4"">
                        <MudText Typo=""Typo.body2"" Class=""px-4 py-1"">The content of the popover</MudText>
                        <div class=""@GetLocation()"" style=""top:0; left:0;"">
                            <MudIcon Icon=""@GetIcon()"" Color=""Color.Secondary"" Class="""" />
                        </div>
                    </MudPopover>
                </MudPaper>
            </MudBadge>
    </MudItem>
    <MudItem xs=""3"">
        <MudText Typo=""Typo.h6"">Transform Origin</MudText>
        <MudRadioGroup @bind-SelectedOption=""@TransformOrigin"" Class=""d-flex flex-column"">
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.TopLeft"">Top-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.TopCenter"">Top-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.TopRight"">Top-Right</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.CenterLeft"">Center-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.CenterCenter"">Center-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.CenterRight"">Center-Right</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.BottomLeft"">Bottom-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.BottomCenter"">Bottom-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Option=""Origin.BottomRight"">Bottom-Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
</MudGrid>

@code{
    public Origin TransformOrigin { get; set; } = Origin.TopLeft;
    public Origin AnchorOrigin { get; set; } = Origin.BottomLeft;

    public string GetIcon()
    {
        string icon = """";

        switch(TransformOrigin)
        {
            case Origin.TopLeft:
                icon = Icons.Filled.SouthEast;
                break;
            case Origin.TopCenter:
                icon = Icons.Filled.South;
                break;
            case Origin.TopRight:
                icon = Icons.Filled.SouthWest;
                break;
            case Origin.CenterLeft:
                icon = Icons.Filled.East;
                break;
            case Origin.CenterCenter:
                icon = Icons.Filled.ZoomOutMap;
                break;
            case Origin.CenterRight:
                icon = Icons.Filled.West;
                break;
            case Origin.BottomLeft:
                icon = Icons.Filled.NorthEast;
                break;
            case Origin.BottomCenter:
                icon = Icons.Filled.North;
                break;
            case Origin.BottomRight:
                icon = Icons.Filled.NorthWest;
                break;
        }
        return icon;
    }

    public string GetLocation()
    {
        string align = """";
        string justify = """";
        string[] pos = TransformOrigin.ToDescriptionString().Split(""-"");

        if(pos[0] == ""center"")
        {
            align = ""align-center"";
        }
        else if(pos[0] == ""top"")
        {
            align = ""align-start"";
        }
        else if (pos[0] == ""bottom"")
        {
            align = ""align-end"";
        }
        if(pos[1] == ""left"")
        {
            justify = ""justify-start"";
        }
        else if (pos[1] == ""right"")
        {
            justify = ""justify-end"";
        }
        else if (pos[1] == ""center"")
        {
            justify = ""justify-center"";
        }

        return $""absolute mud-height-full mud-width-full d-flex {align} {justify}"";
    }
}";

        public const string PopoverOverflowBehaviorExample = @"<MudPaper Outlined=""true"" Class=""px-12 py-6"">
    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" DisableElevation=""true"" OnClick=""@ToggleOpen"">@(_isOpen? ""Close"" : ""Open"")</MudButton>
	<MudPopover Open=""_isOpen"" OverflowBehavior=""OverflowBehavior.FlipAlways"" AnchorOrigin=""Origin.BottomCenter"" TransformOrigin=""Origin.TopCenter"" Paper=""false"">
        <MudPaper Outlined=""true"" Class=""px-4 py-8"">
            <MudText>Scroll your browser to see effect.</MudText>
        </MudPaper>
	</MudPopover>
</MudPaper>


@code {
    public bool _isOpen = true;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
}";

        public const string PopoverSimpleExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@ToggleOpen"">Open</MudButton>
<MudSwitch @bind-Checked=""@_isOpen"" Color=""Color.Primary"" />
<MudToggleIconButton @bind-Toggled=""@_isOpen"" Icon=""@Icons.Filled.Fullscreen"" Color=""@Color.Primary"" ToggledIcon=""@Icons.Filled.FullscreenExit"" ToggledColor=""@Color.Secondary"" />

<MudPopover Open=""@_isOpen"" Fixed=""true"" Class=""px-4 pt-4"">
    <div class=""d-flex flex-column"">
        <MudText>Content of the popover can be anything.</MudText>
        <MudButton OnClick=""@ToggleOpen"" Class=""ml-auto mr-n3 mb-1"" Color=""Color.Error"">Close</MudButton>
    </div>
</MudPopover>


@code{
    public bool _isOpen;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
}";

        public const string ProgressCircularDeterminateExample = @"@using System;
@using System.Threading;

@implements IDisposable

<MudProgressCircular Color=""Color.Default"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Primary"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Secondary"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Success"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Info"" Value=""@Value"" />

@code {
	public int Value { get; set; }

	public async void SimulateProgress()
	{
		Value = 0;
		do
		{
			if (_disposed)
			{
				return;
			}

			Value += 4;
			StateHasChanged();
			await Task.Delay(500);

		} while (Value < 100);

		SimulateProgress();
	}

	protected override void OnInitialized() => SimulateProgress();

	bool _disposed;
	public void Dispose() => _disposed = true;

}";

        public const string ProgressCircularInterminateExample = @"<MudProgressCircular Color=""Color.Default"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Primary"" Indeterminate=""true""/>
<MudProgressCircular Color=""Color.Secondary"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Success"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Info"" Indeterminate=""true"" />";

        public const string ProgressCircularSizesExample = @"<MudProgressCircular Color=""Color.Primary"" Size=""Size.Small"" Indeterminate=""true""/>
<MudProgressCircular Color=""Color.Primary"" Size=""Size.Medium"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Primary"" Size=""Size.Large"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Primary"" Style=""height:70px;width:70px;"" Indeterminate=""true"" />";

        public const string ProgressLinearBufferExample = @"<MudProgressLinear Color=""Color.Primary"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Secondary"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Tertiary"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Info"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Warning"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Error"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
@code {
	public int Value { get; set; }
	public int BufferValue { get; set; }

	public async void SimulateProgress()
	{
		Value = 5;
		BufferValue = 10;

		do
		{
			if (_disposed)
			{
				return;
			}

			Value += 4;
			BufferValue += 5;
			StateHasChanged();
			await Task.Delay(500);

		} while (Value < 100);

		SimulateProgress();
	}

	protected override void OnInitialized() => SimulateProgress();

	private bool _disposed;

	public void Dispose() => _disposed = true;
}";

        public const string ProgressLinearDeterminateExample = @"<MudProgressLinear Color=""Color.Primary"" Value=""@Value"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Secondary"" Value=""@Value"" Class=""my-7"" />

@code {
	public int Value { get; set; }

	public async void SimulateProgress()
	{
		Value = 0;
		do
		{
			if (_disposed)
			{
				return;
			}

			Value += 4;
			StateHasChanged();
			await Task.Delay(500);

		} while (Value < 100);

		SimulateProgress();
	}

	protected override void OnInitialized() => SimulateProgress();

	bool _disposed;
	public void Dispose() => _disposed = true;
}";

        public const string ProgressLinearInterminateExample = @"<MudProgressLinear Color=""Color.Primary"" Indeterminate=""true"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Secondary"" Indeterminate=""true"" Class=""my-7""/>";

        public const string ProgressLinearLabelsExample = @"<MudProgressLinear Color=""Color.Info"" Size=""Size.Large"" Value=""25"" Class=""my-7"">
    <MudText Typo=""Typo.subtitle1"" Color=""Color.Dark"">
        <b>25%</b>
    </MudText>
</MudProgressLinear>";

        public const string ProgressLinearMinMaxExample = @"<MudProgressLinear Value=""-2"" Min=""-7"" Max=""7"" />
<MudProgressLinear Value=""17.75"" Min=""17.0"" Max=""18.0"" Class=""my-7"" />
<MudProgressLinear Value=""100"" Min=""0"" Max=""100"" />";

        public const string ProgressLinearRoundedExample = @"<MudProgressLinear Color=""Color.Error"" Rounded=""true"" Size=""Size.Small"" Value=""25"" />
<MudProgressLinear Color=""Color.Warning"" Rounded=""true"" Size=""Size.Medium"" Value=""50"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Success"" Rounded=""true"" Size=""Size.Large"" Value=""75"" />";

        public const string ProgressLinearSizeExample = @"<MudProgressLinear Color=""Color.Dark"" Size=""Size.Small"" Value=""25"" />
<MudProgressLinear Color=""Color.Info"" Size=""Size.Medium"" Value=""50"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Tertiary"" Size=""Size.Large"" Value=""75"" />";

        public const string ProgressLinearStripedExample = @"<MudProgressLinear Color=""Color.Secondary"" Striped=""true"" Size=""Size.Medium"" Value=""50"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Primary"" Striped=""true"" Size=""Size.Large"" Value=""75"" Class=""my-7"" />";

        public const string ProgressLinearVerticalExample = @"<MudPaper Height=""360px"" Class=""d-flex justify-space-around mud-width-full"" Elevation=""0"">
    <MudProgressLinear Vertical=""true"" Color=""Color.Primary"" Size=""Size.Small"" Indeterminate=""true"" />
    <MudProgressLinear Vertical=""true"" Color=""Color.Primary"" Size=""Size.Medium"" Value=""@Value"" />
    <MudProgressLinear Vertical=""true"" Color=""Color.Primary"" Size=""Size.Medium"" Value=""25"">
        <MudText Typo=""Typo.subtitle1"" Color=""Color.Dark""><b>25</b></MudText>
    </MudProgressLinear>
    <MudProgressLinear Vertical=""true"" Color=""Color.Primary"" Size=""Size.Small"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" />
    <MudProgressLinear Vertical=""true"" Color=""Color.Primary"" Striped=""true"" Size=""Size.Large"" Value=""@Value"" />
</MudPaper>


@code {
    public int Value { get; set; }
    public int BufferValue { get; set; }

  public async void SimulateProgress()
	{
		Value = 5;
		BufferValue = 10;

		do
		{
			if (_disposed)
			{
				return;
			}

			Value += 4;
			BufferValue += 5;
			StateHasChanged();
			await Task.Delay(500);

		} while (Value < 100);

		SimulateProgress();
	}

    protected override void OnInitialized() => SimulateProgress();

    bool _disposed;
    public void Dispose() => _disposed = true;
}";

        public const string RadioContentPlacementExample = @"<MudGrid>
    <MudItem xs=""12"" md=""2"">
        <MudRadioGroup @bind-SelectedOption=""@Placement"">
            <MudRadio Color=""Color.Primary"" Option=""@(Placement.Top)"">Top</MudRadio>
            <MudRadio Color=""Color.Primary"" Option=""@(Placement.Bottom)"">Bottom</MudRadio>
            <MudRadio Color=""Color.Primary"" Option=""@(Placement.Start)"">Start</MudRadio>
            <MudRadio Color=""Color.Primary"" Option=""@(Placement.End)"">End</MudRadio>
            <MudRadio Color=""Color.Primary"" Option=""@(Placement.Left)"">Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Option=""@(Placement.Right)"">Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""8"" Class=""d-flex justify-center align-center my-auto"">
        <MudRadioGroup T=""string"">
            <MudRadio T=""string"" Placement=""@Placement"" Color=""Color.Secondary"">Content Placement</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""2"" Style=""width:100%""></MudItem>
</MudGrid>

@code {
    public Placement Placement { get; set; } = Placement.Right;
}";

        public const string RadioDenseExample = @"<MudRadioGroup @bind-SelectedOption=""Dense_Radio"">
    <MudRadio Option=""true"" Color=""Color.Primary"" Dense=""true"">Dense</MudRadio>
    <MudRadio Option=""false"" Color=""Color.Secondary"" Dense=""false"">Normal</MudRadio>
</MudRadioGroup>

@code {
    public bool Dense_Radio { get; set; } = true;
}";

        public const string RadioGroupColorExample = @"<MudRadioGroup T=""int"">
    <MudRadio Option=""1"" Color=""Color.Primary"" UnCheckedColor=""Color.Default"">One</MudRadio>
    <MudRadio Option=""2"" Color=""Color.Secondary"" UnCheckedColor=""Color.Default"">Two</MudRadio>
    <MudRadio Option=""3"" Color=""Color.Success"" UnCheckedColor=""Color.Error"">Three</MudRadio>
    <MudRadio Option=""4"" Color=""Color.Primary"" Disabled=""true"">Four</MudRadio>
</MudRadioGroup>";

        public const string RadioGroupExample = @"<MudForm>
    <MudRadioGroup @bind-SelectedOption=""@SelectedOption"">
        <MudRadio Option=""@(""Radio 1"")"" Color=""Color.Primary"">Primary</MudRadio>
        <MudRadio Option=""@(""Radio 2"")"" Color=""Color.Secondary"">Secondary</MudRadio>
        <MudRadio Option=""@(""Radio 3"")"">Default</MudRadio>
        <MudRadio Option=""@(""Radio 4"")"" Color=""Color.Primary"" Disabled=""true"">Disabled</MudRadio>
    </MudRadioGroup>
</MudForm>

<div class=""d-flex align-center"">
    <MudButton Variant=""Variant.Outlined"" OnClick=""Reset"">Reset</MudButton>
    <MudText Class=""ml-4"">Selected Option: @SelectedOption</MudText>
</div>

@code {
    public string SelectedOption { get; set; }

    private void Reset()
    {
        SelectedOption = null;
    }
}";

        public const string RadioKeyboardNavigationExample = @"<MudForm>
    <MudRadioGroup @bind-SelectedOption=""@SelectedOption"">
        <MudRadio Option=""@(""Radio 1"")"" Color=""Color.Primary"">Primary</MudRadio>
        <MudRadio Option=""@(""Radio 2"")"" Color=""Color.Secondary"">Secondary</MudRadio>
        <MudRadio Option=""@(""Radio 3"")"" Color=""Color.Tertiary"">Tertiary</MudRadio>
        <MudRadio Option=""@(""Radio 4"")"">Default</MudRadio>
        <MudRadio Option=""@(""Radio 4"")"" Color=""Color.Primary"" Disabled=""true"">Disabled</MudRadio>
    </MudRadioGroup>
</MudForm>

@code {
    public string SelectedOption { get; set; }
}";

        public const string RadioSizeExample = @"<MudRadioGroup @bind-SelectedOption=""Radio_Size"">
    <MudRadio Option=""1"" Color=""Color.Primary"" Size=""Size.Small"">Small</MudRadio>
    <MudRadio Option=""2"" Color=""Color.Secondary"" Size=""Size.Medium"">Medium</MudRadio>
    <MudRadio Option=""3"" Color=""Color.Tertiary"" Size=""Size.Large"">Large</MudRadio>
</MudRadioGroup>

@code { 
    public int Radio_Size { get; set; } = 2;
}";

        public const string BasicRatingExample = @"<MudRating SelectedValue=""2"" />";

        public const string RatingBindingsExample = @"<div class=""d-flex flex-column align-center"">
    <MudRating @bind-SelectedValue=""selectedVal"" HoveredValueChanged=""HandleHoveredValueChanged"" />
    <MudText Typo=""Typo.subtitle2"" Class=""deep-purple-text mt-2"">@LabelText</MudText>
</div>


@code {
    private int selectedVal = 0;
    private int? activeVal;

    private void HandleHoveredValueChanged(int? val) => activeVal = val;

    private string LabelText => (activeVal ?? selectedVal) switch
    {
        1 => ""Very bad"",
        2 => ""Bad"",
        3 => ""Sufficient"",
        4 => ""Good"",
        5 => ""Awesome!"",
        _ => ""Rate our product!""
    };
}";

        public const string RatingDisabledExample = @"<MudRating Disabled=""true"" SelectedValue=""2"" />";

        public const string RatingIconsAndColorExample = @"<div class=""d-flex flex-column align-center"">
    <MudRating SelectedValue=""2"" FullIcon=""@Icons.Material.Filled.Visibility"" EmptyIcon=""@Icons.Material.Filled.VisibilityOff"" />
    <MudRating SelectedValue=""2"" FullIcon=""@Icons.Material.Filled.Favorite"" EmptyIcon=""@Icons.Material.Filled.FavoriteBorder"" Color=""Color.Secondary"" />
</div>";

        public const string RatingKeyboardNavigationExample = @"<div class=""d-flex flex-column align-center"">
    <MudRating SelectedValue=""2"" />
    <MudRating SelectedValue=""3"" MaxValue=""10"" />
</div>";

        public const string RatingMaxValueExample = @"<div class=""d-flex flex-column align-center"">
    <MudRating SelectedValue=""1"" MaxValue=""3"" />
    <MudRating SelectedValue=""2"" />
    <MudRating SelectedValue=""3"" MaxValue=""10"" />
</div>";

        public const string RatingReadonlyExample = @"<MudRating ReadOnly=""true"" SelectedValue=""2"" />";

        public const string RatingSizesExample = @"<div class=""d-flex flex-column align-center"">
    <MudRating SelectedValue=""2"" Size=""Size.Small"" />
    <MudRating SelectedValue=""2"" Size=""Size.Medium"" />
    <MudRating SelectedValue=""2"" Size=""Size.Large"" />
</div>";

        public const string RatingTestExample = @"@*I delete this file later*@

<MudForm>

    <h3>Default</h3>
    <MudRating SelectedValue=""2"" />
    <h3>More Values</h3>
    <MudRating SelectedValue=""5"" MaxValue=""10"" />
    <h3>Disabled</h3>
    <MudRating SelectedValue=""2"" Disabled=""true"" />
    <h3>Custom Icons, Color</h3>
    <MudRating SelectedValue=""2"" FullIcon=""@Icons.Material.Filled.Favorite"" EmptyIcon=""@Icons.Material.Filled.FavoriteBorder"" Color=""Color.Secondary"" />
    <div class=""d-flex flex-column my-6"">
        <h3>Size</h3>
        <MudRating Size=""Size.Small"" />
        <MudRating Size=""Size.Medium"" />
        <MudRating Size=""Size.Large"" />
    </div>
    <div class=""d-flex flex-column align-center my-6"">
        <h3>Hover feedback</h3>
        <MudRating @bind-SelectedValue=""selectedVal"" HoveredValueChanged=""HandleHoveredValueChanged"" />
        <MudText Typo=""Typo.subtitle1"" Class=""deep-purple-text"">@GetLabelText()</MudText>
    </div>

    <div class=""d-flex flex-column align-center my-12"">
        <h3>Normal</h3>
        <MudRating SelectedValue=""2"" />
    </div>

    <div class=""d-flex flex-column align-center my-12"">
        <h3>Custom styles</h3>
        <MudRating SelectedValue=""2"" Style=""transform: rotate(25deg);"" RatingItemsStyle=""padding: 0 15px; box-sizing: content-box;"" />
    </div>

</MudForm>

@code {
    private int selectedVal = 0;
    private int? activeVal;

    private void HandleSelectedValueChanged(int val) => selectedVal = val;

    private void HandleHoveredValueChanged(int? val) => activeVal = val;

    private string GetLabelText() => (activeVal ?? selectedVal) switch
    {
        1 => ""Very bad"",
        2 => ""Bad"",
        3 => ""Sufficient"",
        4 => ""Good"",
        5 => ""Awesome!"",
        _ => ""Rate our product!""
    };
}";

        public const string CustomScrollToTopExample = @"<div id=""another_unique_identifier"" class=""ma-0"" style=""height:300px;overflow: auto;"">
    <MudPaper Elevation=""0"" Height=""3500px"" Class=""d-flex flex-column justify-space-between py-6"">
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Scroll inside this container</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Some initial long text</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Middle text</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Bottom text</MudText>
        <MudScrollToTop TopOffset=""100"" Selector=""#another_unique_identifier"" Style=""z-index:2001;"">
            <div class=""mud-theme-secondary px-3 py-6 mud-elevation-16 rounded-xl fixed"" style=""bottom:20px;left:20px;"">Scroll to top custom button</div>
        </MudScrollToTop>
    </MudPaper>
</div>";

        public const string DefaultScrollToTopExample = @"<MudScrollToTop>
    <MudFab Color=""Color.Tertiary"" Icon=""@Icons.Filled.ArrowCircleUp"" />
</MudScrollToTop>";

        public const string ScrollToTopExample = @"<div id=""unique_id_scroll_section"" class=""ma-0"" style=""height:300px;overflow: auto;"">
    <MudPaper Elevation=""0"" Height=""3500px"" Class=""d-flex flex-column justify-space-between py-6"">
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Scroll inside this container</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Some initial long text</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Middle text</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Bottom text</MudText>
        <MudScrollToTop TopOffset=""100""
                        OnScroll=""OnScroll""
                        Selector=""#unique_id_scroll_section""
                        VisibleCssClass=""visible absolute""
                        HiddenCssClass=""invisible"">
            <MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Filled.ArrowUpward"" Color=""Color"">Go to top</MudButton>
        </MudScrollToTop>
    </MudPaper>
</div>

@code{
    Color Color = Color.Success;
    private void OnScroll(ScrollEventArgs e)
    {
        Color = (e.FirstChildBoundingClientRect.Top*-1) switch
        {
            var x when x<  500 => Color.Primary,
            var x when x < 1500 => Color.Secondary,
            var x when x < 2500 => Color.Tertiary,
            _=>Color.Error
        };
    }
}";

        public const string MultiSelectCustomizedExample = @"@using System.Linq

<MudSelect MultiSelectionTextFunc=""@(new Func<List<string>, string>(GetMultiSelectionText))"" MultiSelection=""true"" @bind-Value=""value"" @bind-SelectedValues=""options"" T=""string"" Label=""US States"" AdornmentIcon=""@Icons.Material.Filled.Search"" AnchorOrigin=""Origin.BottomCenter"">
    @foreach (var state in states)
    {
        <MudSelectItem T=""string"" Value=""@state"">@state</MudSelectItem>
    }
</MudSelect>

<MudSwitch @bind-Checked=""multiselectionTextChoice"" Class=""mud-width-full"" Color=""Color.Primary"">MultiSelection Text choice</MudSwitch>  

<MudGrid Class=""mt-3 px-4"">
    <MudItem xs=""6"">
        <MudText Typo=""Typo.subtitle2"">Value:</MudText>
        <MudText Typo=""Typo.subtitle2"">""</MudText>
        <MudText Typo=""Typo.body2"" Class=""pl-4"">@value</MudText>
        <MudText Typo=""Typo.subtitle2"">""</MudText>
    </MudItem>
    <MudItem xs=""6"">
        <MudText Typo=""Typo.subtitle2"">SelectedValues: HashSet&lt;string&gt;</MudText>
        <MudText Typo=""Typo.subtitle2"">{</MudText>
        <MudText Typo=""Typo.body2"" Class=""pl-4"">@(string.Join("", "", options.Select(x=>$""\""{x}\"""")))</MudText>
        <MudText Typo=""Typo.subtitle2"">}</MudText>
    </MudItem>
</MudGrid>

@code {
    private bool multiselectionTextChoice;
    private string value { get; set; } = ""Nothing selected"";
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { ""Alaska"" };

    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (multiselectionTextChoice)
        {
            return $""Selected state{(selectedValues.Count > 1 ? ""s"" : """")}: {string.Join("", "", selectedValues.Select(x => x))}"";
        }
        else
        {
            return $""{selectedValues.Count} state{(selectedValues.Count > 1 ? ""s have"":"" has"")} been selected"";
        }
    }
}";

        public const string MultiSelectExample = @"<MudSelect T=""string"" Label=""US States"" MultiSelection=""true"" @bind-Value=""value"" @bind-SelectedValues=""options"">
    @foreach (var state in states)
    {
        <MudSelectItem T=""string"" Value=""@state"">@state</MudSelectItem>
    }
</MudSelect>

<MudGrid Class=""mt-6 px-4"">
    <MudItem xs=""6"">
        <MudText Typo=""Typo.subtitle2"">Value:</MudText>
        <MudText Typo=""Typo.subtitle2"">""</MudText>
        <MudText Typo=""Typo.body2"" Class=""pl-4"">@value</MudText>
        <MudText Typo=""Typo.subtitle2"">""</MudText>
    </MudItem>
    <MudItem xs=""6"">
        <MudText Typo=""Typo.subtitle2"">SelectedValues: HashSet&lt;string&gt;</MudText>
        <MudText Typo=""Typo.subtitle2"">{</MudText>
        <MudText Typo=""Typo.body2"" Class=""pl-4"">@(string.Join("", "", options.Select(x=>$""\""{x}\"""")))</MudText>
        <MudText Typo=""Typo.subtitle2"">}</MudText>
    </MudItem>
</MudGrid>

@code {

    private string value { get; set; } = ""Nothing selected"";
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { ""Alaska"" };

    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

}";

        public const string MultiSelectSelectAllExample = @"@using System.Linq


<MudSelect T=""string"" MultiSelection=""true"" SelectAll=""true"" SelectAllText=""Select all felines"" HelperText=""@value"" @bind-Value=""value"" @bind-SelectedValues=""options"" MultiSelectionTextFunc=""@(new Func<List<string>, string>(GetMultiSelectionText))"" Label=""Felines"" AdornmentIcon=""@Icons.Material.Filled.Search"">
    @foreach (var feline in felines)
    {
        <MudSelectItem T=""string"" Value=""@feline"">@feline</MudSelectItem>
    }
</MudSelect>

@code { 
    private string value { get; set; } = ""Nothing selected"";
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { ""Lion"" };

    private string[] felines =
    {
        ""Jaguar"", ""Leopard"", ""Lion"", ""Lynx"", ""Panther"", ""Puma"", ""Tiger""
    };

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $""{selectedValues.Count} feline{(selectedValues.Count > 1 ? ""s have"" : "" has"")} been selected"";
    }
}";

        public const string SelectAdvancedPopoverExample = @"<MudSelect T=""string"" Label=""Search"" AnchorOrigin=""Origin.CenterLeft"" TransformOrigin=""Origin.CenterRight"" Variant=""Variant.Outlined"" AdornmentIcon=""@Icons.Material.Filled.Search"" AdornmentColor=""Color.Primary"">
    <MudSelectItem Value=""@(""foo"")"">Foo</MudSelectItem>
    <MudSelectItem Value=""@(""bar"")"">Bar</MudSelectItem>
</MudSelect>

<MudSelect T=""string"" Label=""Open Warnings"" AnchorOrigin=""Origin.CenterCenter"" TransformOrigin=""Origin.CenterCenter"" Variant=""Variant.Outlined"" AdornmentIcon=""@Icons.Material.Filled.OpenWith"" Adornment=""Adornment.Start"" AdornmentColor=""Color.Warning"">
    <MudSelectItem Value=""@(""foo"")"">Foo</MudSelectItem>
    <MudSelectItem Value=""@(""bar"")"">Bar</MudSelectItem>
</MudSelect>

<MudSelect T=""string"" Label=""Check Code"" AnchorOrigin=""Origin.BottomLeft"" TransformOrigin=""Origin.TopRight"" Variant=""Variant.Outlined"" AdornmentIcon=""@Icons.Material.Filled.Code"" CloseIcon=""@Icons.Material.Filled.SouthWest"" Adornment=""Adornment.Start"" AdornmentColor=""Color.Dark"">
    <MudSelectItem Value=""@(""foo"")"">Foo</MudSelectItem>
    <MudSelectItem Value=""@(""bar"")"">Bar</MudSelectItem>
</MudSelect>";

        public const string SelectCustomConverterExample = @"<MudText Typo=""Typo.h6"" Class=""mud-width-full"">@(pizza == null ? ""Nothing selected."" : $""Pizza: {pizza.Name}"")</MudText>

<MudSelect T=""Pizza"" @bind-Value=""@pizza"" ToStringFunc=""@converter"" Label=""Select your pizza"" AnchorOrigin=""Origin.BottomCenter"" Variant=""Variant.Outlined"" Clearable>
    <MudSelectItem Value=""@(new Pizza() { Name=""Cardinale""})"" />
    <MudSelectItem Value=""@(new Pizza() { Name=""Diavolo""})"" />
    <MudSelectItem Value=""@(new Pizza() { Name=""Margarita""})"" />
    <MudSelectItem Value=""@(new Pizza() { Name=""Spinaci""})"" />
</MudSelect>

@code {
    Pizza pizza = new Pizza { Name = ""Diavolo"" };

    public class Pizza
    {
        public string Name { get; set; }

        // Note: this is important so the select can compare pizzas
        public override bool Equals(object o) {
            var other = o as Pizza;
            return other?.Name==Name;
        }

        // Note: this is important so the select can compare pizzas
        public override int GetHashCode() => Name.GetHashCode();
    }

    Func<Pizza,string> converter = p => p?.Name;
}";

        public const string SelectDenseExample = @"<MudSelect Dense=""true"" T=""string"" Label=""Coffee"" Variant=""Variant.Text"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Mike Rex"")"" />
</MudSelect>
<MudSelect Dense=""true"" T=""string"" Label=""Coffee"" Variant=""Variant.Outlined"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Henon Rex"")"" />
</MudSelect>
<MudSelect Dense=""true"" T=""string"" Label=""Coffee"" Variant=""Variant.Filled"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Benno Rex"")"" />
</MudSelect>";

        public const string SelectKeyboardNavigationExample = @"<MudSelect T=""string"" Label=""Select Coffee With Keys"" AnchorOrigin=""Origin.BottomCenter"">
    <MudSelectItem Value=""@(""Cappuccino"")"" />
    <MudSelectItem Value=""@(""Cafe Latte"")"" />
    <MudSelectItem Value=""@(""Espresso"")"" />
    <MudSelectItem Value=""@(""Irish Coffee"")"" />
</MudSelect>

<MudSelect T=""string"" Label=""US States"" HelperText=""Pick your favorite states with keys"" MultiSelection=""true"" @bind-Value=""value"" @bind-SelectedValues=""options"">
    @foreach (var state in states)
    {
        <MudSelectItem T=""string"" Value=""@state"">@state</MudSelectItem>
    }
</MudSelect>

@code {

    private string value { get; set; } = ""Nothing selected"";
    private IEnumerable<string> options { get; set; } = new List<string>() { ""Alaska"" };

    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };
}";

        public const string SelectMarginExample = @"<MudSelect Margin=""Margin.Dense"" T=""string"" Label=""Coffee"" Variant=""Variant.Text"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Mike Rex"")"" />
</MudSelect>
<MudSelect Margin=""Margin.Dense"" T=""string"" Label=""Coffee"" Variant=""Variant.Outlined"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Henon Rex"")"" />
</MudSelect>
<MudSelect Margin=""Margin.Dense"" T=""string"" Label=""Coffee"" Variant=""Variant.Filled"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Benno Rex"")"" />
</MudSelect>";

        public const string SelectNumericCollectionExample = @"<MudSelect T=""double"" Label=""Price (Datatype: double)"" Clearable=""true"" Required=""true"">
    @foreach (var price in prices)
    {
    <MudSelectItem Value=""@price"" />
    }
</MudSelect>

<MudSelect T=""double?"" Label=""Price (Datatype: double?)"" Clearable=""true"" Required=""true"">
    @foreach (double? price in prices)
    {
    <MudSelectItem Value=""@price"" />
    }
</MudSelect>

@code
{
    private double[] prices = { 4.50, 4.99, 3.60, 21.99 };
}";

        public const string SelectPresentationExample = @"<MudSelect @bind-Value=""@country"" Label=""With render fragements"" Variant=""Variant.Outlined"">
    <MudSelectItem Value=""@(""Austria"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/commons/4/41/Flag_of_Austria.svg"" height=""14"" class=""mr-1"" /> Austria
    </MudSelectItem>
    <MudSelectItem Value=""@(""Hungary"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/commons/0/00/Flag_of_Hungary.png"" height=""14"" class=""mr-1"" /> Hungary
    </MudSelectItem>
    <MudSelectItem Value=""@(""Sweden"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/commons/4/4b/Flag_of_Sweden_fixed.svg"" height=""14"" class=""mr-1"" /> Sweden
    </MudSelectItem>
</MudSelect>

<MudSelect @bind-Value=""@country"" Label=""Without render fragements"" Variant=""Variant.Outlined"">
    <MudSelectItem Value=""@(""Austria"")"" />
    <MudSelectItem Value=""@(""Hungary"")"" />
    <MudSelectItem Value=""@(""Sweden"")"" />
</MudSelect>

<MudSelect @bind-Value=""@country"" Label=""Austria not representable"" Variant=""Variant.Outlined"">
    <MudSelectItem Value=""@(""Germany"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/en/b/ba/Flag_of_Germany.svg"" height=""14"" class=""mr-1"" /> Germany
    </MudSelectItem>
    <MudSelectItem Value=""@(""Hungary"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/commons/0/00/Flag_of_Hungary.png"" height=""14"" class=""mr-1"" /> Hungary
    </MudSelectItem>
    <MudSelectItem Value=""@(""Sweden"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/commons/4/4b/Flag_of_Sweden_fixed.svg"" height=""14"" class=""mr-1"" /> Sweden
    </MudSelectItem>
</MudSelect>

@code {
    string country=""Austria"";
}";

        public const string SelectPropsExample = @"<MudSelect HelperText=""Helper text"" T=""string"" Label=""With Helper"" Variant=""Variant.Text"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Mike Rex"")"" />
</MudSelect>
<MudSelect Disabled=""true"" T=""string"" Label=""Disabled"" Variant=""Variant.Outlined"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Henon Rex"")"" />
</MudSelect>
<MudSelect ReadOnly=""true"" T=""string"" Label=""Read Only"" Variant=""Variant.Filled"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Benno Rex"")"" />
</MudSelect>";

        public const string SelectUsageExample = @"@using Microsoft.AspNetCore.Components
@using System.Globalization;

<MudSelect @bind-Value=""stringValue"" Label=""Select fast-food"" HelperText=""String"" Placeholder=""Please Select"" AdornmentIcon=""@Icons.Material.Filled.Fastfood"" AdornmentColor=""Color.Primary"">
    <MudSelectItem Value=""@(""Pizza"")"" Disabled=""true"">Pizza (Disabled)</MudSelectItem>
    <MudSelectItem Value=""@(""Burger"")"">Burger</MudSelectItem>
    <MudSelectItem Value=""@(""Hotdog"")"">Hot Dog</MudSelectItem>
</MudSelect>

<MudSelect @bind-Value=""enumValue"" Label=""Select drink"" HelperText=""Enum"" OpenIcon=""@Icons.Material.Filled.LocalDrink"" AdornmentColor=""Color.Secondary"">
    @foreach (Drink item in Enum.GetValues(typeof(Drink)))
    {
        <MudSelectItem Value=""@item"">@item</MudSelectItem>
    }
</MudSelect>

<MudSelect Placeholder=""Select culture"" @bind-Value=""cultureValue"" HelperText=""CultureInfo"" ToStringFunc=""@convertFunc"" CloseIcon=""@Icons.Material.Filled.Flag"" AdornmentColor=""Color.Tertiary"">
    <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""en-US""))"" />
    <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""de-AT""))"" />
    <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""pt-BR""))"" />
    <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""zh-CN""))""/>
</MudSelect>

<div class=""d-flex mud-width-full align-center mt-8"">
    <MudText Typo=""Typo.subtitle1"" Class=""mr-2"">Selected values: </MudText>
    <MudChip>@(stringValue ?? ""Select fast-food"")</MudChip>
    <MudChip Color=""Color.Primary"">@enumValue</MudChip>
    <MudChip Color=""Color.Secondary"">@(cultureValue?.DisplayName ?? ""Select culture"")</MudChip>
</div>

@code {
    private string stringValue { get; set; }
    private Drink enumValue { get; set; } = Drink.HotWater;
    public enum Drink { Tea, SparklingWater, SoftDrink, Cider, Beer, Wine, Moonshine, Wodka, Cola, GreeTea, FruitJuice, Lemonade, HotWater, SpringWater, IceWater,  }
    private CultureInfo cultureValue { get; set; }
    private Func<CultureInfo, string> convertFunc = ci => ci?.DisplayName;
}";

        public const string SelectVariantsExample = @"<MudSelect T=""string"" Label=""Coffee"" AnchorOrigin=""Origin.BottomCenter"">
    <MudSelectItem Value=""@(""Cappuccino"")"" />
    <MudSelectItem Value=""@(""Cafe Latte"")"" />
    <MudSelectItem Value=""@(""Espresso"")"" />
</MudSelect>
<MudSelect T=""double"" Label=""Price"" Variant=""Variant.Outlined"" AnchorOrigin=""Origin.BottomCenter"">
    <MudSelectItem T=""double"" Value=""4.50""/>
    <MudSelectItem T=""double"" Value=""4.99""/>
    <MudSelectItem T=""double"" Value=""3.60""/>
</MudSelect>
<MudSelect T=""Pizza"" Label=""Pizza"" Variant=""Variant.Filled"" AnchorOrigin=""Origin.BottomCenter"">
    <MudSelectItem Value=""@(new Pizza(""Cardinale""))"" />
    <MudSelectItem Value=""@(new Pizza(""Diavolo""))"" />
    <MudSelectItem Value=""@(new Pizza(""Margarita""))"" />
    <MudSelectItem Value=""@(new Pizza(""Spinaci""))"" />
</MudSelect>

@code {
    public class Pizza
    {
        public Pizza(string name)
        {
            Name = name;
        }

        public readonly string Name;

        // Note: this is important so the MudSelect can compare pizzas
        public override bool Equals(object o) {
            var other = o as Pizza;
            return other?.Name==Name;
        }

        // Note: this is important too!
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;

        // Implement this for the Pizza to display correctly in MudSelect
        public override string ToString() => Name;
    }
}";

        public const string SimpleTableExample = @"<MudSimpleTable Style=""overflow-x: auto;"">
    <thead>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in rows)
        {
            <tr>
                @foreach (var x in row.Split())
                {
                    <td>@x</td>
                }
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    string[] headings = { ""ID"", ""Name"", ""Email"", ""Gender"", ""IP Address"" };
    string[] rows = {
        @""1 Krishna kpartner0@usatoday.com Male 28.25.250.202"",
        @""2 Webb wstitle1@ning.com Male 237.168.134.114"",
        @""3 Nathanil nneal2@cyberchimps.com Male 92.6.0.175"",
        @""4 Adara alockwood3@patch.com Female 182.174.217.152"",
        @""5 Cecilius cchaplin4@shinystat.com Male 195.124.144.18"",
        @""6 Cicely cemerine9@soup.io Female 138.94.191.43"",
    };
}";

        public const string SimpleTableFixedHeaderExample = @"<MudSimpleTable Hover=""true"" Dense=""true"" FixedHeader=""@fixedheader"" Style=""@(fixedheader?""height:300px;"":"""")"">
    <thead>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in rows)
        {
            <tr>
                @foreach (var x in row.Split())
                {
                    <td>@x</td>
                }
            </tr>
        }
    </tbody>
</MudSimpleTable>
<MudSwitch @bind-Checked=""@fixedheader"">Fixed Header</MudSwitch>

@code {
    bool fixedheader = true;
    string[] headings = { ""ID"", ""Name"", ""Email"", ""Gender"", ""IP Address"" };
    string[] rows = {
        @""1 Krishna kpartner0@usatoday.com Male 28.25.250.202"",
        @""2 Webb wstitle1@ning.com Male 237.168.134.114"",
        @""3 Nathanil nneal2@cyberchimps.com Male 92.6.0.175"",
        @""4 Adara alockwood3@patch.com Female 182.174.217.152"",
        @""5 Cecilius cchaplin4@shinystat.com Male 195.124.144.18"",
        @""6 Cicely cemerine9@soup.io Female 138.94.191.43"",
        @""7 Caleb cwebber0@usatoday.com Male 28.25.250.202"",
        @""8 Grayson gcarlyle@bt.com Male 173.174.94.114"",
        @""9 Lori lo@independentweek.com Female 134.16.20.191"",
        @""10 Natasha nkerensky@ilclan.com Female 217.217.18.15"",
        @""11 Andrew aredburn@shinystat.com Male 20.114.244.58"",
        @""12 Katherine ksteiner@fedsun.io Female 122.64.153.22"",
    };
}";

        public const string SimpleTableHoverDenseExample = @"<MudSimpleTable Dense=""@dense"" Hover=""@hover"" Bordered=""@bordered"" Striped=""@striped"" Style=""overflow-x: auto;"">
    <thead>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in rows)
        {
            <tr>
                @foreach (var x in row.Split())
                {
                    <td>@x</td>
                }
            </tr>
        }
    </tbody>
</MudSimpleTable>
<MudToolBar>
    <MudSwitch @bind-Checked=""@hover"" Color=""Color.Primary"">Hover</MudSwitch>
    <MudSwitch @bind-Checked=""@dense"" Color=""Color.Secondary"">Dense</MudSwitch>
    <MudSwitch @bind-Checked=""@striped"" Color=""Color.Tertiary"">Striped</MudSwitch>
    <MudSwitch @bind-Checked=""@bordered"" Color=""Color.Warning"">Bordered</MudSwitch>
</MudToolBar>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    string[] headings = { ""ID"", ""Name"", ""Email"", ""Gender"", ""IP Address"" };
    string[] rows = {
        @""1 Krishna kpartner0@usatoday.com Male 28.25.250.202"",
        @""2 Webb wstitle1@ning.com Male 237.168.134.114"",
        @""3 Nathanil nneal2@cyberchimps.com Male 92.6.0.175"",
        @""4 Adara alockwood3@patch.com Female 182.174.217.152"",
        @""5 Cecilius cchaplin4@shinystat.com Male 195.124.144.18"",
        @""6 Cicely cemerine9@soup.io Female 138.94.191.43"",
    };
}";

        public const string SkeletonAnimationsExample = @"<MudSkeleton />
<MudSkeleton Animation=""Animation.False"" />
<MudSkeleton Animation=""Animation.Wave"" />";

        public const string SkeletonPulsateExample = @"<MudCard>
    <MudSkeleton SkeletonType=""SkeletonType.Rectangle"" Height=""200px""/>
    <MudCardContent>
        <MudSkeleton Width=""30%"" Height=""42px;"" />
        <MudSkeleton Width=""80%"" />
        <MudSkeleton Width=""100%"" />
    </MudCardContent>
    <MudCardActions>
        <MudSkeleton Width=""64px"" Height=""40px"" Class=""ml-2"" />
        <MudSkeleton Width=""105px"" Height=""40px"" Class=""ml-3"" />
    </MudCardActions>
</MudCard>

<MudCard>
    <MudCardMedia Image=""images/door.jpg"" Height=""200"" />
    <MudCardContent>
        <MudText Typo=""Typo.h5"">Old Paint</MudText>
        <MudText Typo=""Typo.body2"">Old paint found on a stone house door.</MudText>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Share</MudButton>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string SkeletonVariantsExample = @"<MudSkeleton />
<MudSkeleton SkeletonType=""SkeletonType.Circle"" Width=""50px"" Height=""50px"" />
<MudSkeleton SkeletonType=""SkeletonType.Rectangle"" Width=""200px"" Height=""110px"" />";

        public const string SkeletonWaveExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudSkeleton SkeletonType=""SkeletonType.Circle"" Animation=""Animation.Wave"" Height=""40px"" Width=""40px""/>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudSkeleton Animation=""Animation.Wave"" Width=""40%"" />
            <MudSkeleton Animation=""Animation.Wave"" Width=""60%"" />
        </CardHeaderContent>
    </MudCardHeader>
    <MudSkeleton SkeletonType=""SkeletonType.Rectangle"" Animation=""Animation.Wave"" Height=""250px"" />
    <MudCardContent>
        <MudSkeleton Animation=""Animation.Wave"" />
    </MudCardContent>
    <MudCardActions>
        <MudSkeleton SkeletonType=""SkeletonType.Circle"" Animation=""Animation.Wave"" Height=""30px"" Width=""30px"" Class=""ml-2 mb-2"" />
        <MudSkeleton SkeletonType=""SkeletonType.Circle"" Animation=""Animation.Wave"" Height=""30px"" Width=""30px"" Class=""ml-3 mb-2"" />
    </MudCardActions>
</MudCard>


<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar>I</MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo=""Typo.body1"">Istra Croatia</MudText>
            <MudText Typo=""Typo.body2"">Peninsula in Europe</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon=""@Icons.Material.Filled.Settings"" Color=""Color.Default"" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardMedia Image=""images/pilars.jpg"" Height=""250"" />
    <MudCardContent>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon=""@Icons.Material.Filled.Favorite"" Color=""Color.Default"" />
        <MudIconButton Icon=""@Icons.Material.Filled.Share"" Color=""Color.Default"" />
    </MudCardActions>
</MudCard>";

        public const string SliderBasicExample = @"<MudSlider Value=""@value"">Volume</MudSlider>
<MudSlider Disabled=""true"" Value=""@(20)"">Disabled Slider</MudSlider>


@code {
    double value = 50.0;
}";

        public const string SliderFilledExample = @"<MudSlider Value=""@value"" Variant=""Variant.Filled"">Volume</MudSlider>

@code {
    double value = 50.0;
}";

        public const string SliderMinMaxExample = @"<MudSlider @bind-Value=""value1"" Min=""20"" Max=""80"" Color=""Color.Info"">Value: @value1.ToString()</MudSlider>
<MudSlider @bind-Value=""value2"" Min=""-1"" Max=""1"" Step=""0.05"" Color=""Color.Error"">Value: @value2.ToString(""F2"")</MudSlider>


@code {
    public double value1 = 50;
    public double value2 = -0.75;
}";

        public const string SliderSizeExample = @"<MudSlider Size=""Size.Small"" Value=""@value""/>
<MudSlider Size=""Size.Medium"" Value=""@value""/>
<MudSlider Size=""Size.Large"" Value=""@value""/>

@code {
    int value = 50;
}";

        public const string SliderStepsExample = @"<MudSlider Step=""10"" Value=""70"" Color=""Color.Success"" />
<MudSlider Step=""25"" Value=""50"" Color=""Color.Warning"" />";

        public const string SliderTickLabelExample = @"<MudSlider TickMarks=""true"" TickMarkLabels=""@labels"" Step=""10"" Value=""@value"" />
<MudSlider TickMarks=""true"" TickMarkLabels=""@labels"" Step=""25"" Value=""@value""/>

@code {
    int value = 50;
    string[] labels = new string[] { ""Korv"", ""Fisk"", ""Äpple"", ""Groda"", ""Köttbullar"", ""Pizza"" };
}";

        public const string SliderTickMarkExample = @"<MudSlider TickMarks=""true"" Step=""10"" Value=""@value"" />

@code {
    int value = 50;
}";

        public const string SliderValueLabelExample = @"<MudSlider Value=""@value"" ValueLabel=""true"" />

@code {
    double value = 50.0;
}";

        public const string SliderVerticalExample = @"<MudSlider Value=""@value"" Vertical=""true"">Vertical</MudSlider>
<MudSlider Value=""@value"" Vertical=""true""/>


@code {
    double value = 50.0;
}";

        public const string SnackbarActionButtonExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@Show"">
    Open Action Snackbar
</MudButton>

@code {

    void Show()
    {
        Snackbar.Add(""Ooops. Something really bad happened!"", Severity.Normal, config =>
        {
            config.Action = ""Help"";
            config.ActionColor = Color.Primary;
            config.Onclick = snackbar =>
            {
                Help();
                return Task.CompletedTask;
            };
        });
    }

    public void Help()
    {
        Snackbar.Add(""Please check the reactor temperature and try again"");
    }
}";

        public const string SnackbarConfigurationExample = @"@inject ISnackbar Snackbar

<MudButton @onclick=""@(() => Snackbar.Add(""My Close button is gone!"", Severity.Normal, config => { config.ShowCloseIcon = false; }))"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Modified Snackbar
</MudButton>";

        public const string SnackbarCustomIconExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@(() =>
    Snackbar.Add(""Snackbar with a custom icon, color and size."", Severity.Info, config =>
        {
            config.Icon = Icons.Custom.Brands.GitHub;
            config.IconColor = Color.Warning;
            config.IconSize = Size.Large;
        }))"">

    Open Snackbar
</MudButton>";

        public const string SnackbarFromCustomComponentExample = @"@inject ISnackbar SnackbarService

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@OnClick"">Show a snackbar with a custom component</MudButton>

@code {
    private void OnClick()
    {
        SnackbarService.Add<MudChip>(new Dictionary<string, object>() {
            { ""Text"", ""This is a snackbar with a chip!"" },
            { ""Color"", Color.Primary }
        });
    }
}";

        public const string SnackbarFromRenderFragmentExample = @"@inject ISnackbar SnackbarService

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@OnClick"">Show a RenderFragment snackbar</MudButton>

@code {
    private void OnClick()
    {
        SnackbarService.Add
        (
            @<div>
                <h3>Hi from a RenderFragment</h3>
                <ul>
                    <li>Here's a regular item</li>
                    <li>Here's a <strong>bold item</strong></li>
                    <li>Here's an <em>italicized item</em></li>
                </ul>
            </div>
        );
    }
}";

        public const string SnackbarHtmlInMessageExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@(() => Snackbar.Add($""<ul><li>Item {++count}</li><li>Item {++count}</li></ul>""))"">
    Open Snackbar
</MudButton>

@code
{
    private int count = 0;
}";

        public const string SnackbarNavigationExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@AddCloseAfterNavSnackbar"">
   Closes After Navigation
</MudButton>

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@AddSnackbar"">
    Default Snackbar
</MudButton>

@code{
    public void AddSnackbar()
    {
        Snackbar.Add(""Remains open after navigation."", Severity.Normal);
    }

    public void AddCloseAfterNavSnackbar()
    {
        Snackbar.Add(""Will close after navigation."", Severity.Normal, (options) =>
        {
            options.CloseAfterNavigation = true;
        });
    }
}";

        public const string SnackbarNoIconExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@(() => Snackbar.Add(""Snackbar with no icon."", Severity.Success, config => { config.HideIcon = true; }))"">
    Open Snackbar
</MudButton>";

        public const string SnackbarOnClickExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@Show"">
    Open Clickable Snackbar
</MudButton>

@code {

    void Show()
    {
        Snackbar.Add(""I got a message for you"", Severity.Normal, config =>
        {
            config.Onclick = snackbar =>
            {
                SayHello();
                return Task.CompletedTask;
            };
        });
    }

    public void SayHello()
    {
        Snackbar.Add(""Hello World!"");
    }
}";

        public const string SnackbarPositionExample = @"@inject ISnackbar Snackbar

<MudButton @onclick=""@(() => ChangePosition(""Top-Start"", Defaults.Classes.Position.TopStart))"" Color=""Color.Primary"" >Top-Start</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Top-Left"", Defaults.Classes.Position.TopLeft))"" Color=""Color.Primary"" >Top-Left</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Top-Center"", Defaults.Classes.Position.TopCenter))"" Color=""Color.Primary"" >Top-Center</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Top-Right"", Defaults.Classes.Position.TopRight))"" Color=""Color.Primary"" >Top-Right</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Top-End"", Defaults.Classes.Position.TopEnd))"" Color=""Color.Primary"" >Top-End</MudButton>
<MudDivider />
<MudButton @onclick=""@(() => ChangePosition(""Bottom-Start"", Defaults.Classes.Position.BottomStart))"" Color=""Color.Default"" >Bottom-Start</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Bottom-Left"", Defaults.Classes.Position.BottomLeft))"" Color=""Color.Default"" >Bottom-Left</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Bottom-Center"", Defaults.Classes.Position.BottomCenter))"" Color=""Color.Default"" >Bottom-Center</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Bottom-Right"", Defaults.Classes.Position.BottomRight))"" Color=""Color.Default"" >Bottom-Right</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Bottom-End"", Defaults.Classes.Position.BottomEnd))"" Color=""Color.Default"" >Bottom-End</MudButton>

@code {
    void ChangePosition(string message, string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, Severity.Normal);
    }
}";

        public const string SnackbarPreventDuplicatesExample = @"@inject ISnackbar SnackbarService

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@OnClick"">Prevent duplicate Snackbars</MudButton>

@code {
    private void OnClick()
    {
        // We'll set all three of these snackbars to prevent duplicates and give them
        // all the same key (""mudblazor"")
        var config = (SnackbarOptions options) =>
        {
            options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        };

        // Then we try to show all three in quick succession, but only the first pops!
        SnackbarService.Add(""This is the only snackbar that will be shown"", configure: config, key: ""mudblazor"");
        SnackbarService.Add(@<span>This one has the same key</span>, configure: config, key: ""mudblazor"");
        SnackbarService.Add<MudChip>(new Dictionary<string, object>() {
            { ""Text"", ""This one also has the same key"" }
        }, configure: config, key: ""mudblazor"");
    }
}";

        public const string SnackbarRemoveExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@Show"">
    Open Snackbar
</MudButton>
<MudButton Variant=""Variant.Filled"" Color=""Color.Error"" OnClick=""@Hide"">
    Hide snackbar
</MudButton>

@code {
    private Snackbar _snackbar;

    void Show()
    {
        _snackbar = Snackbar.Add(""Now click hide snackbar"", Severity.Normal, config =>
        {
            config.VisibleStateDuration = int.MaxValue;
        });
    }

	void Hide() {
        if (_snackbar is null) return;
        Snackbar.Remove(_snackbar);
	}
}";

        public const string SnackbarRequireInteractionExample = @"@inject ISnackbar Snackbar

<div class=""pa-0 ma-0"">
    <MudAlert Severity=""Severity.Warning"" Dense=""true"" Class=""rounded-0 rounded-t"">The reactor temperature exceeds the optimal range</MudAlert>
    <MudAlert Severity=""Severity.Error"" Dense=""true"" Class=""rounded-0"">Reactor meltdown is imminent!</MudAlert>
    <div class=""d-flex flex-column"" style=""height: 200px;"">
        <div class=""align-self-center mt-12"">
            <MudText Typo=""Typo.h6"">Fuel Rod Temperature: @FuelRodTemperature.ToString()C</MudText>
        </div>
        <div class=""align-self-center mt-6"">
            <MudTooltip Text=""Reactor Shutdown"">
                <MudButton Variant=""Variant.Filled"" DisableElevation=""true"" Color=""Color.Error"" @onclick=""@(() => ShutDown())"">Scram Button</MudButton>
            </MudTooltip>
        </div>
    </div>
    <MudAlert Severity=""Severity.Info"" Dense=""true"" Class=""rounded-0 rounded-b"">The reactor is about to have a meltdown deputy chief-engineer! You must act now!</MudAlert>
</div>

@code {

    public int FuelRodTemperature { get; set; } = 600;

    void ShutDown()
    {
        string message = ""Scram Initiated!"";
        Snackbar.Add(message, Severity.Success, config =>
        {
            config.RequireInteraction = true;
            config.ShowCloseIcon = false;
            config.Onclick = snackbar =>
            {
                UpdateTemperature();
                return Task.CompletedTask;
            };
        });
    }

    public void UpdateTemperature()
    {
        FuelRodTemperature += 100;
        Snackbar.Add(""Temperature is still going up!"", Severity.Warning);
        StateHasChanged();
    }
}";

        public const string SnackbarSeverityExample = @"@inject ISnackbar Snackbar


<MudButton Color=""Color.Dark"" @onclick=""@(() => Snackbar.Add(""The reactor type is RBMK-1000"", Severity.Normal))"">Normal Snackbar</MudButton>
<MudButton Color=""Color.Info"" @onclick=""@(() => Snackbar.Add(""The reactor was fired up successfully"", Severity.Info))"">Info Snackbar</MudButton>
<MudButton Color=""Color.Success"" @onclick=""@(() => Snackbar.Add(""The reactor is running at optimum temperature"", Severity.Success))"">Success Snackbar</MudButton>
<MudButton Color=""Color.Warning"" @onclick=""@(() => Snackbar.Add(""The reactor temperature exceeds the optimal range"", Severity.Warning))"">Warning Snackbar</MudButton>
<MudButton Color=""Color.Error"" @onclick=""@(() => Snackbar.Add(""Reactor meltdown is imminent"", Severity.Error))"">Error Snackbar</MudButton>";

        public const string SnackbarUsageExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@(() => Snackbar.Add(""Simple Snackbar""))"">
    Open Snackbar
</MudButton>";

        public const string SnackbarVariantsExample = @"@inject ISnackbar Snackbar

<MudButton @onclick=""@(() => ChangeVariant(""Text Snackbar"", Variant.Text))"" Color=""Color.Primary"">Open Text Snackbar Variants</MudButton>
<MudButton @onclick=""@(() => ChangeVariant(""Filled Snackbar"", Variant.Filled))"" Color=""Color.Secondary"">Open Filled Snackbar Variants</MudButton>
<MudButton @onclick=""@(() => ChangeVariant(""Outlined Snackbar"", Variant.Outlined))"" Color=""Color.Tertiary"">Open Outlined Snackbar Variants</MudButton>

@code {
    void ChangeVariant(string message, Variant variant)
    {
        Snackbar.Configuration.SnackbarVariant = variant;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($""Normal {message}"", Severity.Normal);
        Snackbar.Add($""Info {message}"", Severity.Info);
        Snackbar.Add($""Success {message}"", Severity.Success);
        Snackbar.Add($""Warning {message}"", Severity.Warning);
        Snackbar.Add($""Error {message}"", Severity.Error);
    }
}";

        public const string SparkLineExample = @"<MudSparkLine></MudSparkLine>";

        public const string StackAlignExample = @"<MudPaper Outlined=""true"" Class=""border-dashed"">
    <MudStack AlignItems=""_align"" Row=""true"" Style=""height:200px;"">
        <MudPaper Class=""py-1 px-3 mud-theme-primary"">Item 1</MudPaper>
        <MudPaper Class=""py-3 px-3 mud-theme-primary"">Item 2</MudPaper>
        <MudPaper Class=""py-5 px-3 mud-theme-primary"">Item 3</MudPaper>
    </MudStack>
</MudPaper>

<MudChipSet Filter=""true"" Mandatory=""true"" Class=""d-flex justify-center mt-12"">
    <MudChip Text=""Start"" OnClick=""@(() => _align = AlignItems.Start)"" SelectedColor=""Color.Primary"" Default=""true"" />
    <MudChip Text=""Center"" OnClick=""@(() => _align = AlignItems.Center)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""End"" OnClick=""@(() => _align = AlignItems.End)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Stretch"" OnClick=""@(() => _align = AlignItems.Stretch)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Baseline"" OnClick=""@(() => _align = AlignItems.Baseline)"" SelectedColor=""Color.Primary"" />
</MudChipSet>


@code {
    AlignItems _align = AlignItems.Start;
}";

        public const string StackBasicExample = @"<MudStack>
    <MudPaper Class=""pa-3"">Item 1</MudPaper>
    <MudPaper Class=""pa-3"">Item 2</MudPaper>
    <MudPaper Class=""pa-3"">Item 3</MudPaper>
</MudStack>";

        public const string StackCombinedExample = @"<MudPaper Outlined=""true"" Class=""border-dashed"">
    <MudStack Justify=""_justify"" AlignItems=""_align"" Row=""_row"" Style=""height:200px;"">
        <MudPaper Class=""py-1 px-3 mud-theme-primary"">Item 1</MudPaper>
        <MudPaper Class=""py-3 px-3 mud-theme-primary"">Item 2</MudPaper>
        <MudPaper Class=""py-5 px-3 mud-theme-primary"">Item 3</MudPaper>
    </MudStack>
</MudPaper>

<MudStack Row=""true"" Justify=""Justify.Center"">
    <MudRadioGroup @bind-SelectedOption=""@_row"">
        <MudRadio Option=""false"" Dense=""true"">Column</MudRadio>
        <MudRadio Option=""true"" Dense=""true"">Row</MudRadio>
    </MudRadioGroup>
</MudStack>

<MudStack Row=""true"">
    <MudChipSet Filter=""true"" Mandatory=""true"" Class=""d-flex justify-center"">
        <MudChip Text=""Justify Start"" OnClick=""@(() => _justify = Justify.FlexStart)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" Default=""true"" />
        <MudChip Text=""Justify End"" OnClick=""@(() => _justify = Justify.FlexEnd)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
    </MudChipSet>
    <MudChipSet Filter=""true"" Mandatory=""true"" Class=""d-flex justify-center"">
        <MudChip Text=""Align Start"" OnClick=""@(() => _align = AlignItems.Start)"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" Default=""true"" />
        <MudChip Text=""Align End"" OnClick=""@(() => _align = AlignItems.End)"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" />
    </MudChipSet>
</MudStack>


@code {
    bool _row = true;
    Justify _justify = Justify.FlexStart;
    AlignItems _align = AlignItems.Start;
}";

        public const string StackDirectionExample = @"<MudStack Row=""true"">
    <MudPaper Class=""pa-3"">Item 1</MudPaper>
    <MudPaper Class=""pa-3"">Item 2</MudPaper>
    <MudPaper Class=""pa-3"">Item 3</MudPaper>
</MudStack>";

        public const string StackInteractiveExample = @"<MudPaper Outlined=""true"" Class=""border-dashed"">
    <MudStack Justify=""@_justify"" AlignItems=""@_align"" Row=""@_row"" Reverse=""@_reverse"" Spacing=""@_spacing"" Style=""height:300px;"">
        <MudPaper Class=""py-1 px-3 mud-theme-primary"">Item 1</MudPaper>
        <MudPaper Class=""py-3 px-3 mud-theme-primary"">Item 2</MudPaper>
        <MudPaper Class=""py-5 px-3 mud-theme-primary"">Item 3</MudPaper>
    </MudStack>
</MudPaper>

<MudStack Row=""true"" AlignItems=""AlignItems.Center"">
    <MudSwitch @bind-Checked=""@_row"" Label=""Row"" Color=""Color.Primary"" />
    <MudSwitch @bind-Checked=""@_reverse"" Label=""Reverse"" Color=""Color.Primary"" />
    <MudText>Spacing:</MudText>
    <MudSlider @bind-Value=""_spacing"" Min=""0"" Max=""16""/>
</MudStack>

<MudStack Row=""true"" Justify=""Justify.Center"">
    <MudChipSet Filter=""true"" Mandatory=""true"">
        <MudChip Text=""Justify Start"" OnClick=""@(() => _justify = Justify.FlexStart)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
        <MudChip Text=""Justify Center"" OnClick=""@(() => _justify = Justify.Center)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" Default=""true"" />
        <MudChip Text=""Justify End"" OnClick=""@(() => _justify = Justify.FlexEnd)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
        <MudChip Text=""Justify Space Around"" OnClick=""@(() => _justify = Justify.SpaceAround)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
        <MudChip Text=""Justify Space Between"" OnClick=""@(() => _justify = Justify.SpaceBetween)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
        <MudChip Text=""Justify Space Evenly"" OnClick=""@(() => _justify = Justify.SpaceEvenly)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
    </MudChipSet>
</MudStack>

<MudStack Row=""true"" Justify=""Justify.Center"">
    <MudChipSet Filter=""true"" Mandatory=""true"">
        <MudChip Text=""Align Start"" OnClick=""@(() => _align = AlignItems.Start)"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" />
        <MudChip Text=""Align Center"" OnClick=""@(() => _align = AlignItems.Center)"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" Default=""true"" />
        <MudChip Text=""Align End"" OnClick=""@(() => _align = AlignItems.End)"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" />
        <MudChip Text=""Align Stretch"" OnClick=""@(() => _align = AlignItems.Stretch)"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" />
        <MudChip Text=""Align Baseline"" OnClick=""@(() => _align = AlignItems.Baseline)"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" />
    </MudChipSet>
</MudStack>

@code {
    Justify _justify = Justify.Center;
    AlignItems _align = AlignItems.Center;
    bool _row = false;
    bool _reverse = false;
    private int _spacing { get; set; } = 3;
}";

        public const string StackJustifyExample = @"<MudPaper Outlined=""true"" Class=""border-dashed"">
    <MudStack Justify=""@_justify"" Row=""true"">
        <MudPaper Class=""pa-3 mud-theme-primary"">Item 1</MudPaper>
        <MudPaper Class=""pa-3 mud-theme-primary"">Item 2</MudPaper>
        <MudPaper Class=""pa-3 mud-theme-primary"">Item 3</MudPaper>
    </MudStack>
</MudPaper>

<MudChipSet Filter=""true"" Mandatory=""true"" Class=""d-flex justify-center mt-12"">
    <MudChip Text=""Start"" OnClick=""@(() => _justify = Justify.FlexStart)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Center"" OnClick=""@(() => _justify = Justify.Center)"" SelectedColor=""Color.Primary"" Default=""true"" />
    <MudChip Text=""End"" OnClick=""@(() => _justify = Justify.FlexEnd)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Space Around"" OnClick=""@(() => _justify = Justify.SpaceAround)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Space Between"" OnClick=""@(() => _justify = Justify.SpaceBetween)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Space Evenly"" OnClick=""@(() => _justify = Justify.SpaceEvenly)"" SelectedColor=""Color.Primary"" />
</MudChipSet>


@code {
    Justify _justify = Justify.Center;
}";

        public const string StackSpacingExample = @"<MudStack Spacing=""@_spacing"" Row=""true"">
    <MudPaper Class=""pa-3"">Item 1</MudPaper>
    <MudPaper Class=""pa-3"">Item 2</MudPaper>
    <MudPaper Class=""pa-3"">Item 3</MudPaper>
</MudStack>

<MudSlider @bind-Value=""_spacing"" Min=""0"" Max=""16"">Spacing: @_spacing.ToString()</MudSlider>

@code {
    private int _spacing { get; set; } = 3;
}";

        public const string StackUsageFormExample = @"<MudStack>
    <MudPaper Class=""pa-4"">
        <MudStack Row=""true"">
            <MudAvatar Image=""images/mony.jpg"" Size=""Size.Large"" />
            <MudStack Justify=""Justify.Center"" Spacing=""0"">
                <MudText Typo=""Typo.body1"">Mony Larsson</MudText>
                <MudText Typo=""Typo.body2"">onebiteonekill@mony.dog</MudText>
            </MudStack>
        </MudStack>
    </MudPaper>

    <MudPaper Class=""pa-4"">
        <MudStack Spacing=""4"">
            <MudTextField T=""string"" Label=""Card number"" Mask=""@(new PatternMask(""0000 0000 0000 0000""))"" />
            <MudStack Row=""true"">
                <MudTextField T=""string"" Label=""Expires"" Mask=""@(new DateMask(""MM/YY"", 'Y', 'M'))"" />
                <MudTextField T=""string"" Label=""CVC"" Mask=""@(new PatternMask(""000""))"" />
            </MudStack>
            <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" DisableElevation=""true"">Pay Now</MudButton>
        </MudStack>
    </MudPaper>
</MudStack>";

        public const string SwipeDatePickerExample = @"@using System.Globalization

<MudSwipeArea OnSwipe=""@OnSwipe"">
    <MudDatePicker PickerVariant=""PickerVariant.Static"" Date=""@(DateTime.Today.AddDays(1))"" @bind-PickerMonth=""@_pickerMonth"" />
</MudSwipeArea>

@code{ 
    DateTime? _pickerMonth = DateTime.Now.StartOfMonth(CultureInfo.CurrentCulture);

    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight)
        {
            _pickerMonth = _pickerMonth.Value.AddMonths(-1);
            StateHasChanged();
        }
        else if (direction == SwipeDirection.RightToLeft)
        {
            _pickerMonth = _pickerMonth.Value.AddMonths(1);
            StateHasChanged();
        }
    }
}";

        public const string SwipeDirectionsExample = @"<MudSwipeArea OnSwipe=""@((d) => _swipeDirection = d)"" Style=""width: 100%; height: 300px"">
    <MudText Typo=""@Typo.body1"">@_swipeDirection</MudText>
</MudSwipeArea>

@code{ SwipeDirection _swipeDirection; }";

        public const string SwipeDirectionsPreventDefaultExample = @"<MudSwipeArea OnSwipe=""@((d) => _swipeDirection = d)"" Style=""width: 100%; height: 300px"" PreventDefault=""@_preventDefault"">
    <MudText Typo=""@Typo.body1"">@_swipeDirection</MudText>
</MudSwipeArea>
<MudSwitch @bind-Checked=""@_preventDefault"" Color=""Color.Primary"">Prevent Default</MudSwitch>

@code
{
    SwipeDirection _swipeDirection;
    bool _preventDefault = true;
}";

        public const string SwipeDrawerExample = @"<MudSwipeArea OnSwipe=""@OnSwipe"" Style=""width: 100%;"">
    <MudPaper Height=""200px"" Style=""overflow:hidden; position:relative;"">
        <MudDrawer @bind-Open=""@_drawerOpen"" Fixed=""false"" Elevation=""1"" Variant=""@DrawerVariant.Persistent"" Color=""Color.Primary"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">My App</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Dashboard"" IconColor=""Color.Inherit"">Store</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Dashboard"" IconColor=""Color.Inherit"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Filled.Dashboard"" IconColor=""Color.Inherit"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
    </MudPaper>
</MudSwipeArea>

@code{
    bool _drawerOpen;

    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight && !_drawerOpen)
        {
            _drawerOpen = true;
            StateHasChanged();
        }
        else if (direction == SwipeDirection.RightToLeft && _drawerOpen)
        {
            _drawerOpen = false;
            StateHasChanged();
        }
    }
}";

        public const string SwitchBasicExample = @"<MudSwitch @bind-Checked=""@Basic_Switch1"" />
<MudSwitch @bind-Checked=""@Basic_Switch2"" Color=""Color.Primary"" />
<MudSwitch @bind-Checked=""@Basic_Switch3"" Color=""Color.Secondary"" />
<MudSwitch T=""bool"" Disabled=""true"" />

@code{
    public bool Basic_Switch1 { get; set; } = false;
    public bool Basic_Switch2 { get; set; } = true;
    public bool Basic_Switch3 { get; set; } = true;
}";

        public const string SwitchColorExample = @"<MudSwitch @bind-Checked=""@Basic_Switch1"" Color=""Color.Success"" UnCheckedColor=""Color.Error"" />
<MudSwitch @bind-Checked=""@Basic_Switch2"" Color=""Color.Primary"" UnCheckedColor=""Color.Secondary"" />
<MudSwitch @bind-Checked=""@Basic_Switch3"" Color=""Color.Info"" UnCheckedColor=""Color.Warning"" />
<MudSwitch T=""bool"" Disabled=""true"" UnCheckedColor=""Color.Dark"" />

@code{
    public bool Basic_Switch1 { get; set; } = false;
    public bool Basic_Switch2 { get; set; } = true;
    public bool Basic_Switch3 { get; set; } = true;
}";

        public const string SwitchConversionExample = @"<MudSwitch @bind-Checked=""boolean"">bool: @boolean</MudSwitch>
<MudSwitch @bind-Checked=""nullable"" Color=""Color.Primary"">bool?: @nullable</MudSwitch>
<MudSwitch @bind-Checked=""integer"" Color=""Color.Secondary"">int: @integer</MudSwitch>
<MudSwitch @bind-Checked=""str"" Color=""Color.Tertiary"">string: ""@(str)""</MudSwitch>
<MudSwitch @bind-Checked=""customstr"" Color=""Color.Error"" Converter=""@(new CustomStringToBoolConverter())""> custom string: ""@(customstr)""</MudSwitch>
<MudSwitch @bind-Checked=""customobj"" Color=""Color.Dark"" Converter=""@(new ObjectToBoolConverter())"">object: ""@(customobj.ToString())""</MudSwitch>

@code{
    public bool boolean { get; set; } = true;
    public bool? nullable { get; set; } = true;
    public int integer { get; set; } = 1;
    public string str { get; set; } = ""on"";
    public string customstr { get; set; } = ""no, at all"";
    public object customobj { get; set; } = false;

    public class ObjectToBoolConverter : BoolConverter<object>
    {

        public ObjectToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        private object OnGet(bool? value)
        {
            try
            {
                return value == true;
            }
            catch (Exception e)
            {
                UpdateGetError(""Conversion error: "" + e.Message);
                return default;
            }
        }

        private bool? OnSet(object arg)
        {
            if (arg == null)
                return null;
            try
            {
                if (arg is bool)
                    return (bool)arg;
                else if (arg is bool?)
                    return (bool?)arg;
                else
                {
                    UpdateSetError(""Unable to convert to bool? from type object"");
                    return null;
                }
            }
            catch (FormatException e)
            {
                UpdateSetError(""Conversion error: "" + e.Message);
                return null;
            }
        }

    }

    public class CustomStringToBoolConverter : BoolConverter<string>
    {

        public CustomStringToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        private string TrueString = ""yes, please"";
        private string FalseString = ""no, at all"";
        private string NullString = ""I don't know"";

        private string OnGet(bool? value)
        {
            try
            {
                return (value == true) ? TrueString : FalseString;
            }
            catch (Exception e)
            {
                UpdateGetError(""Conversion error: "" + e.Message);
                return NullString;
            }
        }

        private bool? OnSet(string arg)
        {
            if (arg == null)
                return null;
            try
            {
                if (arg == TrueString)
                    return true;
                if (arg == FalseString)
                    return false;
                else
                    return null;
            }
            catch (FormatException e)
            {
                UpdateSetError(""Conversion error: "" + e.Message);
                return null;
            }
        }

    } }";

        public const string SwitchKeyboardNavigationExample = @"<MudSwitch @bind-Checked=""@Label_Switch1"" Label=""Switch With Key Navigation"" />

@code{
    bool Label_Switch1 = false;
}";

        public const string SwitchReadOnlyExample = @"<div class=""d-flex flex-column align-center"">
    <MudSwitch ReadOnly=""@ReadOnly"" @bind-Checked=""@SwitchValue"" Color=""Color.Primary"" Class=""mr-n2 mb-6""/>
    <MudButton OnClick=""@ToggleValue"" Variant=""Variant.Filled"" DisableElevation=""true"">Toggle Value</MudButton>
    <MudCheckBox @bind-Checked=""@ReadOnly"" Label=""@(ReadOnly ? ""readonly-mode"" : ""edit-mode"")"" />
</div>

@code {
    public bool SwitchValue { get; set; } = true;
    public bool ReadOnly { get; set; } = true;

    void ToggleValue()
    {
        SwitchValue = !SwitchValue;
    }
}";

        public const string SwitchWithIconExample = @"<MudSwitch @bind-Checked=""@_checked1"" ThumbIcon=""@Icons.Custom.Brands.MudBlazor"">Basic</MudSwitch>
<MudSwitch @bind-Checked=""@_checked2"" ThumbIcon=""@Icons.Custom.Brands.MudBlazor"" ThumbIconColor=""Color.Info"">Colored</MudSwitch>
<MudSwitch @bind-Checked=""@_checked3"" ThumbIcon=""@(_checked3==true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"" ThumbIconColor=""@(_checked3==true ? Color.Success : Color.Error)"">Changing</MudSwitch>

@code{
    bool _checked1 = false;
    bool _checked2 = false;
    bool _checked3 = false;
}";

        public const string SwitchWithLabelExample = @"<MudSwitch @bind-Checked=""@Label_Switch1"" Label=""Info"" Color=""Color.Info"" />
<MudSwitch @bind-Checked=""@Label_Switch2"" Label=""Success"" Color=""Color.Success"" />
<MudSwitch @bind-Checked=""@Label_Switch3"" Label=""Warning"" LabelPosition=""LabelPosition.Start"" Color=""Color.Warning"" />
<MudSwitch T=""bool"" Disabled=""true"" Label=""Disabled"" LabelPosition=""LabelPosition.Start"" />

@code{
    public bool Label_Switch1 { get; set; } = false;
    public bool Label_Switch2 { get; set; } = true;
    public bool Label_Switch3 { get; set; } = true;
}";

        public const string TabPagerExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager InfoFormat=""@($""Left {infoFormat}"")"" HorizontalAlignment=""HorizontalAlignment.Left"" HidePageNumber=""@hidePageNumber"" HidePagination=""@hidePagination"" HideRowsPerPage=""@hideRowsPerPage"" />
        <MudTablePager InfoFormat=""@($""Start {infoFormat}"")"" HorizontalAlignment=""HorizontalAlignment.Start"" HidePageNumber=""@hidePageNumber"" HidePagination=""@hidePagination"" HideRowsPerPage=""@hideRowsPerPage"" />
        <MudTablePager InfoFormat=""@($""Center {infoFormat}"")"" HorizontalAlignment=""HorizontalAlignment.Center"" HidePageNumber=""@hidePageNumber"" HidePagination=""@hidePagination"" HideRowsPerPage=""@hideRowsPerPage"" />
        <MudTablePager InfoFormat=""@($""Right {infoFormat}"")"" HorizontalAlignment=""HorizontalAlignment.Right"" HidePageNumber=""@hidePageNumber"" HidePagination=""@hidePagination"" HideRowsPerPage=""@hideRowsPerPage"" />
        <MudTablePager InfoFormat=""@($""End {infoFormat}"")"" HorizontalAlignment=""HorizontalAlignment.End"" HidePageNumber=""@hidePageNumber"" HidePagination=""@hidePagination"" HideRowsPerPage=""@hideRowsPerPage"" />
    </PagerContent>
</MudTable>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Checked=""@hideRowsPerPage"" Color=""Color.Tertiary"">Hide/Show Rows per Page</MudSwitch>
    <MudSwitch @bind-Checked=""@hidePageNumber"" Color=""Color.Primary"">Hide/Show Page Number</MudSwitch>
    <MudSwitch @bind-Checked=""@hidePagination"" Color=""Color.Secondary"">Hide/Show Pagination</MudSwitch>
</div>

@code {
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string infoFormat = ""{first_item}-{last_item} of {all_items}"";

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableBasicExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements.Take(4)"" Hover=""true"" Breakpoint=""Breakpoint.Sm"" Loading=""@_loading"" LoadingProgressColor=""Color.Info"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"" HideSmall=""_hidePosition"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
</MudTable>

<MudSwitch @bind-Checked=""_hidePosition"">Hide <b>position</b> when Breakpoint=Xs</MudSwitch>
<MudSwitch @bind-Checked=""_loading"">Show Loading</MudSwitch>

@code { 
    private bool _hidePosition;
    private bool _loading;
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

}";

        public const string TableBasicGroupingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<MudTable Hover=""true"" Breakpoint=""Breakpoint.Sm"" Height=""500px"" FixedHeader=""true""
          Items=""@Elements""
          Virtualize=""@_virtualize""
          GroupBy=""@_groupDefinition""
          GroupHeaderStyle=""background-color:var(--mud-palette-background-grey)""
          GroupFooterClass=""mb-4""
          Dense=""_dense""
          MultiSelection=""_multiSelect"">
    <ColGroup>
        @if (_multiSelect)
        {
            <col style=""width: 60px;"" />
        }
        @if (_groupDefinition.Expandable)
        {
            <col style=""width: 60px;"" />
        }
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class=""mud-table-cell-custom-group"" colspan=""5"">@($""{context.GroupName}: {context.Key}"")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd Style=""text-align: right"" DataLabel=""Molar mass"">@context.Molar""</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class=""mud-table-cell-custom-group mud-table-cell-custom-group-footer"" colspan=""5"">Total Mass: @context.Items.Sum((e) => e.Molar)</MudTh>
    </GroupFooterTemplate>
</MudTable>

<MudSwitch @bind-Checked=""_dense"" Color=""Color.Primary"">Dense</MudSwitch>
<MudSwitch @bind-Checked=""_multiSelect"" Color=""Color.Primary"">MultiSelect</MudSwitch>
<MudSwitch @bind-Checked=""_virtualize"" Color=""Color.Primary"">Virtualize</MudSwitch>
<MudSwitch @bind-Checked=""_groupDefinition.Indentation"" Color=""Color.Primary"">Indentation</MudSwitch>
<MudSwitch @bind-Checked=""_groupDefinition.Expandable"" Color=""Color.Primary"">Expandable</MudSwitch>

@code { 
    private bool _dense = false;
    private bool _multiSelect = true;
    private bool _virtualize = false;    

    private TableGroupDefinition<Element> _groupDefinition = new()
    {
        GroupName = ""Group"",
        Indentation = false,
        Expandable = false,
        Selector = (e) => e.Group
    };

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableBasicGroupingInitiallyCollapsedExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<MudTable Hover=""true"" Breakpoint=""Breakpoint.Sm"" Height=""500px"" FixedHeader=""true""
          Items=""@Elements""
          GroupBy=""@_groupDefinition""
          GroupHeaderStyle=""background-color:var(--mud-palette-background-grey)""
          GroupFooterClass=""mb-4""
          Dense=""true"">
    <ColGroup>
        <col style=""width: 60px;"" />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class=""mud-table-cell-custom-group"" colspan=""5"">@($""{context.GroupName}: {context.Key}"")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd Style=""text-align: right"" DataLabel=""Molar mass"">@context.Molar""</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class=""mud-table-cell-custom-group mud-table-cell-custom-group-footer"" colspan=""5"">Total Mass: @context.Items.Sum((e) => e.Molar)</MudTh>
    </GroupFooterTemplate>
</MudTable>

@code { 
    private TableGroupDefinition<Element> _groupDefinition = new()
    {
        GroupName = ""Group"",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.Group
    };

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableColGroupExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"">
    <ColGroup>
        <col style=""width: 60px;"" />
        <col />
        <col style=""width: 60%;"" />
        <col style=""width: 60px;"" />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh Style=""text-align:center"">Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"" Style=""text-align:right"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    } 
}";

        public const string TableExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"" Dense=""@dense"" Hover=""@hover"" Bordered=""@bordered"" Striped=""@striped"" Filter=""new Func<Element,bool>(FilterFunc1)"" @bind-SelectedItem=""selectedItem1"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value=""searchString1"" Placeholder=""Search"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Checked=""@hover"" Color=""Color.Primary"">Hover</MudSwitch>
    <MudSwitch @bind-Checked=""@dense"" Color=""Color.Secondary"">Dense</MudSwitch>
    <MudSwitch @bind-Checked=""@striped"" Color=""Color.Tertiary"">Striped</MudSwitch>
    <MudSwitch @bind-Checked=""@bordered"" Color=""Color.Warning"">Bordered</MudSwitch>
    <MudSpacer />
    <div style=""min-width:200px;"">
        <MudText Inline=""true"" Class=""align-self-center"">Selected1: @selectedItem1?.Name</MudText>
    </div>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = """";
    private Element selectedItem1 = null;
    private HashSet<Element> selectedItems = new HashSet<Element>();

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    private bool FilterFunc1(Element element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Element element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($""{element.Number} {element.Position} {element.Molar}"".Contains(searchString))
            return true;
        return false;
    }
}";

        public const string TableFixedHeaderExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"" FixedHeader=""@fixed_header"" FixedFooter=""@fixed_footer"" Height=""@(fixed_header || fixed_footer ?""400px"":"""")"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTd>Nr</MudTd>
        <MudTd>Sign</MudTd>
        <MudTd>Name</MudTd>
        <MudTd>Position</MudTd>
        <MudTd>Molar mass</MudTd>
    </FooterContent>
    <PagerContent>
        <MudTablePager PageSizeOptions=""new int[]{50, 100}"" />
    </PagerContent>
</MudTable>

<MudSwitch @bind-Checked=""@fixed_header"">Fixed Header</MudSwitch>
<MudSwitch @bind-Checked=""@fixed_footer"">Fixed Footer</MudSwitch>

@code {
    bool fixed_header = true;
    bool fixed_footer = false;

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableHeaderAndFooterExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<style type=""text/css"">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }

   .mud-table-foot .bold-text .mud-table-cell {
       font-weight: 500;
   }
</style>

<MudTable Items=""@Elements.Take(10)"" MultiSelection=""true"" @bind-SelectedItems=""selectedItems"" Hover=""true"" Breakpoint=""Breakpoint.Sm"" Striped=""true"" Bordered=""true""
          CustomHeader=""true"" CustomFooter=""true"" HeaderClass=""table-head-bordered"" FooterClass=""table-foot-bordered"">
    <HeaderContent>
        <MudTHeadRow IgnoreCheckbox=""true"" Class=""header-centered"">
            <MudTh colspan=""6"">Periodic Elements Info</MudTh>
        </MudTHeadRow>
        <MudTHeadRow Class=""header-centered"">
            <MudTh colspan=""2"">Basic</MudTh>
            <MudTh colspan=""3"">Extended</MudTh>
        </MudTHeadRow>
        <MudTHeadRow IsCheckable=""true"">
            <MudTh>Nr</MudTh> 
            <MudTh>Sign</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Position</MudTh>
            <MudTh>Molar mass</MudTh>
        </MudTHeadRow>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"" HideSmall=""_hidePosition"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTFootRow Class=""bold-text"">
            <MudTd>Nr</MudTd>
            <MudTd>Sign</MudTd>
            <MudTd>Name</MudTd>
            <MudTd>Position</MudTd>
            <MudTd>Molar mass</MudTd>
        </MudTFootRow>
        <MudTFootRow IsCheckable=""true"">
            <MudTd colspan=""5"">Selected: @selectedItems.Count</MudTd>
        </MudTFootRow>
    </FooterContent>
</MudTable>
<MudSwitch @bind-Checked=""_hidePosition"">Hide <b>position</b> when Breakpoint=Xs</MudSwitch>

@code {
    private bool _hidePosition;
    private IEnumerable<Element> Elements = new List<Element>();
    private HashSet<Element> selectedItems = new HashSet<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableHorizontalScrollExample = @"<MudTable Items=""_items"" Height=""350px"" Breakpoint=""Breakpoint.Sm"" HorizontalScrollbar=""true"">
    <HeaderContent>
        <MudTh>Column1</MudTh>
        <MudTh>Column2</MudTh>
        <MudTh>Column3</MudTh>
        <MudTh>Column4</MudTh>
        <MudTh>Column5</MudTh>
        <MudTh>Column6</MudTh>
        <MudTh>Column7</MudTh>
        <MudTh>Column8</MudTh>
        <MudTh>Column9</MudTh>
        <MudTh>Column10</MudTh>
        <MudTh>Column11</MudTh>
        <MudTh>Column12</MudTh>
        <MudTh>Column13</MudTh>
        <MudTh>Column14</MudTh>
        <MudTh>Column15</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Column1"">@context.Column1</MudTd>
        <MudTd DataLabel=""Column2"">@context.Column2</MudTd>
        <MudTd DataLabel=""Column3"">@context.Column3</MudTd>
        <MudTd DataLabel=""Column4"">@context.Column4</MudTd>
        <MudTd DataLabel=""Column5"">@context.Column5</MudTd>
        <MudTd DataLabel=""Column6"">@context.Column6</MudTd>
        <MudTd DataLabel=""Column7"">@context.Column7</MudTd>
        <MudTd DataLabel=""Column8"">@context.Column8</MudTd>
        <MudTd DataLabel=""Column9"">@context.Column9</MudTd>
        <MudTd DataLabel=""Column10"">@context.Column10</MudTd>
        <MudTd DataLabel=""Column11"">@context.Column11</MudTd>
        <MudTd DataLabel=""Column12"">@context.Column12</MudTd>
        <MudTd DataLabel=""Column13"">@context.Column13</MudTd>
        <MudTd DataLabel=""Column14"">@context.Column14</MudTd>
        <MudTd DataLabel=""Column15"">@context.Column15</MudTd>
    </RowTemplate>
</MudTable>

@code {
    public class TestItem{
        public string Column1 {get;set;}
        public string Column2 {get;set;}
        public string Column3 {get;set;}
        public string Column4 {get;set;}
        public string Column5 {get;set;}
        public string Column6 {get;set;}
        public string Column7 {get;set;}
        public string Column8 {get;set;}
        public string Column9 {get;set;}
        public string Column10 {get;set;}
        public string Column11 {get;set;}
        public string Column12 {get;set;}
        public string Column13 {get;set;}
        public string Column14 {get;set;}
        public string Column15 {get;set;}
    }
    
    
    private List<TestItem> _items;

    protected override void OnInitialized() {
        _items = new List<TestItem>();
        for (int i = 0; i < 20; i++) {
            _items.Add(new TestItem {
                Column1 = $""Value_{i}"",
                Column2 = $""Value_{i}"",
                Column3 = $""Value_{i}"",
                Column4 = $""Value_{i}"",
                Column5 = $""Value_{i}"",
                Column6 = $""Value_{i}"",
                Column7 = $""Value_{i}"",
                Column8 = $""Value_{i}"",
                Column9 = $""Value_{i}"",
                Column10 = $""Value_{i}"",
                Column11 = $""Value_{i}"",
                Column12 = $""Value_{i}"",
                Column13 = $""Value_{i}"",
                Column14 = $""Value_{i}"",
                Column15 = $""Value_{i}""
            });
        }
    }
}";

        public const string TableInlineEditExample = @"@using System.Net.Http.Json
@using MudBlazor
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient
@inject ISnackbar Snackbar

<MudTable Items=""@Elements"" Dense=""@dense"" Hover=""@hover"" ReadOnly=""@ronly"" CanCancelEdit=""@canCancelEdit"" Filter=""new Func<Element,bool>(FilterFunc)""
          @bind-SelectedItem=""selectedItem1"" SortLabel=""Sort By"" CommitEditTooltip=""Commit Edit""
          OnCommitEditClick=""@(() => Snackbar.Add(""Commit Edit Handler Invoked""))"" RowEditPreview=""BackupItem"" RowEditCancel=""ResetItemToOriginalValues""
          RowEditCommit=""ItemHasBeenCommitted"" IsEditRowSwitchingBlocked=""@blockSwitch"" ApplyButtonPosition=""@applyButtonPosition"" EditButtonPosition=""@editButtonPosition"" EditTrigger=""@editTrigger"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value=""searchString"" Placeholder=""Search"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style=""width:50px;"" />
        }
        <col style=""width:50px;"" />
        <col style=""width:80px;"" />
        <col style=""width:50%;"" />
        <col />
        <col />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style=""width:50px;"" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Number)"">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Sign)"">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection=""SortDirection.Ascending"" SortBy=""new Func<Element, object>(x=>x.Name)"">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Position)"">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Molar)"">Mass</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">
            <MudTextField @bind-Value=""@context.Sign"" Required />
        </MudTd>
        <MudTd DataLabel=""Name"">
            <MudTextField @bind-Value=""@context.Name"" Required />
        </MudTd>
        <MudTd DataLabel=""Position"">
            <MudNumericField @bind-Value=""@context.Position"" Required Min=""1"" />
        </MudTd>
        <MudTd DataLabel=""Molar mass"">
            <MudTextField @bind-Value=""@context.Molar"" Required />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context=""button"">
        <MudIconButton Size=""@Size.Small"" Icon=""@Icons.Outlined.Edit"" Class=""pa-0"" OnClick=""@button.ButtonAction"" Disabled=""@button.ButtonDisabled"" />
    </EditButtonContent>
</MudTable>

<MudSwitch @bind-Checked=""@hover"" Color=""Color.Primary"">Hover</MudSwitch>
<MudSwitch @bind-Checked=""@dense"" Color=""Color.Secondary"">Dense</MudSwitch>
<MudSwitch @bind-Checked=""@ronly"" Color=""Color.Tertiary"">Read Only</MudSwitch>
<MudSwitch @bind-Checked=""@canCancelEdit"" Color=""Color.Info"">Can Cancel Edit</MudSwitch>
<MudSwitch @bind-Checked=""@blockSwitch"" Color=""Color.Success"">Block Edit Row Switching</MudSwitch>
<MudGrid>
    <MudItem xs=""12"" md=""4"">
        <MudSelect Label=""Edit Trigger"" T=""TableEditTrigger"" @bind-Value=""editTrigger"">
            <MudSelectItem Value=""TableEditTrigger.RowClick"">Row Click</MudSelectItem>
            <MudSelectItem Value=""TableEditTrigger.EditButton"">Edit Button</MudSelectItem>
        </MudSelect>
    </MudItem>
    @if (editTrigger == TableEditTrigger.EditButton)
    {
        <MudItem xs=""12"" md=""4"">
            <MudSelect Label=""Edit Button Postion"" T=""TableEditButtonPosition"" @bind-Value=""editButtonPosition"">
                <MudSelectItem Value=""TableEditButtonPosition.Start"">Start</MudSelectItem>
                <MudSelectItem Value=""TableEditButtonPosition.End"">End</MudSelectItem>
                <MudSelectItem Value=""TableEditButtonPosition.StartAndEnd"">Start and End</MudSelectItem>
            </MudSelect>
        </MudItem>
    }
    <MudItem xs=""12"" md=""4"">
        <MudSelect Label=""Apply Button Postion"" T=""TableApplyButtonPosition"" @bind-Value=""applyButtonPosition"">
            <MudSelectItem Value=""TableApplyButtonPosition.Start"">Start</MudSelectItem>
            <MudSelectItem Value=""TableApplyButtonPosition.End"">End</MudSelectItem>
            <MudSelectItem Value=""TableApplyButtonPosition.StartAndEnd"">Start and End</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>

<MudText Inline=""true"">Selected1: @selectedItem1?.Name</MudText>

<MudExpansionPanels Style=""flex: 1;"">
    <MudExpansionPanel Text=""Show inline-edit event log"">
        @foreach (var message in editEvents)
        {
            <MudText>@message</MudText>
        }
        @if (editEvents.Count > 0)
        {
            <div class=""d-flex"">
                <MudSpacer />
                <MudButton Class=""mt-3"" ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" OnClick=""ClearEventLog"">Clear event log</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = """";
    private Element selectedItem1 = null;
    private Element elementBeforeEdit;
    private HashSet<Element> selectedItems1 = new HashSet<Element>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                Sign = ((Element)element).Sign,
                Name = ((Element)element).Name,
                Molar = ((Element)element).Molar,
                Position = ((Element)element).Position
            };
        AddEditionEvent($""RowEditPreview event: made a backup of Element {((Element)element).Name}"");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($""RowEditCommit event: Changes to Element {((Element)element).Name} committed"");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Element)element).Sign = elementBeforeEdit.Sign;
        ((Element)element).Name = elementBeforeEdit.Name;
        ((Element)element).Molar = elementBeforeEdit.Molar;
        ((Element)element).Position = elementBeforeEdit.Position;
        AddEditionEvent($""RowEditCancel event: Editing of Element {((Element)element).Name} cancelled"");
    }

    private bool FilterFunc(Element element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($""{element.Number} {element.Position} {element.Molar}"".Contains(searchString))
            return true;
        return false;
    }
}";

        public const string TableMultiGroupingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<MudTable Hover=""true"" Breakpoint=""Breakpoint.Sm"" Height=""500px"" FixedHeader=""true""
          Items=""@Elements""
          GroupBy=""@_groupDefinition""
          GroupHeaderStyle=""background-color:var(--mud-palette-background-grey)""
          GroupFooterClass=""mb-4""
          Dense=""_dense""
          MultiSelection=""_multiSelect"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Group</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class=""mud-table-cell-custom-group"" colspan=""6"">@($""{context.GroupName}: {context.Key}"")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Group"">@context.Group</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd Style=""text-align:right"" DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class=""mud-table-cell-custom-group mud-table-cell-custom-group-footer"" colspan=""6"">Total Mass: @context.Items.Sum((e) => e.Molar)</MudTh>
    </GroupFooterTemplate>
</MudTable>
<MudSwitch @bind-Checked=""_dense"" Color=""Color.Primary"">Dense</MudSwitch>
<MudSwitch @bind-Checked=""_multiSelect"" Color=""Color.Primary"">MultiSelect</MudSwitch>
<MudSwitch @bind-Checked=""_groupDefinition.Indentation"" Color=""Color.Primary"">Indentation</MudSwitch>
<MudSwitch @bind-Checked=""_groupDefinition.Expandable"" Color=""Color.Primary"">Expandable (Root Level)</MudSwitch>
<MudSwitch @bind-Checked=""_groupDefinition.InnerGroup.Expandable"" Color=""Color.Primary"">Expandable (Second Level)</MudSwitch>

@code {
    private bool _dense = false;
    private bool _multiSelect = true;

    private TableGroupDefinition<Element> _groupDefinition = new TableGroupDefinition<Element>()
    {
        GroupName = ""Group"",
        Indentation = false,
        Expandable = false,
        Selector = (e) => e.Group,
        InnerGroup = new TableGroupDefinition<Element>()
        {
            GroupName = ""Position"",
            Expandable = false,
            Selector = (e) => e.Position
        }

    };


    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

}";

        public const string TableMultiSelectExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"" MultiSelection=""true"" @bind-SelectedItems=""selectedItems1"" Hover=""@hover"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions=""new int[]{50, 100}"" />
    </PagerContent>
    <FooterContent>
        <MudTd colspan=""5"">Select All</MudTd>
    </FooterContent>
</MudTable>

<MudText Inline=""true"">Selected items: @(selectedItems1==null ? """" : string.Join("", "", selectedItems1.OrderBy(x=>x.Sign).Select(x=>x.Sign)))</MudText>

@code {
    private bool hover = true;
    private HashSet<Element> selectedItems1 = new HashSet<Element>();

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    } 
}";

        public const string TableRecordComparerExample = @"@using System.Net.Http.Json
@using System.Text.Json.Serialization;
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"" MultiSelection=""true"" T=""Element"" SelectedItemsChanged=""OnSelectedItemsChanged"" Comparer=""Comparer"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions=""new int[]{50, 100}"" />
    </PagerContent>
    <FooterContent>
        <MudTd colspan=""5"">Select All</MudTd>
    </FooterContent>
</MudTable>

<MudText Inline=""true"">Selected items: @(selectedItems1==null ? """" : string.Join("", "", selectedItems1.OrderBy(x=>x.Sign).Select(x=>x.Sign)))</MudText>

@code {
    private HashSet<Element> selectedItems1 = new HashSet<Element>();

    private List<Element> Elements = new List<Element>();

    private ElementComparer Comparer = new();

    private void OnSelectedItemsChanged(HashSet<Element> elements)
    {
        elements.First().Name = ""Changed"";
    }

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    class ElementComparer : IEqualityComparer<Element>
    {
        public bool Equals(Element a, Element b) => a?.Number == b?.Number;
        public int GetHashCode(Element x) => HashCode.Combine(x?.Number);
    }

    public record Element
    {
        public string Group { get; set; }
        public int Position { get; set; }
        public string Name { get; set; }
        public int Number { get; set; }

        [JsonPropertyName(""small"")]
        public string Sign { get; set; }
        public double Molar { get; set; }
        public IList<int> Electrons { get; set; }

        public override string ToString() => $""{Sign} - {Name}"";
    }
}";

        public const string TableRelationalExample = @"<MudTable Items=""@People"" Hover=""true"" Breakpoint=""Breakpoint.Sm"">
	<ColGroup>
		<col style=""width:300px;"" />
		<col style=""width:100px;"" />
		<col />
		<col style=""width:100px;"" />
	</ColGroup>
	<HeaderContent>
		<MudTh></MudTh>
		<MudTh>Nr</MudTh>
		<MudTh>Name</MudTh>
		<MudTh>Age</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd><MudButton Variant=""Variant.Outlined"" Size=""Size.Small"" OnClick=""@(() => ShowBtnPress(context.Number))"">@((context.ShowDetails == true)? ""Hide"" : ""Show"") Address Details</MudButton></MudTd>
		<MudTd DataLabel=""Nr"">@context.Number</MudTd>
		<MudTd DataLabel=""Name"">@context.Name</MudTd>
		<MudTd DataLabel=""Age"">@context.Age</MudTd>
	</RowTemplate>
	<ChildRowContent>
		@if (context.ShowDetails)
				{
  <MudTr>
   <td colspan=""4"">
	<MudCard Elevation=""0"">
	 <MudCardHeader>
	  <CardHeaderContent>
	   <MudText Typo=""Typo.body1"">Address Details for <strong>@context.Name</strong></MudText>
	  </CardHeaderContent>
	 </MudCardHeader>
	 <MudCardContent Class=""pa-0"">
	  <MudTable Items=""@context.Addresses"" Context=""AddressContext"" Hover=""true"" Breakpoint=""Breakpoint.Sm"" Elevation=""0"">
	   <ColGroup>
		<col />
		<col />
		<col style=""width:200px;"" />
	   </ColGroup>
	   <HeaderContent>
		<MudTh>Address Line 1</MudTh>
		<MudTh>Address Line 2</MudTh>
		<MudTh>Postal Code</MudTh>
	   </HeaderContent>
	   <RowTemplate>
		<MudTd DataLabel=""Address Line 1"">@AddressContext.Address_Line_1</MudTd>
		<MudTd DataLabel=""Address Line 2"">@AddressContext.Address_Line_2</MudTd>
		<MudTd DataLabel=""Postal Code"">@AddressContext.Postal_Code</MudTd>
	   </RowTemplate>
	  </MudTable>
	 </MudCardContent>
	</MudCard>
   </td>
  </MudTr>
		}
	</ChildRowContent>
</MudTable>

@code
{
	protected override void OnInitialized()
	{
		FillPeople();
	}

	public class Address
	{
		public string Address_Line_1 { get; set; }
		public string Address_Line_2 { get; set; }
		public int Postal_Code { get; set; }
	}
	public class Person
	{
		public bool ShowDetails { get; set; }
		public int Number { get; set; }
		public string Name { get; set; }
		public int Age { get; set; }
		public IList<Address> Addresses { get; set; }
	}
	private void FillPeople()
	{
		IList<Person> people = new List<Person>();
		IList<Address> addresses = new List<Address>();
		addresses.Add(new Address { Address_Line_1 = ""4 Privet Drive"", Address_Line_2 = ""Little Whinging"", Postal_Code = 111 });
		addresses.Add(new Address { Address_Line_1 = ""12 Grimmauld Place"", Address_Line_2 = ""The Burrow"", Postal_Code = 333 });
		people.Add(new Person
		{
			ShowDetails = false,
			Number = 1,
			Name = ""Harry Potter"",
			Age = 11,
			Addresses = addresses
		});

		addresses = new List<Address>();
		addresses.Add(new Address { Address_Line_1 = ""123 Pikachu Lane"", Address_Line_2 = ""Pallet Town"", Postal_Code = 777 });
		addresses.Add(new Address { Address_Line_1 = ""456 Mew Street"", Address_Line_2 = ""Pallet Town"", Postal_Code = 999 });
		people.Add(new Person
		{
			ShowDetails = false,
			Number = 2,
			Name = ""Ash Ketchum"",
			Age = 18,
			Addresses = addresses
		});
		People = people;

		addresses = new List<Address>();
		addresses.Add(new Address { Address_Line_1 = ""123 Shire Lane"", Address_Line_2 = ""Bag End"", Postal_Code = 223 });
		addresses.Add(new Address { Address_Line_1 = ""456 Shire Street"", Address_Line_2 = ""Bag End"", Postal_Code = 445 });
		addresses.Add(new Address { Address_Line_1 = ""789 Shire Avenue"", Address_Line_2 = ""Bag End"", Postal_Code = 667 });
		people.Add(new Person
		{
			ShowDetails = true,
			Number = 3,
			Name = ""Frodo Baggins"",
			Age = 24,
			Addresses = addresses
		});
		People = people;
	}
	private static IEnumerable<Person> People { get; set; }

	private void ShowBtnPress(int nr)
	{
		Person tmpPerson = People.First(f => f.Number == nr);
		tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
	}
}";

        public const string TableRowClassFuncExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

<MudTable Items=""@Elements.Take(4)"" Hover=""true"" Breakpoint=""Breakpoint.Sm"" @ref=""mudTable"" RowClassFunc=""@SelectedRowClassFunc"" OnRowClick=""RowClickEvent"" T=""Element"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
</MudTable>
<MudExpansionPanels Style=""flex: 1;"">
    <MudExpansionPanel Text=""Show inline-clicked event log"">
        @foreach (var message in clickedEvents)
        {
            <MudText>@message</MudText>
        }
        @if(clickedEvents.Count > 0) {
            <div class=""d-flex"">
                <MudSpacer/>
                <MudButton Class=""mt-3"" ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" OnClick=""@(() => clickedEvents.Clear())"">Clear events</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private int selectedRowNumber = -1;
    private MudTable<Element> mudTable;
    private List<string> clickedEvents = new();
    private IEnumerable<Element> Elements = new List<Element>()
    {
        new Element() { Number = 1, Sign = ""H"", Name = ""Hydrogen"", Position = 0, Molar = 1.00794 },
        new Element() { Number = 2, Sign = ""He"", Name = ""Helium"", Position = 17, Molar = 4.002602 },
        new Element() { Number = 3, Sign = ""Li"", Name = ""Lithium"", Position = 0, Molar = 6.941 }
    };

    private void RowClickEvent(TableRowClickEventArgs<Element> tableRowClickEventArgs)
    {
        clickedEvents.Add(""Row has been clicked"");
    }

    private string SelectedRowClassFunc(Element element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add(""Selected Row: None"");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($""Selected Row: {rowNumber}"");
            return ""selected"";
        }
        else
        {
            return string.Empty;
        }
    }
}";

        public const string TableServerSidePaginateExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable ServerData=""@(new Func<TableState, Task<TableData<Element>>>(ServerReload))""
          Dense=""true"" Hover=""true"" @ref=""table"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField T=""string"" ValueChanged=""@(s=>OnSearch(s))"" Placeholder=""Search"" Adornment=""Adornment.Start""
                      AdornmentIcon=""@Icons.Material.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel=""nr_field"" T=""Element"">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""sign_field"" T=""Element"">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""name_field"" T=""Element"">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""position_field"" T=""Element"">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""mass_field"" T=""Element"">Molar mass</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Element> pagedData;
    private MudTable<Element> table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<Element>> ServerReload(TableState state)
    {
        IEnumerable<Element> data = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Sign.Contains(searchString,StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Name.Contains(searchString,StringComparison.OrdinalIgnoreCase))
                return true;
            if ($""{element.Number} {element.Position} {element.Molar}"".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case ""nr_field"":
                data = data.OrderByDirection(state.SortDirection,o => o.Number);
                break;
            case ""sign_field"":
                data = data.OrderByDirection(state.SortDirection,o => o.Sign);
                break;
            case ""name_field"":
                data = data.OrderByDirection(state.SortDirection,o => o.Name);
                break;
            case ""position_field"":
                data = data.OrderByDirection(state.SortDirection,o => o.Position);
                break;
            case ""mass_field"":
                data = data.OrderByDirection(state.SortDirection,o => o.Molar);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Element>() { TotalItems = totalItems,Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}";

        public const string TableSortingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"" Hover=""true"" SortLabel=""Sort By"">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Number)"">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled=""@enabled"" SortBy=""new Func<Element, object>(x=>x.Sign)"">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection=""SortDirection.Ascending"" SortBy=""new Func<Element, object>(x=>x.Name)"">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Position)"">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Molar)"">Mass</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions=""new int[]{50, 100}"" />
    </PagerContent>
</MudTable>

<MudSwitch @bind-Checked=""enabled"" Color=""Color.Info"">Enable sorting on the Sign Column</MudSwitch>

@code {
    private bool enabled = true;
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableVirtualizationExample = @"<MudTable Items=""_items"" Height=""350px"" Breakpoint=""Breakpoint.Sm"" Virtualize=""true"" FixedHeader=""true"">
    <HeaderContent>
        <MudTh>Column1</MudTh>
        <MudTh>Column2</MudTh>
        <MudTh>Column3</MudTh>
        <MudTh>Column4</MudTh>
        <MudTh>Column5</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Column1"">@context.Column1</MudTd>
        <MudTd DataLabel=""Column2"">@context.Column2</MudTd>
        <MudTd DataLabel=""Column3"">@context.Column3</MudTd>
        <MudTd DataLabel=""Column4"">@context.Column4</MudTd>
        <MudTd DataLabel=""Column5"">@context.Column5</MudTd>
    </RowTemplate>
</MudTable>

@code {
    public class TestItem
    {
        public string Column1 { get; set; }
        public string Column2 { get; set; }
        public string Column3 { get; set; }
        public string Column4 { get; set; }
        public string Column5 { get; set; }
    }


    private List<TestItem> _items;

    protected override void OnInitialized()
    {
        _items = new List<TestItem>();
        for (int i = 0; i < 20000; i++)
        {
            _items.Add(new TestItem
            {
                Column1 = $""Value_{i}"",
                Column2 = $""Value_{i}"",
                Column3 = $""Value_{i}"",
                Column4 = $""Value_{i}"",
                Column5 = $""Value_{i}"",
            });
        }
    }

}";

        public const string CustomDynamicTabsExample = @"<MudTabs @bind-ActivePanelIndex=""_index"" Border=""true"" Outlined=""true"" PanelClass=""px-4 py-6"" ApplyEffectsToContainer=""true"">
	<ChildContent>
		@foreach (var item in _tabs)
		{
			 <MudTabPanel Text=""@item.Name"" Tag=""@item.Id"">@item.Content</MudTabPanel>
		}
	</ChildContent>
	<Header>
		<MudButtonGroup>
			<MudTooltip Text=""Prepend a tab"">
				<MudIconButton Icon=""@Icons.Material.Filled.ChevronLeft"" OnClick=""@( () => AddTabCallback(false) )"" />
			</MudTooltip>
			<MudTooltip Text=""Append a tab"">
				<MudIconButton Icon=""@Icons.Material.Filled.ChevronRight"" OnClick=""@( () => AddTabCallback(true) )""  />
			</MudTooltip>
		</MudButtonGroup>
	</Header>
	<TabPanelHeader>
		@if(context.Text.StartsWith(""Tab"") == false)
		{
			<MudTooltip Text=""only dynamic tabs can be closed"">
				<MudIconButton Class=""ml-2 pa-1"" Color=""Color.Error"" Icon=""@Icons.Material.Filled.Remove"" OnClick=""(_) => RemoveTab(context)"" />
			</MudTooltip>
		}
  </TabPanelHeader>
</MudTabs>

@code {

	private class TabView
	{
		public String Name { get; set; }
		public String Content { get; set; }
		public Guid Id { get; set; }
	}

	private List<TabView> _tabs = new();
	private int _index = 0;
	private int? _nextIndex = null;

	private void RemoveTab(MudTabPanel tabPanel)
	{
		var tab = _tabs.FirstOrDefault(x => x.Id == (Guid)tabPanel.Tag);
		if(tab != null)
		{
			_tabs.Remove(tab);
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		_tabs.Add(new TabView { Content = ""First tab content"", Name = ""Tab A"", Id = Guid.NewGuid() });
		_tabs.Add(new TabView { Content = ""Second tab content"", Name = ""Tab B"", Id = Guid.NewGuid() });
		_tabs.Add(new TabView { Content = ""Third tab content"", Name = ""Tab C"", Id = Guid.NewGuid() });
	}

	private void AddTabCallback(Boolean append)
	{
		var tabView = new TabView { Name = ""Dynamic content"", Content = ""A new tab"", Id = Guid.NewGuid() };
		
		//the tab becomes available after it is rendered. Hence, we can't set the index here
		if(append == true)
		{
			_tabs.Add(tabView);
			_nextIndex = _tabs.Count - 1;
		}
		else
		{
			_tabs.Insert(0, tabView);
			_nextIndex = 0;
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if(_nextIndex.HasValue == true)
		{
			_index = _nextIndex.Value;
			_nextIndex = null;
			StateHasChanged();
		}
	}
}";

        public const string DynamicTabsSimpleExample = @"<MudDynamicTabs Elevation=""4"" Rounded=""true"" ApplyEffectsToContainer=""true"" PanelClass=""px-4 py-6"" AddTab=""AddTabCallback"" CloseTab=""@((panel) => CloseTabCallback(panel))"" @bind-ActivePanelIndex=""_index"" AddIconToolTip=""Click here to add a new tab"" CloseIconToolTip=""Close this tab. All data will be lost"">
	@foreach (var item in _tabs)
	{
	 <MudTabPanel Text=""@item.Name"" Tag=""@item.Id"">@item.Content</MudTabPanel>
	}
</MudDynamicTabs>
<MudButton Color=""Color.Primary"" OnClick=""Restore"" Size=""Size.Small"" Class=""ml-2 mt-1 mb-n2"">Restore</MudButton>

@code {

	private class TabView
	{
		public String Name { get; set; }
		public String Content { get; set; }
		public Guid Id { get; set; }
	}

	private List<TabView> _tabs = new();
	private int _index = 0;
	private bool _updateIndex = false;

	private void Restore()
	{
		_tabs.Clear();
		_tabs.Add(new TabView { Content = ""First tab content"", Name = ""Tab A"", Id = Guid.NewGuid() });
		_tabs.Add(new TabView { Content = ""Second tab content"", Name = ""Tab B"", Id = Guid.NewGuid() });
		_tabs.Add(new TabView { Content = ""Third tab content"", Name = ""Tab C"", Id = Guid.NewGuid() });
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		Restore();
	}

	private void AddTabCallback()
	{
		_tabs.Add(new TabView { Name = ""Dynamic Content"", Content = ""A new tab"", Id = Guid.NewGuid() });
		//the tab becomes available after it is rendered. Hence, we can't set the index here
		_updateIndex = true;
	}

	private void CloseTabCallback(MudTabPanel panel)
	{
		var tabView = _tabs.FirstOrDefault(x => x.Id == (Guid)panel.Tag);
		if(tabView != null)
		{
			_tabs.Remove(tabView);
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if(_updateIndex == true)
		{
			_index = _tabs.Count - 1;
			StateHasChanged();
			_updateIndex = false;
		}
	}
}";

        public const string TabsBindingExample = @"<MudTabs Elevation=""0"" Outlined=""true"" @bind-ActivePanelIndex=""activeIndex"">
    <MudTabPanel Text=""Item One"" ID='""pn_one""'></MudTabPanel>
    <MudTabPanel Text=""Item Two"" ID='""pn_two""'></MudTabPanel>
    <MudTabPanel Text=""Item Three"" ID='""pn_three""'></MudTabPanel>
</MudTabs>
<MudText>@($""Active Index: {activeIndex}"")</MudText>

@code
 { 
    int activeIndex = 2;
}";

        public const string TabsCenteredExample = @"<MudTabs Elevation=""4"" Rounded=""true"" Centered=""true"" Color=""@Color.Primary"">
    <MudTabPanel Text=""One""/>
    <MudTabPanel Text=""Two""/>
    <MudTabPanel Text=""Three""/>
</MudTabs>";

        public const string TabsContentExample = @"<MudTabs Elevation=""1"" Rounded=""true"" PanelClass=""pa-6"">
    <MudTabPanel>
        <ChildContent>
            <MudText>Custom tab content only</MudText>
        </ChildContent>
        <TabContent>
            Item One
        </TabContent>
    </MudTabPanel>
    <MudTabPanel>
        <ChildContent>
            <MudText>Both custom tab and wrapper content</MudText>
        </ChildContent>
        <TabWrapperContent>
            <MudTooltip Text=""ToolTip Two"">
                @context
            </MudTooltip>
        </TabWrapperContent>
        <TabContent>
            <MudText Typo=""Typo.h6"">Item Two</MudText>
        </TabContent>
    </MudTabPanel>
    <MudTabPanel Text=""Item Three"">
        <ChildContent>
            <MudText>Custom wrapper content only</MudText>
        </ChildContent>
        <TabWrapperContent>
            <MudTooltip Text=""ToolTip Three"">
                @context
            </MudTooltip>
        </TabWrapperContent>
    </MudTabPanel>
</MudTabs>";

        public const string TabsCustomScrollIconsExample = @"<MudTabs Elevation=""4"" Rounded=""true"" Color=""@Color.Success"" PrevIcon=""@Icons.Filled.SkipPrevious"" NextIcon=""@Icons.Filled.SkipNext"">
    <MudTabPanel Text=""One"" />
    <MudTabPanel Text=""Two"" />
    <MudTabPanel Text=""Three"" />
    <MudTabPanel Text=""Four"" />
    <MudTabPanel Text=""Five"" />
    <MudTabPanel Text=""Six"" />
    <MudTabPanel Text=""Seven"" />
    <MudTabPanel Text=""Eight"" />
    <MudTabPanel Text=""Nine"" />
    <MudTabPanel Text=""Ten"" />
    <MudTabPanel Text=""Eleven"" />
    <MudTabPanel Text=""Thirteen"" />
</MudTabs>";

        public const string TabsIconAndTextExample = @"<MudTabs Outlined=""true"">
    <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Filled.Api""/>
    <MudTabPanel Icon=""@Icons.Material.Filled.Build""/>
    <MudTabPanel Text=""Bug Report"" Icon=""@Icons.Material.Filled.BugReport""/>
</MudTabs>";

        public const string TabsPositionExample = @"<MudSelect Variant=""Variant.Outlined"" Label=""Tabs Position"" Dense=""true"" Margin=""Margin.Dense"" T=""@Position"" @bind-Value=""Position"">
    <MudSelectItem T=""Position"" Value=""@Position.Top"">Top</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""@Position.Start"">Start</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""@Position.Left"">Left</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""@Position.Right"">Right</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""@Position.End"">End</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""@Position.Bottom"">Bottom</MudSelectItem>
</MudSelect>

<MudTabs Outlined=""true"" Position=""@Position"" Rounded=""true"" Border=""true""
    ApplyEffectsToContainer=""true"" Class=""mt-8"" PanelClass=""pa-6"">
    <MudTabPanel Text=""Item One"">
        <MudText>Content One</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Two"">
        <MudText>Content Two</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Three"">
        <MudText>Content Three</MudText>
    </MudTabPanel>
</MudTabs>


@code {
    public Position Position { get; set; } = Position.Left;

    private void OnSelectedValue(Position value)
    {
        switch (value)
        {
            case Position.Top:
                Position = Position.Top;
                break;
            case Position.Start:
                Position = Position.Start;
                break;
            case Position.Left:
                Position = Position.Left;
                break;
            case Position.Right:
                Position = Position.Right;
                break;
            case Position.End:
                Position = Position.End;
                break;
            case Position.Bottom:
                Position = Position.Bottom;
                break;
        }
    }
}";

        public const string TabsScrollExample = @"<MudTabs Elevation=""4"" Rounded=""true"" Color=""@Color.Secondary"">
    <MudTabPanel Text=""One"" />
    <MudTabPanel Text=""Two"" />
    <MudTabPanel Text=""Three"" />
    <MudTabPanel Text=""Four"" />
    <MudTabPanel Text=""Five"" />
    <MudTabPanel Text=""Six"" />
    <MudTabPanel Text=""Seven"" />
    <MudTabPanel Text=""Eight"" />
    <MudTabPanel Text=""Nine"" />
    <MudTabPanel Text=""Ten"" />
    <MudTabPanel Text=""Eleven"" />
    <MudTabPanel Text=""Thirteen"" />
</MudTabs>

<MudTabs Elevation=""4"" Rounded=""true"" AlwaysShowScrollButtons=""true"" Color=""@Color.Info"" Class=""mt-4"">
    <MudTabPanel Text=""One"" />
    <MudTabPanel Text=""Two"" />
    <MudTabPanel Text=""Three"" />
</MudTabs>";

        public const string TabsSetActiveExample = @"<MudTabs Elevation=""1"" Rounded=""true"" @ref=""tabs"">
    <MudTabPanel Text=""One"" @ref=""panel01"" ID=""@(""pn_one"")"" />
    <MudTabPanel Text=""Two"" @ref=""panel02"" ID=""@(""pn_two"")"" />
    <MudTabPanel Text=""Three"" @ref=""panel03"" ID=""@(""pn_three"")"" />
</MudTabs>


<MudText GutterBottom=""true"" Align=""Align.Center"" Class=""mt-8""><b>Set Active by Index</b></MudText>
<div class=""d-flex justify-center"">
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(0)"">Index 0</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(1)"" Class=""mx-2"">Index 1</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(2)"">Index 2</MudButton>
</div>
<MudText GutterBottom=""true"" Align=""Align.Center"" Class=""mt-4""><b>Set Active by Instance</b></MudText>
<div class=""d-flex justify-center"">
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(panel01)"">Item One</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(panel02)"" Class=""mx-2"">Item Two</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(panel03)"">Item Three</MudButton>
</div>
<MudText GutterBottom=""true"" Align=""Align.Center"" Class=""mt-4""><b>Set Active by TabPanel ID</b></MudText>
<div class=""d-flex justify-center"">
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick='() => Activate(""pn_one"")'>Item One</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick='() => Activate(""pn_two"")' Class=""mx-2"">Item Two</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick='() => Activate(""pn_three"")'>Item Three</MudButton>
</div>

@code {
    MudTabs tabs;
    MudTabPanel panel01;
    MudTabPanel panel02;
    MudTabPanel panel03;

    void Activate(int index)
    {
        tabs.ActivatePanel(index);
    }

    void Activate(MudTabPanel panel)
    {
        tabs.ActivatePanel(panel);
    }

    void Activate(object id)
    {
        tabs.ActivatePanel(id);
    }
}";

        public const string TabsSimpleExample = @"<MudTabs Elevation=""2"" Rounded=""true"" ApplyEffectsToContainer=""true"" PanelClass=""pa-6"">
    <MudTabPanel Text=""Tab One"">
        <MudText>Content One</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Tab Two"">
        <MudText>Content Two</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Tab Three"">
        <MudText>Content Three</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Tab Disabled"" Disabled=""true"">
        <MudText>Content Disabled</MudText>
    </MudTabPanel>
</MudTabs>";

        public const string TabsToolTipExample = @"<MudTabs Elevation=""1"" Rounded=""true"" PanelClass=""pa-6"">
    <MudTabPanel Text=""Item One"" ToolTip=""ToolTip One"">
        <MudText>Item One</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Two"" ToolTip=""ToolTip Two"">
        <MudText>Item Two</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Three"" ToolTip=""ToolTip Three"">
        <MudText>Item Three</MudText>
    </MudTabPanel>
</MudTabs>";

        public const string TabsWithBagdesExample = @"<MudTabs Elevation=""2"" Rounded=""true"" Centered=""true"">
    <MudTabPanel Icon=""@Icons.Material.Filled.Api"" BadgeData='""live""' BadgeColor=""Color.Info"" />
    <MudTabPanel Icon=""@Icons.Material.Filled.Build"" BadgeData='""...""' />
    <MudTabPanel Icon=""@Icons.Material.Filled.BugReport"" BadgeData='""99+""' BadgeColor=""Color.Error"" />
    <MudTabPanel Icon=""@Icons.Material.Filled.AccessTime"" BadgeData='string.Empty' BadgeDot=""true"" BadgeColor=""Color.Success"" />
</MudTabs>

<MudTabs Elevation=""2"" Rounded=""true"" Centered=""true"" Class=""my-6"" Color=""Color.Dark"">
    <MudTabPanel Icon=""@Icons.Material.Filled.Api"" Text=""API"" BadgeData='""!""' BadgeColor=""Color.Error"" />
    <MudTabPanel Icon=""@Icons.Material.Filled.Build"" Text=""Build"" BadgeData=""1"" BadgeColor=""Color.Success"" />
    <MudTabPanel Icon=""@Icons.Material.Filled.BugReport"" Text=""Bugs"" BadgeData=""0"" />
    <MudTabPanel Icon=""@Icons.Material.Filled.AccessTime"" Text=""Timing"" BadgeDot=""true"" BadgeColor=""Color.Error"" />
</MudTabs>

<MudTabs Elevation=""2"" Rounded=""true"" Centered=""true"">
    <MudTabPanel Text=""API"" BadgeData='""S""' />
    <MudTabPanel Text=""Build"" BadgeData='""...""' BadgeColor=""Color.Dark"" />
    <MudTabPanel Text=""Bugs"" BadgeData='""N""' />
    <MudTabPanel Text=""Timing"" BadgeDot=""true"" BadgeColor=""Color.Primary"" />
</MudTabs>";

        public const string TemplateExample = @"";

        public const string DebouncedTextFieldExample = @"<MudTextField @bind-Value=""@_normalText"" HelperText=""@_normalText"" Label=""Normal"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Filled.Search""/>
<MudTextField Immediate=""true"" @bind-Value=""@_immediateText"" HelperText=""@_immediateText"" Label=""Immediate"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Filled.Search"" />
<MudTextField DebounceInterval=""500"" OnDebounceIntervalElapsed=""HandleIntervalElapsed"" @bind-Value=""@_debouncedText"" HelperText=""@_debouncedText"" Label=""Debounced"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Filled.Search"" />

@code {
    string _normalText = ""w"";
    string _immediateText = ""t"";
    string _debouncedText = ""f"";

    void HandleIntervalElapsed(string debouncedText)
    {
        // at this stage, interval has elapsed
    }
}";

        public const string TextFieldAdornmentColorExample = @"<MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Outlined"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.AttachMoney"" AdornmentColor=""Color.Warning"" />
<MudTextField @bind-Value=""Weight"" Label=""Weight"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentText=""Kg"" AdornmentColor=""Color.Info"" />
<MudTextField  @bind-Value=""Search"" Label=""Search"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Filled.Search"" AdornmentColor=""Color.Secondary"" />

@code {
    public double? Amount { get; set; }
    public int? Weight { get; set; }
    public string Search { get; set;}
}";

        public const string TextFieldAdornmentsExample = @"<div class=""d-flex"">
    <MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Text"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.AttachMoney"" />
    <MudTextField @bind-Value=""Weight"" HelperText=""Weight"" Variant=""Variant.Text"" Adornment=""Adornment.End"" AdornmentText=""Kg"" Class=""mx-8"" />
    <MudTextField @bind-Value=""Password"" Label=""Password"" Variant=""Variant.Text"" InputType=""@PasswordInput"" Adornment=""Adornment.End"" AdornmentIcon=""@PasswordInputIcon"" OnAdornmentClick=""ButtonTestclick"" AdornmentAriaLabel=""Show Password"" />
</div>
<div class=""d-flex"">
    <MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Filled"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.AttachMoney"" />
    <MudTextField @bind-Value=""Weight"" HelperText=""Weight"" Variant=""Variant.Filled"" Adornment=""Adornment.End"" AdornmentText=""Kg"" Class=""mx-8"" />
    <MudTextField  @bind-Value=""Password"" Label=""Password""  Variant=""Variant.Filled"" InputType=""@PasswordInput"" Adornment=""Adornment.End"" AdornmentIcon=""@PasswordInputIcon"" OnAdornmentClick=""ButtonTestclick"" AdornmentAriaLabel=""Show Password"" />
</div>
<div class=""d-flex"">
    <MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Outlined"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.AttachMoney"" />
    <MudTextField @bind-Value=""Weight"" HelperText=""Weight"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentText=""Kg"" Class=""mx-8"" />
    <MudTextField  @bind-Value=""Password"" Label=""Password"" Variant=""Variant.Outlined"" InputType=""@PasswordInput"" Adornment=""Adornment.End"" AdornmentIcon=""@PasswordInputIcon"" OnAdornmentClick=""ButtonTestclick"" AdornmentAriaLabel=""Show Password"" />
</div>

@code {
    public double? Amount { get; set; }
    public int? Weight { get; set; }
    public string Password { get; set;} = ""superstrong123"";

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}";

        public const string TextFieldBasicExample = @"<MudTextField @bind-Value=""TextValue"" Label=""Standard"" Variant=""Variant.Text""></MudTextField>
<MudTextField @bind-Value=""TextValue"" Label=""Filled"" Variant=""Variant.Filled""></MudTextField>
<MudTextField @bind-Value=""TextValue"" Label=""Outlined"" Variant=""Variant.Outlined""></MudTextField>

@code {
    public string TextValue { get; set; }
}";

        public const string TextFieldBindingExample = @"<MudTextField @bind-Value=""@element.Name"" Label=""Name"" Variant=""Variant.Outlined"" Margin=""Margin.Dense""/>
<MudTextField @bind-Value=""@element.Mass"" Label=""Mass"" Variant=""Variant.Outlined"" Margin=""Margin.Dense""/>
<MudTextField @bind-Value=""@element.Electrons"" Label=""Electrons"" Variant=""Variant.Outlined"" Margin=""Margin.Dense""/>
<MudTextField @bind-Value=""@element.Changed"" Format=""yyyy/MM/dd"" Label=""Last Update"" Variant=""Variant.Outlined"" Margin=""Margin.Dense""/>

<div class=""d-flex align-end justify-space-between mud-width-full"">
    <div class=""d-flex flex-column"">
        <MudText><b>Name:</b> @element.Name</MudText>
        <MudText><b>Mass:</b> @element.Mass u</MudText>
        <MudText><b>Electrons:</b> @element.Electrons</MudText>
        <MudText><b>Last Update:</b> @element.Changed.ToShortDateString()</MudText>
    </div>
    <MudButton Variant=""Variant.Filled"" DisableElevation=""true"" OnClick=""Reset"">Reset Model</MudButton>
</div>

@code {
    Atom element = new Atom { Name = ""Hydrogen"", Mass = 1.00794, Electrons = 1, Changed=DateTime.Today };

    // A typical POCO
    public class Atom
    {
        public string Name { get; set; }
        public double Mass { get; set; }
        public int Electrons { get; set; }
        public DateTime Changed { get; set; }
    }

    private void Reset()
    {
        element = new Atom { Name = ""Hydrogen"", Mass = 1.00794, Electrons = 1, Changed = DateTime.Today };
        StateHasChanged();
    }

}";

        public const string TextFieldBindingValueTypesExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""intValue"" Label=""Enter an int"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""doubleValue"" Label=""Enter a double"" Format=""F1""/>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""enumValue"" Label=""Enum (Yes|No|Maybe)"" />
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""nullableInt"" HelperText=""Enter an int"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""nullableDouble"" HelperText=""Enter a double"" Format=""F1"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""nullableEnum"" HelperText=""Enum (Yes|No|Maybe)"" />
    </MudItem>
</MudGrid>


@code { 
    int intValue;
    double doubleValue;
    YesNoMaybe enumValue;
    int? nullableInt;
    double? nullableDouble;
    YesNoMaybe? nullableEnum;

    public enum YesNoMaybe { Maybe, Yes, No }
}";

        public const string TextFieldCharacterCountExample = @"<MudTextField T=""string"" Counter=""25"" HelperText=""This field uses Counter prop"" Immediate=""true"" Validation=""@(new Func<string, IEnumerable<string>>(MaxCharacters))"" Label=""Regular"" Variant=""Variant.Text"" />
<MudTextField T=""string"" Counter=""25"" MaxLength=""25"" HelperText=""This field uses Counter and MaxLength prop"" Immediate=""true"" Validation=""@(new Func<string, IEnumerable<string>>(MaxCharacters))"" Label=""Limited"" Variant=""Variant.Text"" />
<MudTextField T=""string"" Counter=""0"" HelperText=""This field has Counter set to 0"" Immediate=""true"" Label=""Counter"" Variant=""Variant.Text"" />
<MudTextField T=""string"" MaxLength=""10"" HelperText=""This field uses MaxLength prop"" Immediate=""true"" Label=""Max Length"" Variant=""Variant.Text"" />

@code {
    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return ""Max 25 characters"";
    }
}";

        public const string TextFieldClearableAndInputTypeExample = @"<MudTextField @bind-Value=""_string"" Label=""Clearable Standard"" Variant=""Variant.Text"" Clearable=""true"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Custom.Brands.MudBlazor"" AdornmentColor=""Color.Primary"" Immediate=""true"" />
<MudTextField @bind-Value=""_string"" Label=""Clearable Filled"" Variant=""Variant.Filled"" Clearable=""true"" Immediate=""true"" />
<MudTextField @bind-Value=""_string"" Label=""Clearable Outlined"" Variant=""Variant.Outlined"" Clearable=""true"" />

@code {
    string _string;
}";

        public const string TextFieldDenseExample = @"<MudTextField @bind-Value=""TextValue"" Label=""Standard"" Variant=""Variant.Text"" Margin=""Margin.Dense""></MudTextField>
<MudTextField @bind-Value=""TextValue"" Label=""Filled"" Variant=""Variant.Filled"" Margin=""Margin.Dense""></MudTextField>
<MudTextField @bind-Value=""TextValue"" Label=""Outlined"" Variant=""Variant.Outlined"" Margin=""Margin.Dense""></MudTextField>

@code {
    public string TextValue { get; set; }
}";

        public const string TextFieldFocusExample = @"<MudTextField @ref=""multilineReference"" T=""string"" Label=""Manual focus"" Variant=""Variant.Filled"" Text=""@sampleText"" Lines=""3"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Filled.CenterFocusWeak"" OnAdornmentClick=""@(() => multilineReference.FocusAsync())""  />
<MudTextField @ref=""singleLineReference"" T=""string"" Label=""Manual focus"" Variant=""Variant.Filled"" Text=""@sampleText"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Filled.CenterFocusWeak"" OnAdornmentClick=""@(() => singleLineReference.FocusAsync())"" />

@code
{
    private MudTextField<string> multilineReference;
    private MudTextField<string> singleLineReference;

    string sampleText = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."";
}";

        public const string TextFieldFormPropsDisabledExample = @"<MudTextField @bind-Value=""Disabled"" Label=""Disabled"" Variant=""Variant.Text"" Disabled=""true"" />
<MudTextField @bind-Value=""Disabled"" Label=""Disabled"" Variant=""Variant.Filled"" Disabled=""true"" />
<MudTextField @bind-Value=""Disabled"" Label=""Disabled"" Variant=""Variant.Outlined"" Disabled=""true"" />

@code {
    public string Disabled { get; set; }
}";

        public const string TextFieldFormPropsHelperTextExample = @"<MudTextField @bind-Value=""HelperText"" Label=""With Helper"" HelperText=""Some helping Text"" Variant=""Variant.Text"" />
<MudTextField @bind-Value=""HelperText"" Label=""With Helper"" HelperText=""Some helping Text"" Variant=""Variant.Filled"" />
<MudTextField @bind-Value=""HelperText"" Label=""With Helper"" HelperText=""Some helping Text"" Variant=""Variant.Outlined"" />

@code {
    public string HelperText { get; set; }
}";

        public const string TextFieldFormPropsReadOnlyExample = @"<MudTextField @bind-Value=""ReadOnly"" Label=""Read Only"" ReadOnly=""true"" Variant=""Variant.Text"" />
<MudTextField @bind-Value=""ReadOnly"" Label=""Read Only"" ReadOnly=""true"" Variant=""Variant.Filled"" />
<MudTextField @bind-Value=""ReadOnly"" Label=""Read Only"" ReadOnly=""true"" Variant=""Variant.Outlined"" />

@code {
    public string ReadOnly { get; set; } = ""Can't change me"";
}";

        public const string TextFieldHelperTextExample = @"<MudTextField T=""string"" Label=""OnFocus Helper"" HelperText=""Some helping text"" HelperTextOnFocus=""true"" Variant=""Variant.Text"" />
<MudTextField T=""string"" Label=""With Helper"" HelperText=""Some helping text"" Variant=""Variant.Text"" />";

        public const string TextFieldInputsExample = @"<MudInput Value=""@(""Basic Input"")"" />
<MudInput T=""string"" Placeholder=""Placeholder"" />
<MudInput Value=""@(""Disabled"")"" Disabled=""true"" />
<MudInput Value=""@(""Error"")"" Error=""true"" />";

        public const string TextFieldMultilineExample = @"<MudTextField T=""string"" Label=""Multiline"" Variant=""Variant.Text"" Text=""@sampleText"" Lines=""5"" />
<MudTextField T=""string"" Label=""Filled"" Variant=""Variant.Filled"" Text=""@sampleText"" Lines=""3"" />
<MudTextField T=""string"" Label=""Outlined"" Variant=""Variant.Outlined"" Text=""@sampleText"" Lines=""3"" />


@code
{
    string sampleText = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."";
}";

        public const string TextFieldNativeInputsExample = @"<MudTextField T=""string"" Label=""Color""  InputType=""InputType.Color"" />
<MudTextField T=""DateTime?"" Format=""yyyy-MM-dd"" Label=""Date""  InputType=""InputType.Date""/>
<MudTextField T=""DateTime?"" Format=""s"" Label=""DateTimeLocal"" InputType=""InputType.DateTimeLocal""/>
<MudTextField T=""string"" Label=""Month"" InputType=""InputType.Month""/>
<MudTextField T=""string"" Label=""Time"" InputType=""InputType.Time""/>
<MudTextField T=""string"" Label=""Week"" InputType=""InputType.Week""/>";

        public const string TextFieldSelectExample = @"<MudTextField @ref=""multilineReference"" T=""string"" Label=""Multiline Select"" Lines=""3"" Variant=""Variant.Outlined"" Text=""@sampleText"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Filled.Api"" OnAdornmentClick=""@(() => multilineReference.SelectAsync())"" />
<MudTextField @ref=""singleLineReference"" T=""string"" Label=""Single Select"" Variant=""Variant.Outlined"" Text=""@sampleText"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Filled.Api"" OnAdornmentClick=""@(() => singleLineReference.SelectAsync())"" />

@code
{
    private MudTextField<string> multilineReference;
    private MudTextField<string> singleLineReference;

    string sampleText = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."";
}";

        public const string TextFieldSelectRangeExample = @"<MudTextField @ref=""multilineReference"" T=""string"" Label=""Multiline Select"" Lines=""3"" Variant=""Variant.Outlined"" Text=""@sampleText"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Filled.Api"" OnAdornmentClick=""@(() => multilineReference.SelectRangeAsync(5, 10))"" />
<MudTextField @ref=""singleLineReference"" T=""string"" Label=""Single Select"" Variant=""Variant.Outlined"" Text=""@sampleText"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Filled.Api"" OnAdornmentClick=""@(() => singleLineReference.SelectRangeAsync(5, 10))"" />

@code
{
    private MudTextField<string> multilineReference;
    private MudTextField<string> singleLineReference;

    string sampleText = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.""; 
}";

        public const string TimePickerActionButtonsExample = @"<MudTimePicker @ref=""_picker"" Label=""With action buttons"" AutoClose=""@autoClose"">
    <PickerActions>
        <MudButton Class=""mr-auto align-self-start"" OnClick=""@(() => _picker.Clear())"">Clear</MudButton>
        <MudButton OnClick=""@(() => _picker.Close(false))"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""@(() => _picker.Close())"">Ok</MudButton>
    </PickerActions>
</MudTimePicker>
<MudSwitch @bind-Checked=""@autoClose"" Color=""Color.Secondary"">AutoClose</MudSwitch>

@code{
    MudTimePicker _picker;
    TimeSpan? time = new TimeSpan(00, 45, 00);
    private bool autoClose;
}";

        public const string TimePickerBasicUsageExample = @"<MudTimePicker Label=""12 hours"" AmPm=""true"" @bind-Time=""time"" />
<MudTimePicker Label=""12 hours custom format"" AmPm=""true"" TimeFormat=""h:mm tt"" @bind-Time=""time"" />
<MudTimePicker Label=""24 hours"" @bind-Time=""time"" />
<MudTimePicker Label=""24 hours (editable)"" Editable=""true"" />

@code{
    TimeSpan? time = new TimeSpan(00, 45, 00);
}";

        public const string TimePickerColorExample = @"<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Success"" Rounded=""true"" Text=""03:37 PM"" AmPm=""true"" />
<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Secondary"" Rounded=""true"" Text=""13:37""/>";

        public const string TimePickerDialogExample = @"<MudTimePicker PickerVariant=""PickerVariant.Dialog"" Label=""12 hours"" AmPm=""true"" @bind-Time=""time"" />
<MudTimePicker PickerVariant=""PickerVariant.Dialog"" Label=""24 hours"" @bind-Time=""time"" />

@code{
    TimeSpan? time = new TimeSpan(00, 45, 00);
}";

        public const string TimePickerElevationExample = @"<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Success"" Rounded=""true"" Elevation=""1"" Text=""03:37 PM"" AmPm=""true"" />
<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Secondary"" Rounded=""true"" Elevation=""12"" Text=""13:37"" />";

        public const string TimePickerKeyboardNavigationExample = @"<MudTimePicker Label=""12 hours"" AmPm=""true"" @bind-Time=""time"" />
<MudTimePicker Label=""24 hours"" @bind-Time=""time"" />
<MudTimePicker Label=""With action buttons"">
    <PickerActions>
        <MudButton Class=""mr-auto align-self-start"" OnClick=""@(() => context.Clear())"">Clear</MudButton>
        <MudButton OnClick=""@(() => context.Close(false))"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""@(() => context.Close())"">Ok</MudButton>
    </PickerActions>
</MudTimePicker>

@code{
    TimeSpan? time = new TimeSpan(00, 45, 00);
}";

        public const string TimePickerReadOnlyExample = @"<MudTimePicker Label=""12 hours"" AmPm=""true"" @bind-Time=""time"" ReadOnly=""@readOnly"" />
<MudSwitch @bind-Checked=""@readOnly"" Color=""Color.Tertiary"">ReadOnly</MudSwitch>

@code{
    TimeSpan? time = new TimeSpan(00, 45, 00);
    private bool readOnly;

}";

        public const string TimePickerStaticExample = @"<MudTimePicker PickerVariant=""PickerVariant.Static"" @bind-Time=""time"" AmPm=""true"" />
<MudHidden Breakpoint=""@Breakpoint.Xs"">
    <MudTimePicker PickerVariant=""PickerVariant.Static"" Orientation=""Orientation.Landscape"" @bind-Time=""time"" />
</MudHidden>

@code{
    TimeSpan? time = new TimeSpan(13, 37, 00);
}";

        public const string TimePickerTimeEditModeExample = @"<MudTimePicker Label=""Normal"" @bind-Time=""time"" TimeEditMode=""TimeEditMode.Normal"" />
<MudTimePicker Label=""OnlyHours"" @bind-Time=""time"" TimeEditMode=""TimeEditMode.OnlyHours"" />
<MudTimePicker Label=""OnlyMinutes"" @bind-Time=""time"" TimeEditMode=""TimeEditMode.OnlyMinutes"" />

@code{

    TimeSpan? time = new TimeSpan(13, 37, 00);
}";

        public const string TimePickerViewsExample = @"<MudTimePicker Label=""Minutes"" Text=""13:37"" OpenTo=""OpenTo.Minutes"" />";

        public const string TimelineAlignExample = @"<MudSelect T=""TimelineAlign"" @bind-Value=""_timelineAlign"" Label=""Timeline Align"" Dense=""true"" Variant=""Variant.Outlined"">
    <MudSelectItem T=""TimelineAlign"" Value=""TimelineAlign.Start"">Start</MudSelectItem>
    <MudSelectItem T=""TimelineAlign"" Value=""TimelineAlign.Default"">Default</MudSelectItem>
    <MudSelectItem T=""TimelineAlign"" Value=""TimelineAlign.End"">End</MudSelectItem>
</MudSelect>

<MudTimeline TimelineAlign=""_timelineAlign"">
    <MudTimelineItem Color=""Color.Dark"" Elevation=""25"">
        <ItemOpposite>
            <MudText Color=""Color.Dark"" Typo=""Typo.h6"">Aug 2020</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudPaper Elevation=""0"" Class=""mt-n1"">
                <MudText Color=""Color.Dark"" Typo=""Typo.h6"" GutterBottom=""true"">MudBlazor Emerges</MudText>
                <MudText Typo=""Typo.body2"">A repository pops up on Github named MudBlazor.</MudText>
                <MudText Typo=""Typo.body2"">The development has already started and the most common components can be found already.</MudText>
            </MudPaper>
        </ItemContent>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Primary"" Elevation=""25"" TimelineAlign=""TimelineAlign.End"">
        <ItemOpposite>
            <MudText Color=""Color.Primary"" Typo=""Typo.h6"">Oct 2020</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudPaper Elevation=""0"" Class=""mt-n1"">
                <MudText Color=""Color.Primary"" Typo=""Typo.h6"" GutterBottom=""true"">MudBlazor Unleashed!</MudText>
                <MudText Typo=""Typo.body2"">The first version is released and uploaded as v1.0.7.</MudText>
            </MudPaper>
        </ItemContent>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Secondary"" Elevation=""25"">
        <ItemOpposite>
            <MudText Color=""Color.Secondary"" Typo=""Typo.h6"" GutterBottom=""true"">Nov 2020</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudPaper Elevation=""0"" Class=""mt-n1"">
                <MudText Color=""Color.Secondary"" Typo=""Typo.h6"" GutterBottom=""true"">First Minor</MudText>
                <MudText Typo=""Typo.body2"">MudBlazor gets its first minor with version 1.1.0.</MudText>
                <MudText Typo=""Typo.body2"">TimerPicker, AutoComplete and Charts join the library as well as T versions of our inputs and selects.</MudText>
            </MudPaper>
        </ItemContent>
    </MudTimelineItem>
</MudTimeline>

@code{
    private TimelineAlign _timelineAlign { get; set; } = TimelineAlign.Start;
  
}";

        public const string TimelineBasicExample = @"<MudTimeline>
    <MudTimelineItem>
        <MudText>Item A</MudText>
    </MudTimelineItem>
    <MudTimelineItem>
        <MudText Align=""Align.End"">Item B</MudText>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Primary"">
        <MudText>Item C</MudText>
    </MudTimelineItem>
</MudTimeline>";

        public const string TimelineDotsExample = @"<MudGrid>
    <MudItem xs=""12"" md=""8"" Class=""my-auto"">
        <MudTimeline Reverse=""true"">
            <MudTimelineItem>
                <MudText Align=""Align.End"">Static dot</MudText>
            </MudTimelineItem>
            <MudTimelineItem Color=""@DotColor"" Size=""@DotSize"" Variant=""@DotVariant"" Elevation=""@DotElevation"" HideDot=""@HideDot"">
                <ItemDot>
                    @if(DotConfig == 1)
                    {
                        <MudIcon Size=""@DotSize"" Icon=""@Icons.Custom.Brands.MudBlazor""/>
                    }
                    else if(DotConfig == 2)
                    {
                        <MudAvatar Size=""@DotSize"" Image=""images/mony.jpg"" />
                    }
                </ItemDot>
            </MudTimelineItem>
            <MudTimelineItem>
                <MudText Align=""Align.End"">Static dot</MudText>
            </MudTimelineItem>
        </MudTimeline>
    </MudItem>
    <MudItem xs=""12"" md=""4"">
        <MudPaper Class=""pa-4"" Elevation=""0"">
            <MudText Typo=""Typo.h6"">Dot Options</MudText>
            <MudSelect Label=""Color"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""DotColor"" Class=""mt-4"">
                <MudSelectItem T=""Color"" Value=""Color.Default"">Default</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Primary"">Primary</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Secondary"">Secondary</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Tertiary"">Tertiary</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Info"">Info</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Success"">Success</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Warning"">Warning</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Error"">Error</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Dark"">Dark</MudSelectItem>
            </MudSelect>
            <MudSelect Label=""Size"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""DotSize"" Class=""mt-4"">
                <MudSelectItem T=""Size"" Value=""Size.Small"">Small</MudSelectItem>
                <MudSelectItem T=""Size"" Value=""Size.Medium"">Medium</MudSelectItem>
                <MudSelectItem T=""Size"" Value=""Size.Large"">Large</MudSelectItem>
            </MudSelect>
            <MudSelect Label=""Variant"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""DotVariant"" Class=""mt-4"">
                <MudSelectItem T=""Variant"" Value=""Variant.Outlined"">Outlined</MudSelectItem>
                <MudSelectItem T=""Variant"" Value=""Variant.Filled"">Filled</MudSelectItem>
            </MudSelect>
            <MudSlider @bind-Value=""@DotElevation"" Step=""1"" Min=""0"" Max=""25"" Class=""mt-2"">Dot Elevation</MudSlider>
            <MudRadioGroup T=""int"" SelectedOptionChanged=""DotConfigChanged"">
                <MudRadio Option=""0"" Color=""Color.Primary"">Default</MudRadio>
                <MudRadio Option=""1"" Color=""Color.Secondary"">Icon</MudRadio>
                <MudRadio Option=""2"" Color=""Color.Tertiary"">Avatar</MudRadio>
                <MudRadio Option=""3"" Color=""Color.Default"">Hide</MudRadio>
            </MudRadioGroup>
        </MudPaper>
    </MudItem>
</MudGrid>


@code{
    public Size DotSize { get; set; } = Size.Medium;
    public Color DotColor { get; set; } = Color.Primary;
    public Variant DotVariant { get; set; } = Variant.Outlined;
    public int DotElevation { get; set; } = 1;
    public bool HideDot { get; set; }
    public int DotConfig;

    void DotConfigChanged(int value)
    {
        switch(value)
        {
            case 3:
                DotConfig = value;
                HideDot = true;
                break;
            default:
                DotConfig = value;
                HideDot = false;
                break;
        }
    }
}";

        public const string TimelineDotsStyleExample = @"<MudItem>
    <MudTimeline Reverse=""true"">
        <MudTimelineItem>
            <MudText Align=""Align.End"">Static dot</MudText>
        </MudTimelineItem>
        <MudTimelineItem DotStyle=""background-color: #ff0000"">
            <MudText Align=""Align.End"">Red dot</MudText>
        </MudTimelineItem>
        <MudTimelineItem>
            <MudText Align=""Align.End"">Static dot</MudText>
        </MudTimelineItem>
    </MudTimeline>
</MudItem>";

        public const string TimelineItemAlignExample = @"<MudTimeline>
    <MudTimelineItem Color=""Color.Info"">
        <MudText Typo=""Typo.button"">Packaging Process Started</MudText>
        <MudText Typo=""Typo.body2"" Class=""mud-text-secondary"">Yesterday: 16:33</MudText>
    </MudTimelineItem>
    <MudTimelineItem TimelineAlign=""TimelineAlign.End"">
        <MudText Typo=""Typo.body2"">Packaging complete</MudText>
        <MudText Typo=""Typo.body2"" Class=""mud-text-secondary"">Yesterday: 17:10</MudText>
    </MudTimelineItem>
    <MudTimelineItem TimelineAlign=""TimelineAlign.End"">
        <MudText Typo=""Typo.body2"">Waiting for pickup</MudText>
        <MudText Typo=""Typo.body2"" Class=""mud-text-secondary"">Yesterday: 17:15</MudText>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Error"">
        <MudAlert Severity=""Severity.Error"">Package missed last pickup time.</MudAlert>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Success"">
        <MudText Typo=""Typo.button"">Package picked up by driver</MudText>
        <MudText Typo=""Typo.body2"" Class=""mud-text-secondary"">Today: 17:00</MudText>
    </MudTimelineItem>
    <MudTimelineItem TimelineAlign=""TimelineAlign.End"">
        <MudText Typo=""Typo.button"">Package In Transit</MudText>
    </MudTimelineItem>
</MudTimeline>";

        public const string TimelineItemModifiersExample = @"<MudSwitch @bind-Checked=""@_outlined"" Label=""Outlined Card"" Color=""Color.Primary"" />
<MudSwitch @bind-Checked=""@_modifiers"" Label=""Disable Modifiers"" Color=""Color.Secondary"" />

<MudTimeline TimelinePosition=""TimelinePosition.Start"" DisableModifiers=""@_modifiers"">
    <MudTimelineItem Size=""Size.Medium"" Color=""Color.Info"" Elevation=""@(_outlined ? 0 : 25)"">
        <MudCard Outlined=""@_outlined"" Elevation=""25"">
            <MudCardContent>
                <MudText Typo=""Typo.h6"">Kopparberg</MudText>
                <MudText Typo=""Typo.body2"">Kopparberg is a locality and the seat of Ljusnarsberg, Örebro County, Sweden, with 4,200 inhabitants in 2015.</MudText>
                <MudText Typo=""Typo.body2"">It is famous for Kopparberg Cider, now one of the best selling ciders in the UK and worldwide.</MudText>
            </MudCardContent>
        </MudCard>
    </MudTimelineItem>
</MudTimeline>

@code{
    public bool _modifiers { get; set; }
    public bool _outlined { get; set; }
}";

        public const string TimelineOppositeExample = @"<MudTimeline>
    <MudTimelineItem Color=""Color.Info"" Size=""Size.Small"">
        <ItemOpposite>
            <MudText Color=""Color.Info"" Typo=""Typo.h5"">1970</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudText Color=""Color.Info"" Typo=""Typo.h6"" GutterBottom=""true"">Atom Towns</MudText>
            <MudText>Construction of the town of Pripyat, one of 9 “atom towns” begins, to be inhabited by future employees of the nuclear power plants.</MudText>
        </ItemContent>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Success"" Size=""Size.Small"">
        <ItemOpposite>
            <MudText Color=""Color.Success"" Typo=""Typo.h5"">1977</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudText Color=""Color.Success"" Typo=""Typo.h6"" GutterBottom=""true"">Operational</MudText>
            <MudText>The first of the Chernobyl Nuclear Power Plants four reactors is ready to operate followed by number 2 in 1978.</MudText>
        </ItemContent>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Error"" Size=""Size.Small"">
        <ItemOpposite>
            <MudText Color=""Color.Error"" Typo=""Typo.h5"">1979</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudText Color=""Color.Error"" Typo=""Typo.h6"" GutterBottom=""true"">Pripyat</MudText>
            <MudText>Pripyat officially proclaimed as a city.<br />The Chernobyl Atomic Power Station reaches its first 10 billion kilowatt-hours of electical output.</MudText>
        </ItemContent>
    </MudTimelineItem>
</MudTimeline>";

        public const string TimelineOrientationPositionExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""5"">
        <MudSelect T=""TimelineOrientation"" ValueChanged=""OnOrientationChange"" Label=""TimelineOrientation"" Dense=""true"" Variant=""Variant.Outlined"">
            <MudSelectItem T=""TimelineOrientation"" Value=""TimelineOrientation.Vertical"">Vertical</MudSelectItem>
            <MudSelectItem T=""TimelineOrientation"" Value=""TimelineOrientation.Horizontal"">Horizontal</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" sm=""5"">
        <MudSelect T=""TimelinePosition"" @bind-Value=""@_position"" Label=""TimelinePosition"" Dense=""true"" Variant=""Variant.Outlined"">
            @if(_orientation == TimelineOrientation.Vertical)
            {
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Start"">Start</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Left"">Left</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Alternate"">Alternate</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Right"">Right</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.End"">End</MudSelectItem>
            }
            else if(_orientation == TimelineOrientation.Horizontal)
            {
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Top"">Top</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Alternate"">Alternate</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Bottom"">Bottom</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" sm=""2"">
        <MudSwitch Label=""Reverse"" @bind-Checked=""@_reverse"" Disabled=""IsSwitchDisabled()"" Color=""Color.Primary"" />
    </MudItem>
</MudGrid>

<MudTimeline TimelineOrientation=""_orientation"" TimelinePosition=""_position"" Reverse=""_reverse"">
    <MudTimelineItem Color=""Color.Success"" Variant=""Variant.Filled"">
        <ItemContent>
            <MudAlert Severity=""Severity.Success"">The reactor is running at optimum temperature</MudAlert>
        </ItemContent>
        <ItemOpposite>
            <MudText Color=""Color.Success"">13:37</MudText>
        </ItemOpposite>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Warning"" Variant=""Variant.Filled"">
        <ItemContent>
            <MudAlert Severity=""Severity.Warning"">The reactor temperature exceeds the optimal range</MudAlert>
        </ItemContent>
        <ItemOpposite>
            <MudText Color=""Color.Warning"">14:08</MudText>
        </ItemOpposite>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Error"" Variant=""Variant.Filled"">
        <ItemContent>
            <MudAlert Severity=""Severity.Error"">Meltdown is imminent</MudAlert>
        </ItemContent>
        <ItemOpposite>
            <MudText Color=""Color.Error"">15:00</MudText>
        </ItemOpposite>
    </MudTimelineItem>
</MudTimeline>


@code {
    private TimelinePosition _position { get; set; } = TimelinePosition.Start;
    private TimelineOrientation _orientation { get; set; } = TimelineOrientation.Vertical;
    private bool _reverse { get; set; }

    private void OnOrientationChange(TimelineOrientation value)
    {
        _orientation = value;
        switch (value)
        {
            case TimelineOrientation.Vertical:
                if (_position is TimelinePosition.Top or TimelinePosition.Bottom)
                    _position = TimelinePosition.Start;
                break;
            case TimelineOrientation.Horizontal:
                if (_position is TimelinePosition.Start or TimelinePosition.Left or TimelinePosition.Right or TimelinePosition.End)
                    _position = TimelinePosition.Top;
                break;
        }
    }

    bool IsSwitchDisabled()
    {
        if (_position == TimelinePosition.Alternate)
            return false;
        else
            _reverse = false;
        return true;
    }
}";

        public const string ToggleIconButtonEventCallbackExample = @"<MudToggleIconButton Toggled=""@AlarmOn"" ToggledChanged=""OnToggledChanged""
                     Icon=""@Icons.Material.Filled.AlarmOff"" Color=""@Color.Error"" Title=""Off"" 
                     ToggledIcon=""@Icons.Material.Filled.AlarmOn"" ToggledColor=""@Color.Success"" ToggledTitle=""On"" />

<span>Alarm is @(AlarmOn ? ""On"" : ""Off"")</span>
<span>@($""I have been switched on {SwitchedOnCount} times (Remaining: {MaxCount - SwitchedOnCount})"")</span>

@code {
    public bool AlarmOn { get; set; }
    public int SwitchedOnCount { get; set; }

    private const int MaxCount = 5;

    public void OnToggledChanged(bool toggled)
    {
        // Because variable is not two-way bound, we need to update it ourself
        AlarmOn = toggled;

        if (AlarmOn)
        {
            if (SwitchedOnCount < MaxCount)
                SwitchedOnCount++;
            else
                AlarmOn = false;    // We can force a state under specific condition (max count reached)
        }
    }
}";

        public const string ToggleIconButtonTwoWayBindingExample = @"<MudToggleIconButton @bind-Toggled=""@AlarmOn""
                     Icon=""@Icons.Material.Filled.AlarmOff"" Color=""@Color.Error"" Title=""Off""
                     ToggledIcon=""@Icons.Material.Filled.AlarmOn"" ToggledColor=""@Color.Success"" ToggledTitle=""On""/>

<span>Alarm is @(AlarmOn ? ""On"" : ""Off"")</span>

@code {
    public bool AlarmOn { get; set; }
}";

        public const string ToolBarExample = @"<MudPaper Elevation=""25"">
    <MudToolBar>
        <MudIconButton Icon=""@Icons.Material.Outlined.Menu"" Color=""Color.Inherit"" Class=""mr-5"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Add"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Edit"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Remove"" Color=""Color.Inherit"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Settings"" Color=""Color.Inherit"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Material.Outlined.Notifications"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.PushPin"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.PeopleAlt"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.MoreVert"" Color=""Color.Inherit"" />
    </MudToolBar>
</MudPaper>";

        public const string TooltipArrowExample = @"<MudTooltip Text=""Arrow Left"" Arrow=""true"" Placement=""Placement.Left"">
    <MudButton>Arrow Left</MudButton>
</MudTooltip>
<MudTooltip Text=""Arrow Top"" Arrow=""true"" Placement=""Placement.Top"">
    <MudButton>Arrow Top</MudButton>
</MudTooltip>
<MudTooltip Text=""Arrow Bottom"" Arrow=""true"" Placement=""Placement.Bottom"">
    <MudButton>Arrow Bottom</MudButton>
</MudTooltip>
<MudTooltip Text=""Arrow Right"" Arrow=""true"" Placement=""Placement.Right"">
    <MudButton>Arrow Right</MudButton>
</MudTooltip>";

        public const string TooltipColorExample = @"<MudTooltip Text=""Secondary"" Color=""Color.Secondary"" Placement=""Placement.Top"">
    <MudButton>Secondary</MudButton>
</MudTooltip>
<MudTooltip Text=""Tertiary"" Color=""Color.Tertiary"" Placement=""Placement.Bottom"" Arrow=""true"">
    <MudButton>Tertiary</MudButton>
</MudTooltip>
<MudTooltip Text=""Primary"" Color=""Color.Primary"" Placement=""Placement.Top"">
    <MudButton>Primary</MudButton>
</MudTooltip>";

        public const string TooltipHtmlExample = @"<MudTooltip>
    <ChildContent>
        <MudIconButton Icon=""@Icons.Material.Filled.Delete"" />
    </ChildContent>
    <TooltipContent>
        <MudText Typo=""Typo.h6"">h6 title</MudText>
        <MudText Typo=""Typo.body2"">body2 content</MudText>
        <MudIcon Icon=""@Icons.Material.Filled.Star"" />
    </TooltipContent>
</MudTooltip>";

        public const string TooltipSimpleExample = @"<MudTooltip Text=""Delete"">
    <MudIconButton Icon=""@Icons.Material.Filled.Delete"" />
</MudTooltip>
<MudTooltip Text=""Add"">
    <MudFab Icon=""@Icons.Material.Filled.Add"" Color=""Color.Secondary"" />
</MudTooltip>";

        public const string TooltipTransitionsExample = @"<MudTooltip Delay=""600"" Text=""Delayed: 600"">
    <MudButton Color=""Color.Primary"">Delayed</MudButton>
</MudTooltip>
<MudTooltip Duration=""1000"" Text=""Duration: 1000"">
    <MudButton Color=""Color.Primary"">Duration</MudButton>
</MudTooltip>
<MudTooltip Duration=""0"" Text=""Duration: 0"">
    <MudButton Color=""Color.Primary"">Zero duration</MudButton>
</MudTooltip>";

        public const string TreeViewBasicExample = @"<MudTreeView T=""string"">
    <MudTreeViewItem Value=""@(""Getting Started"")"">
        <MudTreeViewItem Value=""@(""Installation"")"" />
    </MudTreeViewItem>
    <MudTreeViewItem Value=""@(""Components"")"">
        <MudTreeViewItem Value=""@(""Avatar"")"" />
        <MudTreeViewItem Value=""@(""Button"")"" />
    </MudTreeViewItem>
</MudTreeView>";

        public const string TreeViewCustomCheckboxExample = @"<MudPaper Width=""350px"" MaxHeight=""500px"" Class=""overflow-y-auto"" Elevation=""0"">
  <MudTreeView Items=""@TreeItems"">
	  <ItemTemplate>
		  <MudTreeViewItem @bind-Expanded=""@context.IsExpanded"" Items=""@context.TreeItems"">
			  <Content>
				  <MudTreeViewItemToggleButton @bind-Expanded=""@context.IsExpanded"" Visible=""@context.HasChild"" />
				  <MudCheckBox T=""bool?"" Checked=""@(context.HasPartialChildSelection() ? null : context.IsChecked)"" CheckedChanged=""@((e) => CheckedChanged(context))""></MudCheckBox>
				  <MudText>@context.Text</MudText>
			  </Content>
		  </MudTreeViewItem>
	  </ItemTemplate>
  </MudTreeView>
</MudPaper>

@code {

  private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

  public class TreeItemData
  {
    public TreeItemData Parent { get; set; } = null;

    public string Text { get; set; }

    public bool IsExpanded { get; set; } = false;

    public bool IsChecked { get; set; } = false;

    public bool HasChild => TreeItems != null && TreeItems.Count > 0;

    public HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    public TreeItemData(string text)
    {
      Text = text;
    }

    public void AddChild(string itemName)
    {
      TreeItemData item = new TreeItemData(itemName);
      item.Parent = this;
      this.TreeItems.Add(item);
    }

    public bool HasPartialChildSelection()
    {
      int iChildrenCheckedCount = (from c in TreeItems where c.IsChecked select c).Count();
      return HasChild && iChildrenCheckedCount > 0 && iChildrenCheckedCount < TreeItems.Count();
    }

  }

  protected void CheckedChanged(TreeItemData item)
  {
    item.IsChecked = !item.IsChecked;
    // checked status on any child items should mirrror this parent item
    if (item.HasChild)
    {
      foreach (TreeItemData child in item.TreeItems)
      {
        child.IsChecked = item.IsChecked;
      }
    }
    // if there's a parent and all children are checked/unchecked, parent should match
    if (item.Parent != null)
    {
      item.Parent.IsChecked = !item.Parent.TreeItems.Any(i => !i.IsChecked);
    }
	}

	protected override void OnInitialized()
	{
		TreeItemData itemFruits = new TreeItemData(""Fruits"");
		TreeItemData itemVeg = new TreeItemData(""Vegetables"");
		TreeItemData itemGrains = new TreeItemData(""Grains"");

		itemFruits.AddChild(""Apple"");
		itemFruits.AddChild(""Banana"");
		itemFruits.AddChild(""Orange"");
		itemFruits.AddChild(""Pear"");
		itemFruits.AddChild(""Pineapple"");

		itemGrains.AddChild(""Barley"");
		itemGrains.AddChild(""Oats"");
		itemGrains.AddChild(""Rice"");

		itemVeg.AddChild(""Carrot"");
		itemVeg.AddChild(""Leek"");
		itemVeg.AddChild(""Onion"");
		itemVeg.AddChild(""Potato"");

		TreeItems.Add(itemFruits);
		TreeItems.Add(itemGrains);
		TreeItems.Add(itemVeg);
	}
}";

        public const string TreeViewCustomExample = @"<MudPaper Width=""350px"" MaxHeight=""500px"" Class=""overflow-y-auto"" Elevation=""0"">
    <MudTreeView Items=""@TreeItems"">
        <ItemTemplate>
            <MudTreeViewItem @bind-Expanded=""@context.IsExpanded"" Items=""@context.TreeItems"">
                <Content>
                    <MudTreeViewItemToggleButton @bind-Expanded=""@context.IsExpanded"" Visible=""@context.HasChild"" />
                    <MudIcon Icon=""@context.Icon"" Class=""ml-0 mr-2"" Color=""@Color.Default"" />
                    <MudText>@context.Text</MudText>
                </Content>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

@code {

    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    public class TreeItemData
    {
        public string Text { get; set; }

        public string Icon { get; set; }

        public bool IsExpanded { get; set; } = true;

        public bool HasChild => TreeItems != null && TreeItems.Count > 0;

        public HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

        public TreeItemData(string text, string icon)
        {
            Text = text;
            Icon = icon;
        }
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new TreeItemData("".azure"", Icons.Custom.Brands.MicrosoftAzure));
        TreeItems.Add(new TreeItemData("".github"", Icons.Custom.Brands.GitHub));
        TreeItems.Add(new TreeItemData("".vscode"", Icons.Custom.Brands.MicrosoftVisualStudio));
        TreeItems.Add(new TreeItemData(""content"", Icons.Custom.FileFormats.FileDocument));
        TreeItems.Add(new TreeItemData(""src"", Icons.Custom.FileFormats.FileCode)
        {
            TreeItems = new HashSet<TreeItemData>()
            {
                new TreeItemData(""MudBlazor"", Icons.Custom.Brands.MudBlazor),
                new TreeItemData(""MudBlazor.Docs"", Icons.Custom.FileFormats.FileDocument)
                {
                    TreeItems = new HashSet<TreeItemData>()
                    {
                        new TreeItemData(""_Imports.razor"", Icons.Filled.AlternateEmail),
                        new TreeItemData( ""compilerconfig.json"", Icons.Custom.FileFormats.FileImage),
                        new TreeItemData( ""MudBlazor.Docs.csproj"", Icons.Custom.Brands.MicrosoftVisualStudio),
                        new TreeItemData(""NewFilesToBuild.txt"" , Icons.Custom.FileFormats.FileDocument),
                    }
                },
                new TreeItemData(""MudBlazor.Docs.Client"", Icons.Filled.Folder),
                new TreeItemData(""MudBlazor.Docs.Compiler"", Icons.Filled.Folder),
                new TreeItemData(""MudBlazor.Docs.Server"", Icons.Filled.Folder),
                new TreeItemData(""MudBlazor.UnitTests"", Icons.Filled.Folder),
                new TreeItemData(""MudBlazor.UnitTests.Viewer"", Icons.Filled.Folder),
                new TreeItemData("".editorconfig"", Icons.Custom.FileFormats.FileCode),
                new TreeItemData(""MudBlazor.sln"", Icons.Custom.Brands.MicrosoftVisualStudio)
            }
        });
        TreeItems.Add(new TreeItemData(""History"", Icons.Filled.Folder));
    }
}";

        public const string TreeViewDenseExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView T=""string"" Dense=""true"" Hover=""true"">
        <MudTreeViewItem Value=""@(""content"")"">
            <MudTreeViewItem Value=""@(""logo.png"")"" />
        </MudTreeViewItem>
        <MudTreeViewItem Value=""@(""src"")"">
            <MudTreeViewItem Value=""@(""mudblazor.docs"")"" />
            <MudTreeViewItem Value=""@(""mudblazor.docs.server"")"" />
        </MudTreeViewItem>
    </MudTreeView>
</MudPaper>";

        public const string TreeViewExpandOnClickExample = @"<MudTreeView T=""string"" ExpandOnClick=""true"">
    <MudTreeViewItem Value=""@(""Applications"")"">
        <MudTreeViewItem Value=""@(""Terminal"")"" />
    </MudTreeViewItem>
    <MudTreeViewItem Value=""@(""Documents"")"">
        <MudTreeViewItem Value=""@(""MudBlazor"")"">
            <MudTreeViewItem Value=""@(""Api"")"" />
            <MudTreeViewItem Value=""@(""Components"")"" />
        </MudTreeViewItem>
    </MudTreeViewItem>
</MudTreeView>";

        public const string TreeViewExpandOnDoubleClickExample = @"<MudTreeView T=""string"" ExpandOnDoubleClick=""true"">
    <MudTreeViewItem Value=""@(""Applications"")"">
        <MudTreeViewItem Value=""@(""Terminal"")"" />
    </MudTreeViewItem>
    <MudTreeViewItem Value=""@(""Documents"")"">
        <MudTreeViewItem Value=""@(""MudBlazor"")"">
            <MudTreeViewItem Value=""@(""Api"")"" />
            <MudTreeViewItem Value=""@(""Components"")"" />
        </MudTreeViewItem>
    </MudTreeViewItem>
</MudTreeView>";

        public const string TreeViewHoverExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView T=""string"" CanHover=""true"">
        <MudTreeViewItem Value=""@(""content"")"">
            <MudTreeViewItem Value=""@(""logo.png"")"" />
        </MudTreeViewItem>
        <MudTreeViewItem Value=""@(""src"")"">
            <MudTreeViewItem Value=""@(""mudblazor.docs"")"" />
            <MudTreeViewItem Value=""@(""mudblazor.docs.server"")"" />
        </MudTreeViewItem>
    </MudTreeView>
</MudPaper>";

        public const string TreeViewIconExample = @"<MudTreeView T=""string"">
    <MudTreeViewItem Value='""All Mail""' Icon=""@Icons.Filled.Email"" />
    <MudTreeViewItem Value='""Drafts""' Icon=""@Icons.Filled.Drafts"" />
    <MudTreeViewItem Value='""Orders""' Icon=""@Icons.Filled.Label"" IconColor=""Color.Success"" />
    <MudTreeViewItem Value='""Categories""' Icon=""@Icons.Filled.Label"" IconColor=""Color.Error"" ExpandedIcon=""@Icons.Filled.ArrowRight"">
        <MudTreeViewItem Value='""Social""' Icon=""@Icons.Filled.Group"" />
        <MudTreeViewItem Value='""Updates""' Icon=""@Icons.Filled.Info"" IconColor=""Color.Warning"" />
        <MudTreeViewItem Value='""Forums""' Icon=""@Icons.Filled.QuestionAnswer"" />
        <MudTreeViewItem Value='""Spam""' Icon=""@Icons.Filled.LocalOffer"" />
    </MudTreeViewItem>
    <MudTreeViewItem Value='""Trash""' Icon=""@Icons.Filled.Delete"" />
</MudTreeView>";

        public const string TreeViewItemTemplateExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView Items=""TreeItems"" MultiSelection=""true"" @bind-ActivatedValue=""ActivatedValue"" @bind-SelectedValues=""SelectedValues"">
        <ItemTemplate>
            <MudTreeViewItem @bind-Expanded=""@context.IsExpanded"" Items=""@context.TreeItems"" Value=""@context""
                             Icon=""@context.Icon"" Text=""@context.Title"" EndText=""@context.Number?.ToString()"" EndTextTypo=""@Typo.caption"" />
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

<div style=""width: 100%"">
    <MudText Typo=""@Typo.subtitle1"">Activated item: @(ActivatedValue?.Title)</MudText>
    <MudText Typo=""@Typo.subtitle1"">Sum of selected items: @GetSelectedSum()</MudText>
</div>

@code {
    private TreeItemData ActivatedValue { get; set; }

    private HashSet<TreeItemData> SelectedValues { get; set; }

    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    public class TreeItemData
    {
        public string Title { get; set; }

        public string Icon { get; set; }

        public int? Number { get; set; }

        public bool IsExpanded { get; set; }

        public HashSet<TreeItemData> TreeItems { get; set; }

        public TreeItemData(string title, string icon, int? number = null)
        {
            Title = title;
            Icon = icon;
            Number = number;
        }
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new TreeItemData(""All Mail"", Icons.Filled.Email));
        TreeItems.Add(new TreeItemData(""Trash"", Icons.Filled.Delete));
        TreeItems.Add(new TreeItemData(""Categories"", Icons.Filled.Label)
        {
            IsExpanded = true,
            TreeItems = new HashSet<TreeItemData>()
            {
                new TreeItemData(""Social"", Icons.Filled.Group, 90),
                new TreeItemData(""Updates"", Icons.Filled.Info, 2294),
                new TreeItemData(""Forums"", Icons.Filled.QuestionAnswer, 3566),
                new TreeItemData(""Promotions"", Icons.Filled.LocalOffer, 733)
            }
        });
        TreeItems.Add(new TreeItemData(""History"", Icons.Filled.Label));
    }

    public int GetSelectedSum()
    {
        return SelectedValues?.Sum(i => i.Number ?? 0) ?? 0;
    }
}";

        public const string TreeViewMultiSelectionExample = @"<MudTreeView MultiSelection=""true"" @bind-SelectedValues=""SelectedValues"">
    <MudTreeViewItem Value=""@(""content"")"">
        <MudTreeViewItem Value=""@(""logo.png"")"" />
    </MudTreeViewItem>
    <MudTreeViewItem Value=""@(""src"")"">
        <MudTreeViewItem Value=""@(""mudblazor.docs"")"" />
        <MudTreeViewItem Value=""@(""mudblazor.docs.server"")"">
            <MudTreeViewItem Value=""@(""wwwroot"")"">
                <MudTreeViewItem Value=""@(""robots.txt"")"" />
                <MudTreeViewItem Value=""@(""favicon.ico"")"" />
            </MudTreeViewItem>
        </MudTreeViewItem>
    </MudTreeViewItem>
</MudTreeView>

<MudText Style=""width: 100%"" Typo=""Typo.subtitle1""  Class=""mb-n2"">Number of selected items: @(SelectedValues?.Count ?? 0)</MudText>

@code {
    HashSet<string> SelectedValues { get; set; }
}";

        public const string TreeViewMultiSelecttionColorExample = @"<MudGrid>
    <MudItem xs=""12"" md=""8"" Class=""my-auto"">
        <MudTreeView T=""string"" CheckBoxColor=""Color"" MultiSelection=""true"">
            <MudTreeViewItem Value=""@(""content"")"">
                <MudTreeViewItem Value=""@(""logo.png"")"" />
            </MudTreeViewItem>
            <MudTreeViewItem Value=""@(""src"")"">
                <MudTreeViewItem Value=""@(""mudblazor.docs"")"" />
                <MudTreeViewItem Value=""@(""mudblazor.docs.server"")"">
                    <MudTreeViewItem Value=""@(""wwwroot"")"">
                        <MudTreeViewItem Value=""@(""robots.txt"")"" />
                        <MudTreeViewItem Value=""@(""favicon.ico"")"" />
                    </MudTreeViewItem>
                </MudTreeViewItem>
            </MudTreeViewItem>
        </MudTreeView>
    </MudItem>
    <MudItem xs=""12"" md=""4"">
        <MudSelect Label=""Color"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""@Color"">
            <MudSelectItem T=""Color"" Value=""Color.Default"">Default</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Primary"">Primary</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Secondary"">Secondary</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Tertiary"">Tertiary</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Info"">Info</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Success"">Success</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Warning"">Warning</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Error"">Error</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Dark"">Dark</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>
@code{
    public Color Color { get; set; } = Color.Error;
    HashSet<string> SelectedValues { get; set; }
}";

        public const string TreeViewSelectedColorExample = @"<MudGrid>
    <MudItem xs=""12"" md=""8"" Class=""my-auto"">
    <MudTreeView Color=""Color"" T=""string"" Hover=""true"" @bind-SelectedValue=""SelectedValue"">
        <MudTreeViewItem Value='""All Mail""' Icon=""@Icons.Filled.Email"" />
        <MudTreeViewItem Value='""Drafts""' Icon=""@Icons.Filled.Drafts"" />
        <MudTreeViewItem Value='""Orders""' Icon=""@Icons.Filled.Label"" />
        <MudTreeViewItem Value='""Categories""' Icon=""@Icons.Filled.Label"">
            <MudTreeViewItem Value='""Social""' Icon=""@Icons.Filled.Group"" />
            <MudTreeViewItem Value='""Updates""' Icon=""@Icons.Filled.Info"" />
            <MudTreeViewItem Value='""Forums""' Icon=""@Icons.Filled.QuestionAnswer"" />
            <MudTreeViewItem Value='""Spam""' Icon=""@Icons.Filled.LocalOffer"" />
        </MudTreeViewItem>
        <MudTreeViewItem Value='""Trash""' Icon=""@Icons.Filled.Delete"" />
    </MudTreeView>
    </MudItem>
    <MudItem xs=""12"" md=""4"">
        <MudSelect Label=""Color"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""Color"">
            <MudSelectItem T=""Color"" Value=""Color.Primary"">Primary</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Secondary"">Secondary</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Tertiary"">Tertiary</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Info"">Info</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Success"">Success</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Warning"">Warning</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Error"">Error</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""Color.Dark"">Dark</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>

@code{ 
    public Color Color { get; set; } = Color.Error;
    string SelectedValue { get; set; }
}";

        public const string TreeViewSelectedExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView @bind-SelectedValue=""SelectedValue"" Hover=""true"">
        <MudTreeViewItem @bind-Expanded=""@folderOneExpanded"" Value=""@("".vscode"")"" Icon=""@(folderOneExpanded ? Icons.Custom.Uncategorized.FolderOpen : Icons.Custom.Uncategorized.Folder)"">
            <MudTreeViewItem Value=""@(""launch.json"")"" Icon=""@Icons.Custom.FileFormats.FileCode"" />
            <MudTreeViewItem Value=""@(""tasks.json"")"" Icon=""@Icons.Custom.FileFormats.FileCode"" />
        </MudTreeViewItem>
        <MudTreeViewItem @bind-Expanded=""@folderTwoExpanded"" Value=""@(""content"")"" Icon=""@(folderTwoExpanded ? Icons.Custom.Uncategorized.FolderOpen : Icons.Custom.Uncategorized.Folder)"">
            <MudTreeViewItem Value=""@(""logo.png"")"" Icon=""@Icons.Custom.FileFormats.FileImage"" />
        </MudTreeViewItem>
    </MudTreeView>
</MudPaper>

<MudText Style=""width: 100%"" Typo=""@Typo.subtitle1"">Selected item: @SelectedValue</MudText>

@code {
    string SelectedValue { get; set; }
    bool folderOneExpanded;
    bool folderTwoExpanded;
}";

        public const string TreeViewServerExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView ServerData=""LoadServerData"" Items=""TreeItems"">
        <ItemTemplate>
            <MudTreeViewItem Value=""@context"" Icon=""@context.Icon"" LoadingIconColor=""Color.Info"" Text=""@context.Title"" EndText=""@context.Number?.ToString()"" EndTextTypo=""@Typo.caption"" />
        </ItemTemplate>
    </MudTreeView>
</MudPaper>


@code{
    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    public class TreeItemData
    {
        public string Title { get; set; }

        public string Icon { get; set; }

        public int? Number { get; set; }

        public HashSet<TreeItemData> TreeItems { get; set; }

        public TreeItemData(string title, string icon, int? number = null)
        {
            Title = title;
            Icon = icon;
            Number = number;
        }
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new TreeItemData(""All Mail"", Icons.Filled.Email));
        TreeItems.Add(new TreeItemData(""Trash"", Icons.Filled.Delete));
        TreeItems.Add(new TreeItemData(""Categories"", Icons.Filled.Label)
        {
            TreeItems = new HashSet<TreeItemData>()
            {
                new TreeItemData(""Social"", Icons.Filled.Group, 90),
                new TreeItemData(""Updates"", Icons.Filled.Info, 2294),
                new TreeItemData(""Forums"", Icons.Filled.QuestionAnswer, 3566),
                new TreeItemData(""Promotions"", Icons.Filled.LocalOffer, 733)
            }
        });
        TreeItems.Add(new TreeItemData(""History"", Icons.Filled.Label));
    }

    public async Task<HashSet<TreeItemData>> LoadServerData(TreeItemData parentNode)
    {
        await Task.Delay(500);
        return parentNode.TreeItems;
    }
}";

        public const string TextAlignmentExample = @"<MudText Align=""Align.Left""><b>Left</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Start""><b>Start</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Right""><b>Right</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.End""><b>End</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Center""><b>Center</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Justify""><b>Justify</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Inherit""><b>Inherit</b> Lorem ipsum dolor sit amet.</MudText>";

        public const string TextGeneralExample = @"<MudText Typo=""Typo.h1"">h1. Heading</MudText>
<MudText Typo=""Typo.h2"">h2. Heading</MudText>
<MudText Typo=""Typo.h3"">h3. Heading</MudText>
<MudText Typo=""Typo.h4"">h4. Heading</MudText>
<MudText Typo=""Typo.h5"">h5. Heading</MudText>
<MudText Typo=""Typo.h6"">h6. Heading</MudText>
<MudText Typo=""Typo.subtitle1"">subtitle1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur</MudText>
<MudText Typo=""Typo.subtitle2"">subtitle2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur</MudText>
<MudText Typo=""Typo.body1"">body1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur unde suscipit, quam beatae rerum inventore consectetur, neque doloribus, cupiditate numquam dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam.</MudText>
<MudText Typo=""Typo.body2"">body2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur unde suscipit, quam beatae rerum inventore consectetur, neque doloribus, cupiditate numquam dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam.</MudText>
<MudText Typo=""Typo.button"">BUTTON TEXT</MudText>
<MudText Typo=""Typo.caption"">caption text</MudText>
<MudText Typo=""Typo.overline"">OVERLINE TEXT</MudText>";

        public const string OverviewThemesCustomExample = @"<MudThemeProvider Theme=""MyCustomTheme"" />

@code{
    MudTheme MyCustomTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.Blue.Default,
            Secondary = Colors.Green.Accent4,
            AppbarBackground = Colors.Red.Default,
        },
        PaletteDark = new Palette()
        {
            Primary = Colors.Blue.Lighten1
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = ""260px"",
            DrawerWidthRight = ""300px""
        }
    };
}";

        public const string OverviewThemesDarkPaletteExample = @"@using MudBlazor.Utilities;

@{var DarkModeClass = new CssBuilder()
.AddClass(""mud-dark-palette-example-dark-mode"", _darkMode)
.AddClass(""mud-dark-palette-example-light-mode"", !_darkMode)
.Build();}
<MudPaper Width=""500px"" Class=""@DarkModeClass"">
<MudSwitch Color=""Color.Primary"" Class=""ma-4"" T=""bool"" @bind-Checked=""_darkMode"" Label=""Toggle Light/Dark Mode""/>
    <MudText Class=""ma-4"">This is an example text!</MudText>
</MudPaper>

@code{
    private bool _darkMode;
}
<style>
    .mud-dark-palette-example-dark-mode.mud-paper {
        background-color: #32333d;
    }
    .mud-dark-palette-example-dark-mode .mud-typography {
        color: #ffffffb2;
    }
    
    .mud-dark-palette-example-light-mode.mud-paper {
            background-color: #ffffffff;
    }
    .mud-dark-palette-example-light-mode .mud-typography {
            color: #424242ff;
    }
</style>";

        public const string OverviewThemesDarkPaletteExampleSource = @"<MudThemeProvider @bind-IsDarkMode=""@_isDarkMode"" Theme=""_theme""/>
<MudSwitch @bind-Checked=""@_isDarkMode"" Color=""Color.Primary"" Class=""ma-4"" T=""bool"" Label=""Toggle Light/Dark Mode""/>

<MudText Class=""ma-4"">This is an example text!</MudText>

@code{
    private MudTheme _theme = new();
    private bool _isDarkMode;
}";

        public const string OverviewThemesDefaultExample = @"<MudThemeProvider />";

        public const string OverviewThemesScrollbarExample = @"<MudThemeProvider DefaultScrollbar=""true"" />";

        public const string OverviewThemesSystemPreferenceExample = @"<MudThemeProvider @ref=""@_mudThemeProvider"" @bind-IsDarkMode=""@_isDarkMode""/>

@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }
}";

        public const string TypographyDefaultFontExample = @"@code {
    MudTheme MyCustomTheme = new MudTheme()
    {
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { ""Poppins"", ""Helvetica"", ""Arial"", ""sans-serif"" }
            }
        }
    };
}";

        public const string TypographySettingsExample = @"@code {
    MudTheme MyCustomTheme = new MudTheme()
    {
        Typography = new Typography()
        {
            H6 = new H6()
            {
                FontFamily = new[] { ""Roboto"", ""Helvetica"", ""Arial"", ""sans-serif"" },
                FontSize = ""1.25rem"",
                FontWeight = 500,
                LineHeight = 1.6,
                LetterSpacing = "".0075em""
            }
        }
    };
}";

        public const string ColorsMaterialCodeExample = @"<MudPaper Class=""pa-4"" Style=""@($""color:{Colors.Purple.Accent3};"")"">
    Colors.Purple.Accent3
</MudPaper>
<MudPaper Class=""pa-4"" Style=""@($""color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};"")"">
    Colors.BlueGrey.Darken4 Colors.LightGreen.Accent3
</MudPaper>";

        public const string ColorsMaterialExample = @"<MudPaper Class=""pa-4 red-text text-accent-4"">
    .red-text .text-accent-4
</MudPaper>
<MudPaper Class=""pa-4 blue darken-1 shades-text text-white"">
    .blue .darken-1 .shades-text .text-white
</MudPaper>";

        public const string ColorsMudBlazorCodeExample = @"<MudPaper Class=""pa-4"" Style=""@($""color:{Theme.Palette.Dark}; background:{Theme.Palette.Warning};"")"">
    Warning with Dark text
</MudPaper>
<MudPaper Class=""pa-4"" Style=""@($""color:{Theme.Palette.SuccessLighten}; background:{Theme.Palette.Dark};"")"">
    Dark with Success lighten
</MudPaper>

@code {
    private MudTheme Theme = new MudTheme();
}";

        public const string ColorsMudBlazorExample = @"<MudPaper Class=""pa-4 mud-info"">.mud-info</MudPaper>
<MudPaper Class=""pa-4 mud-secondary-text"">.mud-secondary-text</MudPaper>
<MudPaper Class=""pa-4 mud-theme-primary"">.mud-theme-primary</MudPaper>";

        public const string CustomConverterExample = @"<MudSimpleTable Elevation=""0"" Hover=""false"" Class=""mt-4"" Dense=""false"">
    <colgroup>
        <col style=""width: 70%;"" />
        <col style=""width: 15%;"" />
        <col style=""width: 15%;"" />
    </colgroup>
    <thead>
        <tr>
            <th>Mode</th>
            <th>TextField</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><CodeInline>Free decimal places (default)</CodeInline></td>
            <td>
                <MudTextField @bind-Value=""@decimal_value_free"" Class=""mt-n1"" Immediate=""true"" />
            </td>
            <td><MudText Inline=""true"">@ToS(decimal_value_free) </MudText></td>
        </tr>
        <tr>
            <td><CodeInline>No decimal places (what about int value?)</CodeInline></td>
            <td>
                <MudTextField Converter=""@(new DefaultConverter<decimal>() { GetFunc = (e) => Math.Round(decimal.Parse(e), 0), SetFunc = (e) => e.ToString(""#0"")})"" 
                              @bind-Value=""@decimal_value_0d"" Class=""mt-n1"" Immediate=""false"" />
            </td>
            <td><MudText Inline=""true"">@ToS(decimal_value_0d) </MudText></td>
        </tr>
        <tr>
            <td><CodeInline>Two decimal places</CodeInline></td>
            <td>
                <MudTextField Converter=""@(new DefaultConverter<decimal>() { GetFunc = (e) => Math.Round(decimal.Parse(e), 2),  SetFunc = (e) => e.ToString(""0.00"")})"" 
                              @bind-Value=""@decimal_value_2d"" Class=""mt-n1"" Immediate=""false"" />
            </td>
            <td><MudText Inline=""true"">@ToS(decimal_value_2d) </MudText></td>
        </tr>
        <tr>
            <td><CodeInline>Three decimal places</CodeInline></td>
            <td>
                <MudTextField Converter=""@(new DefaultConverter<decimal>() { GetFunc = (e) => Math.Round(decimal.Parse(e), 3), SetFunc = (e) => e.ToString(""0.000"")})""
                              @bind-Value=""@decimal_value_3d"" Class=""mt-n1"" Immediate=""false"" />
            </td>
            <td><MudText Inline=""true"">@ToS(decimal_value_3d) </MudText></td>
        </tr>
    </tbody>
</MudSimpleTable>

@code {
    decimal decimal_value_free = 99.99999999m;
    decimal decimal_value_0d = 99;
    decimal decimal_value_2d = 99.99m;
    decimal decimal_value_3d = 99.999m;

    string ToS(object value)
    {
        if (value == null)
            return ""null"";
        return """" + value;
    }

}";

        public const string SpecialConverterExample = @"@using System.Globalization;

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSwitch Color=""Color.Primary"" @bind-Checked=""@state"">Flip the switch</MudSwitch>
    </MudItem>
    
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""Switch state"" Variant=""Variant.Outlined"" Converter=""@converter"" @bind-Value=""@state"" Immediate=""true""/>
    </MudItem>

</MudGrid>

@code {
    bool state = true;

    Converter<bool> converter = new Converter<bool>
    {
        SetFunc = value => value ? ""ON"" : ""OFF"",
        GetFunc = text => (text ?? """").ToLowerInvariant() == ""on"",
    };
}";

        public const string TurkeyTestExample = @"@using System.Globalization;

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""en-US"" Variant=""Variant.Outlined"" Culture=""@en"" @bind-Value=""date"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""de-AT"" Variant=""Variant.Outlined"" Culture=""@de"" @bind-Value=""date""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""cn-ZH"" Variant=""Variant.Outlined"" Culture=""@cn"" @bind-Value=""date""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""en-US: dddd, MMM dd"" Variant=""Variant.Outlined"" Culture=""@en"" Format=""dddd, MMM dd"" @bind-Value=""date"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""de-AT: dddd, dd. MM."" Variant=""Variant.Outlined"" Culture=""@de"" Format=""dddd, dd. MM."" @bind-Value=""date""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""cn-ZH: yy年MM月dd日"" Variant=""Variant.Outlined"" Culture=""@cn"" Format=""yyyy年MM月dd日"" @bind-Value=""date""></MudTextField>
    </MudItem>
</MudGrid>

@code {
    CultureInfo en = @CultureInfo.GetCultureInfo(""en-US"");
    CultureInfo de = CultureInfo.GetCultureInfo(""de-AT"");
    CultureInfo cn = CultureInfo.GetCultureInfo(""cn-ZH"");
    DateTime date = DateTime.Now;
}";

        public const string ElevationAllExample = @"<MudPaper Elevation=""0"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-0</MudPaper>
<MudPaper Elevation=""1"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-1</MudPaper>
<MudPaper Elevation=""2"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-2</MudPaper>
<MudPaper Elevation=""3"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-3</MudPaper>
<MudPaper Elevation=""4"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-4</MudPaper>
<MudPaper Elevation=""5"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-5</MudPaper>
<MudPaper Elevation=""6"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-6</MudPaper>
<MudPaper Elevation=""7"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-7</MudPaper>
<MudPaper Elevation=""8"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-8</MudPaper>
<MudPaper Elevation=""9"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-9</MudPaper>
<MudPaper Elevation=""10"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-10</MudPaper>
<MudPaper Elevation=""11"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-11</MudPaper>
<MudPaper Elevation=""12"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-12</MudPaper>
<MudPaper Elevation=""13"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-13</MudPaper>
<MudPaper Elevation=""14"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-14</MudPaper>
<MudPaper Elevation=""15"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-15</MudPaper>
<MudPaper Elevation=""16"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-16</MudPaper>
<MudPaper Elevation=""17"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-17</MudPaper>
<MudPaper Elevation=""18"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-18</MudPaper>
<MudPaper Elevation=""19"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-19</MudPaper>
<MudPaper Elevation=""20"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-20</MudPaper>
<MudPaper Elevation=""21"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-21</MudPaper>
<MudPaper Elevation=""22"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-22</MudPaper>
<MudPaper Elevation=""23"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-23</MudPaper>
<MudPaper Elevation=""24"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-24</MudPaper>
<MudPaper Elevation=""25"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-4"">.mud-elevation-25</MudPaper>";

        public const string ElevationUsageExample = @"<MudPaper Elevation=""0"" Class=""py-8 px-10"">0</MudPaper>
<MudPaper Elevation=""1"" Class=""py-8 px-10"">1</MudPaper>
<MudPaper Elevation=""4"" Class=""py-8 px-10"">4</MudPaper>

<div class=""mud-elevation-0 py-8 px-10 rounded white"">0</div>
<div class=""mud-elevation-1 py-8 px-10 rounded white"">1</div>
<div class=""mud-elevation-4 py-8 px-10 rounded white"">4</div>";

        public const string BlockMaskExample = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 400px;"">
    <MudItem xs=""12"">
        <MudTextField Mask=""@mask"" Label=""Flight number"" 
                      @bind-Value=""text""  Variant=""@Variant.Outlined"" Clearable />
    </MudItem>
    <MudItem xs=""12"">
		Flight number: <b>@text</b>
    </MudItem>
</MudGrid>

@code {
    public string text { get; set; }

    IMask mask = new BlockMask(delimiters:"" "", new Block('a', 1,3), new Block('0', 1,4));
}";

        public const string CustomCharactersExample = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask1"" Label=""MAC Address""  HelperText=""@mask1.Mask""
                      @bind-Value=""mac1""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask2"" Label=""MAC with Placeholder"" HelperText=""@mask2.Mask""
                      @bind-Value=""mac2""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        MAC Address: <b>@mac1</b>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        Cleaned MAC Address: <b>@mac2</b>
    </MudItem>
</MudGrid>

@code {
    public string mac1, mac2;

    public PatternMask mask1 = new PatternMask(""##:##:##:##:##:##"") { 
        MaskChars = new[] { new MaskChar('#', @""[0-9a-fA-F]"") } 
    };

    public PatternMask mask2 = new PatternMask(""XX-XX-XX-XX-XX-XX"") { 
        MaskChars = new[] { new MaskChar('X', @""[0-9a-fA-F]"") },
        Placeholder = '_',
        CleanDelimiters = true,
        Transformation = AllUpperCase
    };
    
    // transform lower-case chars into upper-case chars
    private static char AllUpperCase(char c) => c.ToString().ToUpperInvariant()[0];

}";

        public const string DateMaskExample = @"@using System.Globalization


<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask1"" Label=""ISO Date""  HelperText=""@mask1.Mask""
                      @bind-Value=""isoDate""  Variant=""@Variant.Text"" Clearable />
        ISO: <b>@isoDate</b>
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask2"" Label=""US"" HelperText=""@mask2.Mask""
                      @bind-Value=""usDate""  Variant=""@Variant.Text"" Clearable />
        US: <b>@usDate</b>
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask3"" Label=""AT""  HelperText=""@mask3.Mask""
                      @bind-Value=""atDate""  Variant=""@Variant.Text"" Clearable />
        AT: <b>@atDate</b>
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask4"" Label=""Month"" HelperText=""@mask4.Mask""
                      @bind-Value=""monthAndYear""  Variant=""@Variant.Text"" Clearable />
        MM/YY: <b>@monthAndYear</b>
    </MudItem>
</MudGrid>

@code {
    string isoDate, usDate, atDate;
    string monthAndYear;

    IMask mask1 = new DateMask(""yyyy-MM-dd"");
    IMask mask2 = new DateMask(""MM/dd/yyyy"");
    IMask mask3 = new DateMask(""TT.MM.JJJJ"", 'J', 'M', 'T');
    IMask mask4 = new DateMask(""MM/YY"", 'Y', 'M');
}";

        public const string MultiMaskExample = @"<MudGrid Class=""justify-space-between mb-3 mx-n3"" Style=""max-width: 800px;"">
    <MudItem xs=""12"">
        <MudTextField Mask=""@mask"" Label=""Credit Card Number"" Style=""max-width: 400px;""
                  @bind-Value=""@cardNumber"" Variant=""@Variant.Text"" Clearable/>
    </MudItem>
    <MudItem xs=""12"">
        Credit Card: <b>@cardNumber</b>
    </MudItem>
</MudGrid>

@code {
    string cardNumber, cardType;

    MultiMask mask = new MultiMask(""0000 0000 0000 0000"",
        new MaskOption(""American Express"", ""0000 000000 00000"", @""^(34|37)""),
        new MaskOption(""Diners Club"", ""0000 000000 0000"", @""^(30[0-59])""),
        new MaskOption(""JCB"", ""0000 0000 0000 0000"", @""^(35|2131|1800)""),
        new MaskOption(""VISA"", ""0000 0000 0000 0000"", @""^4""),
        new MaskOption(""MasterCard"", ""0000 0000 0000 0000"", @""^(5[1-5]|2[2-7])""),
        new MaskOption(""Discover"", ""0000 0000 0000 0000"", @""^(6011|65|64[4-9])"")
    );
    MaskOption? option = null;
    Dictionary<string, Variant> variants = new();
    MudElement element;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        mask.OptionDetected += (o, input) =>
        {
            option = o;
            cardType = o == null ? ""Unknown"" : o.Value.Id;
            UpdateClasses();
            // re-render only MudElement's children
            element.Refresh();
        };
        UpdateClasses();
    }

    void UpdateClasses()
    {
        foreach (var type in new[] { ""American Express"", ""Diners Club"", ""JCB"", ""VISA"", ""MasterCard"", ""Discover"" })
            variants[type] = type == cardType ? Variant.Filled : Variant.Outlined;
    }
}

@* Note: MudElement is used here to limit the render-update to this html tree  *@
<MudElement HtmlTag=""div"" @ref=""element"" Style=""max-width: 800px;"" Class=""mud-width-full"">
    <MudGrid Class=""justify-space-between"">
        <MudItem xs=""12"" sm=""6"">
            <MudAlert Variant=""@variants[""American Express""]"" NoIcon Dense Class=""mb-2"">
                American Express: starts with 34/37<br/>
                <pre>34&#183;&#183; &#183;&#183;&#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183;&#183;</pre>
            </MudAlert>
            <MudAlert Variant=""@variants[""Diners Club""]"" NoIcon Dense Class=""mb-2"">
                Diners Club: starts with 300-305/309<br/>
                <pre>300&#183; &#183;&#183;&#183;&#183;&#183;&#183; &#183;&#183;&#183;</pre>
            </MudAlert>
            <MudAlert Variant=""@variants[""JCB""]"" NoIcon Dense Class=""mb-2"">
                JCB: starts with 35/2131/1800<br/>
                <pre>35&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183;</pre>
            </MudAlert>
        </MudItem>
        <MudItem xs=""12"" sm=""6"">
            <MudAlert Variant=""@variants[""VISA""]"" NoIcon Dense Class=""mb-2"">
                VISA: starts with 4<br/>
                <pre>4&#183;&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183;</pre>
            </MudAlert>
            <MudAlert Variant=""@variants[""MasterCard""]"" NoIcon Dense Class=""mb-2"">
                MasterCard: starts with 51-55/22-27<br/>
                <pre>51&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183;</pre>
            </MudAlert>
            <MudAlert Variant=""@variants[""Discover""]"" NoIcon Dense Class=""mb-2"">
                Discover: starts with 6011/65/644-649<br/>
                <pre>6011 &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183;</pre>
            </MudAlert>
        </MudItem>
    </MudGrid>
    <MudText Class=""mud-text-secondary"" Typo=""Typo.body2"">Example inspired by Cleave.js</MudText>
</MudElement>";

        public const string PatternMaskExample = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 400px;"">
    <MudItem xs=""12"">
        <MudTextField Mask=""@(new PatternMask(""0000 0000 0000 0000""))"" Label=""Credit Card Number"" 
                      @bind-Value=""creditCard""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
	<MudItem xs=""4"">
        <MudTextField Mask=""@(new DateMask(""MM/YY"", 'Y', 'M'))"" Label=""Expires"" 
                      @bind-Value=""expiration""  Variant=""@Variant.Text"" />
    </MudItem>
    <MudItem xs=""4""/>
	<MudItem xs=""4"">
        <MudTextField Mask=""@(new PatternMask(""000""))"" Label=""CVC"" 
                      @bind-Value=""cvc""  Variant=""@Variant.Text"" />
    </MudItem>
    <MudItem xs=""12"">
		Credit Card Number: <b>@creditCard</b><br/>
		Expiration Date: <b>@expiration</b><br/>
        CVC: <b>@cvc</b>
    </MudItem>
</MudGrid>

@code {
    private string creditCard;
    private string expiration;
    private string cvc;
}";

        public const string RegexMaskEmailExample = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@emailMask"" Label=""Email Address""  HelperText=""@emailMask.Mask""
                      @bind-Value=""email""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@emailCustomMask"" Label=""Email Address with Custom Mask""  HelperText=""@emailCustomMask.Mask""
                      @bind-Value=""email2""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        Email 1: <b>@email</b>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        Email 2: <b>@email2</b>
    </MudItem>
</MudGrid>

@code {
    public string email;
    public string email2;
    public IMask emailMask = RegexMask.Email();
    public IMask emailCustomMask = RegexMask.Email(""<user>@<domain.com>"");
}";

        public const string RegexMaskExample = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask1"" Label=""Only digits (unlimited length)""  HelperText=""@mask1.Mask""
                      @bind-Value=""numbers""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask2"" Label=""Russian postal code"" HelperText=""@mask2.Mask""
                      @bind-Value=""russianZip""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        Number: <b>@numbers</b>
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        Russian ZIP: <b>@russianZip</b>
    </MudItem>
</MudGrid>

@code {
    public string numbers, russianZip;

    public IMask mask1 = new RegexMask(@""^\d+$"");

    public IMask mask2 = new RegexMask(@""^[1-6]\d{0,5}$"");

}";

        public const string RegexMaskIPv4Example = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@ipv4Mask"" Label=""IPv4 Address""  HelperText=""@ipv4Mask.Mask""
                      @bind-Value=""ip""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@ipv4PortMask"" Label=""IPv4 Address with Port""  HelperText=""@ipv4PortMask.Mask""
                      @bind-Value=""ipPort""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        IPv4: <b>@ip</b>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        IPv4 w/Port: <b>@ipPort</b>
    </MudItem>
</MudGrid>

@code {
    public string ip;
    public string ipPort;
    public IMask ipv4Mask = RegexMask.IPv4();
    public IMask ipv4PortMask = RegexMask.IPv4(true);
}";

        public const string RegexMaskIPv6Example = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@ipv6Mask"" Label=""IPv6 Address""  HelperText=""@ipv6Mask.Mask""
                      @bind-Value=""ip""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@ipv6PortMask"" Label=""IPv6 Address with Port""  HelperText=""@ipv6PortMask.Mask""
                      @bind-Value=""ipPort""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        IPv4: <b>@ip</b>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        IPv4 w/Port: <b>@ipPort</b>
    </MudItem>
</MudGrid>

@code {
    public string ip;
    public string ipPort;
    public IMask ipv6Mask = RegexMask.IPv6();
    public IMask ipv6PortMask = RegexMask.IPv6(true);
}";

        public const string RTLLanguagesBorderRadiusExample = @"<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-s-xl"">
    <MudText Align=""Align.Center"">.rounded-s-xl</MudText>
</div>
<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-e-xl"">
    <MudText Align=""Align.Center"">.rounded-e-xl</MudText>
</div>
<div class=""mud-theme-tertiary py-4 px-6 mx-4 rounded-ts-xl"">
    <MudText Align=""Align.Center"">.rounded-ts-xl</MudText>
</div>
<div class=""mud-theme-info py-4 px-6 mx-4 rounded-te-xl"">
    <MudText Align=""Align.Center"">.rounded-te-xl</MudText>
</div>
<div class=""mud-theme-warning py-4 px-6 mx-4 rounded-bs-xl"">
    <MudText Align=""Align.Center"">.rounded-bs-xl</MudText>
</div>
<div class=""mud-theme-error py-4 px-6 mx-4 rounded-be-xl"">
    <MudText Align=""Align.Center"">.rounded-be-xl</MudText>
</div>";

        public const string RTLLanguagesLayoutExample = @"<MudRTLProvider RightToLeft=""@_rightToLeft"">
    <MudCard Class=""mb-2"" Style=""width: 400px"">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color=""Color.Secondary"">@Localizer(""CardAvatarLetter"")</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo=""Typo.body1"">@Localizer(""CardHeader"")</MudText>
                <MudText Typo=""Typo.body2"">@Localizer(""CardSubHeader"")</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon=""@Icons.Material.Filled.Settings"" Color=""Color.Default"" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardMedia Image=""_content/MudBlazor.Docs/images/pilars.jpg"" Height=""250"" />
        <MudCardContent>
            <MudText Typo=""Typo.body2"">@Localizer(""CardDescription"")</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudIconButton Icon=""@Icons.Material.Filled.Favorite"" Color=""Color.Default"" />
            <MudIconButton Icon=""@Icons.Material.Filled.Share"" Color=""Color.Default"" />
        </MudCardActions>
    </MudCard>
</MudRTLProvider>
<MudSwitch @bind-Checked=""@_rightToLeft"" Label=""Toggle Right to Left"" Color=""Color.Primary""/>

@code {
    private bool _rightToLeft = true;

    //This translation is for demonstration purposes only. In a real application, you should use a IStringLocalizer etc.
    private string Localizer(string key)
    {
        //This is just a google translation. If you have a better translation, feel free to share it with us  :)
        if (key.Equals(""CardAvatarLetter""))
            return _rightToLeft ? ""ا"" : ""I"";
        else if (key.Equals(""CardHeader""))
            return _rightToLeft ? ""استريا كرواتيا"" : ""Istra Croatia"";
        else if (key.Equals(""CardSubHeader""))
            return _rightToLeft ? ""شبه الجزيرة في أوروبا"" : ""Peninsula in Europe"";
        else if (key.Equals(""CardDescription""))
            return _rightToLeft ? ""التقطت هذه الصورة في قرية صغيرة في استرا كرواتيا"" : ""This photo was taken in a small village in Istra Croatia."";
        return """";
    }
}";

        public const string RTLLanguagesMRtlProviderExample = @"@inherits LayoutComponentBase

<MudRTLProvider>
    <MudThemeProvider/>
    <MudDialogProvider/>
    <MudSnackbarProvider/>

    <MudLayout>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
</MudRTLProvider>";

        public const string RTLLanguagesTextfieldExample = @"<MudRTLProvider RightToLeft=""true"">
    <MudGrid>
        <MudItem xs=""12"" sm=""4"">
            <MudText Align=""Align.Left"">Text</MudText>
            <MudTextField Label=""الاسم الأول"" Variant=""Variant.Outlined"" @bind-Value=""@_name"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Person""></MudTextField>
        </MudItem>
        <MudItem xs=""12"" sm=""4"">
            <MudText Align=""Align.Left"">Telephone</MudText>
            <MudTextField InputType=""InputType.Telephone"" Label=""رقم الهاتف"" Variant=""Variant.Outlined"" @bind-Value=""@_telephone"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Smartphone""></MudTextField>
        </MudItem>
        <MudItem xs=""12"" sm=""4"">
            <MudText Align=""Align.Left"">Email</MudText>
            <MudTextField InputType=""InputType.Email"" Label=""البريد الإلكتروني"" Variant=""Variant.Outlined"" @bind-Value=""@_email"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Email""></MudTextField>
        </MudItem>
    </MudGrid>
</MudRTLProvider>

@code {
    private string _name { get; set; } = ""John Smith"";
    private string _email { get; set; } = ""mail@example.com"";
    private long? _telephone { get; set; } = 1618033988;
}";

        public const string InstallationManualComponentsExample = @"<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>";

        public const string InstallationManualCssFontsExample = @"<link href=""https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"" rel=""stylesheet"" />
<link href=""_content/MudBlazor/MudBlazor.min.css"" rel=""stylesheet"" />";

        public const string InstallationManualImportsExample = @"@using MudBlazor";

        public const string InstallationManualPackageExample = @"dotnet add package MudBlazor";

        public const string InstallationTemplateInstallExample = @"dotnet new --install MudBlazor.Templates";

        public const string InstallationTemplateUsageExample = @"dotnet new mudblazor --host wasm --name MyApplication";

        public const string LayoutBasicAppbarExample = @"@inherits LayoutComponentBase

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        My Application
    </MudAppBar>
    <MudDrawer Open=""true"">

    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>";

        public const string LayoutBasicContainerExample = @"@inherits LayoutComponentBase

<MudMainContent>
    <MudContainer MaxWidth=""MaxWidth.Medium"">
        @Body
    </MudContainer>
</MudMainContent>";

        public const string LayoutBasicFunctionalityExample = @"@inherits LayoutComponentBase

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@((e) => DrawerToggle())"" />
        My Application
    </MudAppBar>
    <MudDrawer @bind-Open=""@_drawerOpen"">
        <MyNavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}";

        public const string LayoutBasicMudBlazorExample = @"@inherits LayoutComponentBase

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>";

        public const string LayoutBasicNavMenuExample = @"<MudNavMenu>
    <MudNavLink Href=""/"" Match=""NavLinkMatch.All"">Dashboard</MudNavLink>
    <MudNavLink Href=""/servers"" Match=""NavLinkMatch.Prefix"">Servers</MudNavLink>
    <MudNavGroup Title=""Settings"" Expanded=""true"">
        <MudNavLink Href=""/users""  Match=""NavLinkMatch.Prefix"">Users</MudNavLink>
        <MudNavLink Href=""/security""  Match=""NavLinkMatch.Prefix"">Security</MudNavLink>
    </MudNavGroup>
    <MudNavLink Href=""/about""  Match=""NavLinkMatch.Prefix"">About</MudNavLink>
</MudNavMenu>";

        public const string BasicUsageExample = @"<MudText Typo=""Typo.h6"">MudBlazor is @Text</MudText>
<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""ButtonOnClick"">@ButtonText</MudButton>

@code {
    public string Text { get; set; } = ""????"";
    public string ButtonText { get; set; } = ""Click Me"";
    public int ButtonClicked { get; set; }

    void ButtonOnClick()
    {
        ButtonClicked += 1;
        Text = $""Awesome x {ButtonClicked}"";
        ButtonText = ""Click Me Again"";
    }
}";

        public const string RightClickDrawerExample = @"<div @oncontextmenu=""ClickForDrawer"" @oncontextmenu:preventDefault class=""d-flex align-center justify-center"" style=""height: calc(100vh - 64px); background: linear-gradient(90deg, #00C9FF 0%, #92FE9D 100%);"">
    <MudDrawer @bind-Open=""@drawerOpen"" Anchor=""@Anchor.Right"" Elevation=""1"" Variant=""@DrawerVariant.Temporary"" DisableOverlay=""true"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My Drawer</MudText>
        </MudDrawerHeader>
        <MudCard>
            <MudCardContent>
                <MudButton Color=""Color.Primary"" Variant=""Variant.Outlined"">New Record</MudButton>
            </MudCardContent>
        </MudCard>
        <MudList Clickable=""true"">
            <MudListSubheader>List</MudListSubheader>
            <MudListItem Text=""Item 1""></MudListItem>
        </MudList>
    </MudDrawer>

    <MudText Class=""white-text"" Typo=""Typo.h6"">Right Click To Somewhere!</MudText>
</div>

@code{
    bool drawerOpen;

    private void ClickForDrawer(MouseEventArgs arg)
    {
        if (drawerOpen == false)
        {
            drawerOpen = true;
        }
        else
        {
            drawerOpen = false;
        }
    }
}";

        public const string Content1WireframeExample = @"<MudContainer Class=""mt-16 px-8"" MaxWidth=""MaxWidth.False"">
    <MudGrid>
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""12"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""6"">
            <MudGrid>
                <MudItem xs=""12"">
                    <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
                </MudItem>
                <MudItem xs=""12"">
                    <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs=""12"" sm=""6"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 100%""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""12"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>";

        public const string Content2WireframeExample = @"<MudContainer Class=""mt-16"">
    <MudText Typo=""Typo.h3"" Align=""Align.Center"" GutterBottom=""true"">Pricing</MudText>
    <MudText Align=""Align.Center"">Some long pricing text should go here maybe? who knows what text you would want here, i guess i cant fill it in for you.</MudText>
    <MudGrid Class=""mt-8"">
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudCard Elevation=""25"" Class=""rounded-lg pb-4"">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo=""Typo.h5"" Align=""Align.Center"">Beginner</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class=""d-flex justify-center"">
                        <MudText Typo=""Typo.h3"">$5</MudText>
                        <MudText Typo=""Typo.h5"" Class=""ml-1 mt-5"" Color=""Color.Secondary"">/Monthly</MudText>
                    </div>
                    <MudList Class=""mx-auto mt-4"" Style=""width:300px;"">
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            Unlimited something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            10 something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            No something
                        </MudListItem>
                    </MudList>
                </MudCardContent>
                <MudCardActions Class=""d-flex justify-center"">
                    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Large"" Style=""width:50%;"">Start Now</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudCard Elevation=""25"" Class=""rounded-lg pb-4"">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo=""Typo.h5"" Align=""Align.Center"">Starter</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class=""d-flex justify-center"">
                        <MudText Typo=""Typo.h3"">$10</MudText>
                        <MudText Typo=""Typo.h5"" Class=""ml-1 mt-5"" Color=""Color.Secondary"">/Monthly</MudText>
                    </div>
                    <MudList Class=""mx-auto mt-4"" Style=""width:300px;"">
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            Unlimited something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            10 something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            No something
                        </MudListItem>
                    </MudList>
                </MudCardContent>
                <MudCardActions Class=""d-flex justify-center"">
                    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Large"" Style=""width:50%;"">Start Now</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs=""12"" sm=""12"" md=""4"">
            <MudCard Elevation=""25"" Class=""rounded-lg pb-4"">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo=""Typo.h5"" Align=""Align.Center"">Professional</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class=""d-flex justify-center"">
                        <MudText Typo=""Typo.h3"">$15</MudText>
                        <MudText Typo=""Typo.h5"" Class=""ml-1 mt-5"" Color=""Color.Secondary"">/Monthly</MudText>
                    </div>
                    <MudList Class=""mx-auto mt-4"" Style=""width:300px;"">
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            Unlimited something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            10 something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            No something
                        </MudListItem>
                    </MudList>
                </MudCardContent>
                <MudCardActions Class=""d-flex justify-center"">
                    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Large"" Style=""width:50%;"">Start Now</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>";

        public const string Content3WireframeExample = @"<MudContainer Class=""mt-16"" MaxWidth=""MaxWidth.Medium"">
    <MudText Typo=""Typo.h3"" Align=""Align.Center"" GutterBottom=""true"">Checkout</MudText>
    <MudGrid Spacing=""6"" Class=""mt-16"">
        <MudItem xs=""7"">
            <MudText Typo=""Typo.h5"" GutterBottom=""true"">Billing address</MudText>
            <MudGrid>
                <MudItem xs=""12"">
                    <MudTextField T=""string"" Label=""Email"" />
                </MudItem>
                <MudItem xs=""12"">
                    <MudTextField T=""string"" Label=""Mobile number"" />
                </MudItem>
                <MudItem xs=""12"">
                    <MudTextField T=""string"" Label=""Personal number"" />
                </MudItem>
                <MudItem xs=""6"">
                    <MudTextField T=""string"" Label=""First name"" />
                </MudItem>
                <MudItem xs=""6"">
                    <MudTextField T=""string"" Label=""Last name"" />
                </MudItem>
                <MudItem xs=""12"">
                    <MudTextField T=""string"" Label=""Address"" />
                </MudItem>
                <MudItem xs=""6"">
                    <MudTextField T=""string"" Label=""Postal code"" />
                </MudItem>
                <MudItem xs=""6"">
                    <MudTextField T=""string"" Label=""Postal Area"" />
                </MudItem>
                <MudItem xs=""12"" Class=""d-flex justify-center"">
                    <MudButton Variant=""Variant.Filled"" DisableElevation=""true"" Color=""Color.Primary"" Size=""Size.Large"" Class=""mt-8"">Continue to Payment</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs=""5"">
            <MudText Typo=""Typo.h5"" GutterBottom=""true"">Cart</MudText>
            <MudPaper Class=""d-flex flex-column"" Style=""height:100%;"" Outlined=""true"">
                <MudList Clickable=""true"">
                    <MudListItem Icon=""@Icons.Material.Filled.ContentCut"">
                        <div class=""d-flex"">
                            <MudText>Scissor - Big</MudText>
                            <MudText Inline=""true"" Class=""ml-auto"">$5</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem Icon=""@Icons.Material.Filled.AirplanemodeActive"">
                        <div class=""d-flex"">
                            <MudText>Model Airplane</MudText>
                            <MudText Class=""ml-auto"">$20</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem Icon=""@Icons.Material.Filled.Create"">
                        <div class=""d-flex"">
                            <MudText>Plastic Glue</MudText>
                            <MudText Class=""ml-auto"">$12</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem Icon=""@Icons.Material.Filled.ColorLens"">
                        <div class=""d-flex"">
                            <MudText>Color set - Modern planes</MudText>
                            <MudText Class=""ml-auto"">$16</MudText>
                        </div>
                    </MudListItem>
                </MudList>
                <div class=""mt-auto"">
                    <MudDivider />
                    <div class=""d-flex pa-4"">
                        <MudText>Total:</MudText>
                        <MudText Class=""ml-auto""><b>$53</b></MudText>
                    </div>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>";

        public const string Layout1WireframeExample = @"<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@((e) => DrawerToggle())"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Material.Filled.MoreVert"" Color=""Color.Inherit"" Edge=""Edge.End"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""_drawerOpen"" Elevation=""2"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h5"" Class=""mt-1"">Application</MudText>
        </MudDrawerHeader>
        @*NavMenu*@
    </MudDrawer>
    <MudMainContent>
        @*Body*@
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}";

        public const string Layout2WireframeExample = @"<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@((e) => DrawerToggle())"" />
        <MudText Typo=""Typo.h5"" Class=""ml-3"">Application</MudText>
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Material.Filled.MoreVert"" Color=""Color.Inherit"" Edge=""Edge.End"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""_drawerOpen"" ClipMode=""DrawerClipMode.Always"" Elevation=""2"">
        @*NavMenu*@
    </MudDrawer>
    <MudMainContent>
        @*Body*@
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}";

        public const string Layout3WireframeExample = @"<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudText Typo=""Typo.h5"" Class=""ml-3"">Application</MudText>
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Material.Filled.MoreVert"" Color=""Color.Inherit"" Edge=""Edge.End"" />
    </MudAppBar>
    <MudMainContent>
        @*Body*@
    </MudMainContent>
</MudLayout>";

    }
}
