@page "/testPlc"
@using FluentValidation
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Newtonsoft.Json
@using MudBlazorTest.Server.Services
@using MudBlazorTest.Server.Services.Base

@inject IMicrologixPlcService plcService

@*inject ISnackbar _snackbar*@

<style type="text/css">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }

    .mud-table-foot .bold-text .mud-table-cell {
        font-weight: 500;
    }

    .table-options {
        margin: 15px;
        outline: solid;
    }
</style>


@*// TODO: Make the table min content width*@


<MudTable Items="@_plcDto" Hover="true" Striped="true" Bordered="true"
          FixedHeader="true"
          FixedFooter="false"
          RowsPerPage="10"
          Breakpoint="Breakpoint.Sm"
          Height="400px">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                      Class=""></MudTextField>
    </ToolBarContent>
    <HeaderContent>

        <MudTh>Name</MudTh>
        <MudTh>Id</MudTh>
        <MudTh>Gateway</MudTh>
        <MudTh>PlcType</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Name</MudTd>
        <MudTd DataLabel="Sign">@context.Id</MudTd>
        @*<MudTd DataLabel="Details">@context.Details</MudTd>*@
        <MudTd DataLabel="Name">@context.Gateway</MudTd>
        <MudTd DataLabel="Name">@context.PlcType</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@*<div class="table-options">*@
<MudSwitch @bind-Checked="ronly">Edit</MudSwitch>
@*</div>*@




@code {
    private class Element
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Details { get; set; }
    }

    private class Plc
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Gateway { get; set; }
        public string? PlcType { get; set; }
    }

    private List<ReadPlcDto> _plcDto = new List<ReadPlcDto>();
    private bool ronly = false;
    private string searchString = "";
    private Element selectedItem1 = null;
    private Element elementBeforeEdit;
    private HashSet<Element> selectedItems1 = new HashSet<Element>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private List<Element> tempElementList = new();
    private IEnumerable<Element> Elements = new List<Element>();
    private IEnumerable<Plc> _plcs = new List<Plc>();
    private HashSet<Element> selectedItems = new HashSet<Element>();
    //private HttpClient _client = new HttpClient {
    //        BaseAddress = new Uri("https://localhost:7241/")
    //    };


    protected override async Task OnInitializedAsync()
    {
        //_plcs = await _client.GetFromJsonAsync<List<Plc>>("api/MicrologixPlcs")
        ////    ?? new List<Plc>();

        ////_plcs = await new HttpClient().GetFromJsonAsync<List<Plc>>("https://localhost:7241/api/MicrologixPlcs")
        //?? new List<Plc>();
        var response = await plcService.Get();
        if (response.Success)
        {
            _plcDto = response.Data!;
        }


    }


    private async Task<List<Element>> AddElementsToList()
    {
        if (!Elements.Any())
        {

            for (int i = 1; i < 35; i++)
            {

                tempElementList.Add(new Element
                    {
                        Id = i,
                        Name = $"MyNameIs({i})",
                        Details = $"Element-{i} Details"
                    });

            }

        }
        await Task.CompletedTask;
        return tempElementList.ToList();

    }







}
